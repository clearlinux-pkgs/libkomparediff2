diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
index aec7959d05e6..f57a00bdb214 100644
--- a/.gitlab-ci.yml
+++ b/.gitlab-ci.yml
@@ -4,6 +4,6 @@
 include:
   - project: sysadmin/ci-utilities
     file:
-      - /gitlab-templates/linux.yml
-      - /gitlab-templates/freebsd.yml
-      - /gitlab-templates/windows.yml
+      - /gitlab-templates/linux-qt6.yml
+      - /gitlab-templates/freebsd-qt6.yml
+      - /gitlab-templates/windows-qt6.yml
diff --git a/.kde-ci.yml b/.kde-ci.yml
index cfe85b100e6d..8f1636decf0d 100644
--- a/.kde-ci.yml
+++ b/.kde-ci.yml
@@ -2,14 +2,14 @@
 # SPDX-License-Identifier: CC0-1.0
 
 Dependencies:
-- 'on': ['Linux/Qt5', 'FreeBSD/Qt5', 'Windows/Qt5']
+- 'on': ['Linux/Qt6', 'FreeBSD/Qt6', 'Windows/Qt6']
   'require':
-    'frameworks/extra-cmake-modules': '@stable'
-    'frameworks/kcoreaddons': '@stable'
-    'frameworks/kconfig': '@stable'
-    'frameworks/kxmlgui': '@stable'
-    'frameworks/ki18n': '@stable'
-    'frameworks/kio': '@stable'
+    'frameworks/extra-cmake-modules': '@latest-kf6'
+    'frameworks/kcoreaddons': '@latest-kf6'
+    'frameworks/kconfig': '@latest-kf6'
+    'frameworks/kxmlgui': '@latest-kf6'
+    'frameworks/ki18n': '@latest-kf6'
+    'frameworks/kio': '@latest-kf6'
 
 Options:
   require-passing-tests-on: [ '@all' ]
diff --git a/CMakeLists.txt b/CMakeLists.txt
index fe86cbe78626..542469302494 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,25 +1,9 @@
 cmake_minimum_required(VERSION 3.16)
 
-project(LibKompareDiff2 VERSION "5.4.0")
+project(LibKompareDiff2 VERSION "6.0.0")
 
-# Note about preliminary Qt6-port code around in "master" branch:
-# While initial Qt6 build suppprt was directly done in the "master" branch,
-# further work changed some LibKompareDiff2 API, taking advantage of given ABI breakage.
-# To not complicate the code trying to support both old and new in the same branch
-# instead a dedicated "kf6" branch was created.
-# For the 2 known consumers, kompare was kept in sync, also getting a reepective "kf6" branch,
-# while KDevelop (latest state: March 10th 2024) still needs a Qt6 port completed.
-# Plan so far has been to switch all three together to Qt6-based releases.
-# The initial Qt6 build support has not been removed from the "master" branch
-# in the (untested) assumption merging the "kf6" branch back will have less conflicts.
-# Once KDevelop is Qt6/KF6-ready, the "kf6" branch of libkomparediff2 and kompare
-# is to be merged into the "master" branch again, for a common Qt6 build release in KDE Gear.
-if (QT_MAJOR_VERSION STREQUAL "6" OR BUILD_WITH_QT6)
-    message(FATAL_ERROR "For Qt6 usage see the \"kf6\" work branch. Waiting on KDevelop to be Qt6/KF6-ready.")
-endif()
-
-set(QT_MIN_VERSION "5.15.2")
-set(KF_MIN_VERSION "5.91.0")
+set(QT_MIN_VERSION "6.5.0")
+set(KF_MIN_VERSION "6.0.0")
 
 find_package(ECM ${KF_MIN_VERSION} REQUIRED NO_MODULE)
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${ECM_MODULE_PATH})
@@ -36,37 +20,21 @@ include(ECMDeprecationSettings)
 include(CMakePackageConfigHelpers)
 include(FeatureSummary)
 
-# reset to 0 once all deprecated API has been removed on full switch to Qt6
-if (QT_MAJOR_VERSION STREQUAL "6")
-set(EXCLUDE_DEPRECATED_BEFORE_AND_AT 5.4.0 CACHE STRING "Control the range of deprecated API excluded from the build [default=7.5.0].")
-else()
 set(EXCLUDE_DEPRECATED_BEFORE_AND_AT 0 CACHE STRING "Control the range of deprecated API excluded from the build [default=0].")
-endif()
-
-if (QT_MAJOR_VERSION STREQUAL "6")
-    set(QT_MIN_VERSION "6.5.0")
-    set(KF_MIN_VERSION "5.240.0")
-    set(KF_MAJOR_VERSION "6")
-else()
-    set(KF_MAJOR_VERSION "5")
-endif()
 
 set(ADDITIONAL_REQUIRED_QT_COMPONENTS)
 if(BUILD_TESTING)
     list(APPEND ADDITIONAL_REQUIRED_QT_COMPONENTS Test)
 endif()
-if (QT_MAJOR_VERSION STREQUAL "6")
-    list(APPEND ADDITIONAL_REQUIRED_QT_COMPONENTS Core5Compat) # QTextCodec
-endif()
 
-find_package(Qt${QT_MAJOR_VERSION} ${QT_MIN_VERSION} CONFIG REQUIRED
+find_package(Qt6 ${QT_MIN_VERSION} CONFIG REQUIRED
     COMPONENTS
         Core
         Widgets
         ${ADDITIONAL_REQUIRED_QT_COMPONENTS}
 )
 
-find_package(KF${KF_MAJOR_VERSION} ${KF_MIN_VERSION} REQUIRED
+find_package(KF6 ${KF_MIN_VERSION} REQUIRED
     COMPONENTS
         CoreAddons
         Config
@@ -75,17 +43,10 @@ find_package(KF${KF_MAJOR_VERSION} ${KF_MIN_VERSION} REQUIRED
         KIO
 )
 
-if (QT_MAJOR_VERSION STREQUAL "6")
-    ecm_set_disabled_deprecation_versions(
-        QT 6.5
-        KF 5.239
-    )
-else()
-    ecm_set_disabled_deprecation_versions(
-        QT 5.15.2
-        KF 5.91
-    )
-endif()
+ecm_set_disabled_deprecation_versions(
+    QT 6.5
+    KF 6.0
+)
 
 add_subdirectory(src)
 
diff --git a/metainfo.yaml b/metainfo.yaml
index 7008ea5360d6..8f9b3308e92a 100644
--- a/metainfo.yaml
+++ b/metainfo.yaml
@@ -11,4 +11,4 @@ platforms:
 release: true
 libraries:
     - cmake: "KompareDiff2"
-cmakename: LibKompareDiff2
+cmakename: KompareDiff2
diff --git a/po/ia/libkomparediff2.po b/po/ia/libkomparediff2.po
deleted file mode 100644
index 61248597ae67..000000000000
--- a/po/ia/libkomparediff2.po
+++ /dev/null
@@ -1,134 +0,0 @@
-# Copyright (C) YEAR This file is copyright:
-# This file is distributed under the same license as the libkomparediff2 package.
-#
-# giovanni <g.sora@tiscali.it>, 2024.
-msgid ""
-msgstr ""
-"Project-Id-Version: libkomparediff2\n"
-"Report-Msgid-Bugs-To: https://bugs.kde.org\n"
-"POT-Creation-Date: 2023-11-05 12:38+0000\n"
-"PO-Revision-Date: 2024-04-30 12:19+0200\n"
-"Last-Translator: giovanni <g.sora@tiscali.it>\n"
-"Language-Team: Interlingua <kde-i18n-doc@kde.org>\n"
-"Language: ia\n"
-"MIME-Version: 1.0\n"
-"Content-Type: text/plain; charset=UTF-8\n"
-"Content-Transfer-Encoding: 8bit\n"
-"Plural-Forms: nplurals=2; plural=n != 1;\n"
-"X-Generator: Lokalize 22.12.3\n"
-
-#: komparemodellist.cpp:63
-#, kde-format
-msgctxt "@action"
-msgid "&Apply Difference"
-msgstr "&Applica Differentia"
-
-#: komparemodellist.cpp:67
-#, kde-format
-msgctxt "@action"
-msgid "Un&apply Difference"
-msgstr ""
-
-#: komparemodellist.cpp:71
-#, kde-format
-msgctxt "@action"
-msgid "App&ly All"
-msgstr ""
-
-#: komparemodellist.cpp:75
-#, kde-format
-msgctxt "@action"
-msgid "&Unapply All"
-msgstr ""
-
-#: komparemodellist.cpp:85
-#, kde-format
-msgctxt "@action"
-msgid "P&revious File"
-msgstr ""
-
-#: komparemodellist.cpp:89
-#, kde-format
-msgctxt "@action"
-msgid "N&ext File"
-msgstr "Proxim&e File"
-
-#: komparemodellist.cpp:93
-#, kde-format
-msgctxt "@action"
-msgid "&Previous Difference"
-msgstr ""
-
-#: komparemodellist.cpp:97
-#, kde-format
-msgctxt "@action"
-msgid "&Next Difference"
-msgstr ""
-
-#: komparemodellist.cpp:258 komparemodellist.cpp:283
-#, kde-format
-msgid ""
-"<qt>No models or no differences, this file: <b>%1</b>, is not a valid diff "
-"file.</qt>"
-msgstr ""
-
-#: komparemodellist.cpp:267
-#, kde-format
-msgid ""
-"<qt>There were problems applying the diff <b>%1</b> to the file <b>%2</b>.</"
-"qt>"
-msgstr ""
-
-#: komparemodellist.cpp:294
-#, kde-format
-msgid ""
-"<qt>There were problems applying the diff <b>%1</b> to the folder <b>%2</b>."
-"</qt>"
-msgstr ""
-
-#: komparemodellist.cpp:326 komparemodellist.cpp:687
-#, kde-format
-msgid "Could not open a temporary file."
-msgstr "Il non pote aperir un file temporanee."
-
-#: komparemodellist.cpp:374 komparemodellist.cpp:381
-#, kde-format
-msgid "<qt>Could not write to the temporary file <b>%1</b>, deleting it.</qt>"
-msgstr ""
-
-#: komparemodellist.cpp:412
-#, kde-format
-msgid ""
-"<qt>Could not create destination directory <b>%1</b>.\n"
-"The file has not been saved.</qt>"
-msgstr ""
-
-#: komparemodellist.cpp:440
-#, kde-format
-msgid ""
-"<qt>Could not upload the temporary file to the destination location <b>%1</"
-"b>. The temporary file is still available under: <b>%2</b>. You can manually "
-"copy it to the right place.</qt>"
-msgstr ""
-
-#: komparemodellist.cpp:519 komparemodellist.cpp:634 komparemodellist.cpp:654
-#, kde-format
-msgid "Could not parse diff output."
-msgstr ""
-
-#: komparemodellist.cpp:535
-#, kde-format
-msgid "The files are identical."
-msgstr "Le files es identic."
-
-#: komparemodellist.cpp:719
-#, kde-format
-msgid "Could not write to the temporary file."
-msgstr ""
-
-#: komparemodellist.cpp:993
-#, kde-format
-msgid ""
-"The diff is malformed. Some lines could not be parsed and will not be "
-"displayed in the diff view."
-msgstr ""
diff --git a/po/sv/libkomparediff2.po b/po/sv/libkomparediff2.po
index d8168002478d..1f6bcae52f56 100644
--- a/po/sv/libkomparediff2.po
+++ b/po/sv/libkomparediff2.po
@@ -1,14 +1,14 @@
 # Copyright (C) YEAR This_file_is_part_of_KDE
 # This file is distributed under the same license as the PACKAGE package.
 #
-# Stefan Asserh채ll <stefan.asserhall@gmail.com>, 2013, 2020.
+# Stefan Asserh채ll <stefan.asserhall@bredband.net>, 2013, 2020.
 msgid ""
 msgstr ""
 "Project-Id-Version: \n"
 "Report-Msgid-Bugs-To: https://bugs.kde.org\n"
 "POT-Creation-Date: 2023-11-05 12:38+0000\n"
 "PO-Revision-Date: 2020-05-04 19:36+0200\n"
-"Last-Translator: Stefan Asserh채ll <stefan.asserhall@gmail.com>\n"
+"Last-Translator: Stefan Asserh채ll <stefan.asserhall@bredband.net>\n"
 "Language-Team: Swedish <kde-i18n-doc@kde.org>\n"
 "Language: sv\n"
 "MIME-Version: 1.0\n"
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index de1d4805952f..701aa0158c9e 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1,5 +1,5 @@
 set(KOMPAREDIFF2_INSTALL_INCLUDEDIR "${KDE_INSTALL_INCLUDEDIR}/KompareDiff2")
-set(KOMPAREDIFF2_CMAKECONFIG_NAME "LibKompareDiff2")
+set(KOMPAREDIFF2_CMAKECONFIG_NAME "KompareDiff2")
 
 add_definitions(-DTRANSLATION_DOMAIN=\"libkomparediff2\")
 
@@ -8,7 +8,7 @@ ecm_setup_version(PROJECT
     VERSION_HEADER       "komparediff2_version.h"
     PACKAGE_VERSION_FILE "${CMAKE_CURRENT_BINARY_DIR}/${KOMPAREDIFF2_CMAKECONFIG_NAME}ConfigVersion.cmake"
     COMPATIBILITY        SameMajorVersion
-    SOVERSION            5
+    SOVERSION            6
 )
 
 add_library(komparediff2 SHARED)
@@ -21,125 +21,72 @@ set_target_properties(komparediff2 PROPERTIES
 
 target_sources(komparediff2 PRIVATE
     kompareprocess.cpp
-    komparemodellist.cpp
+    modellist.cpp
+    modellist_p.cpp
     diffmodellist.cpp
     diffmodel.cpp
+    diffmodel_p.cpp
     difference.cpp
+    differencestring.cpp
     diffhunk.cpp
     diffsettings.cpp
-    settingsbase.cpp
+    info.cpp
     parser.cpp
     parserbase.cpp
     cvsdiffparser.cpp
     diffparser.cpp
     perforceparser.cpp
     stringlistpair.cpp
-    kompare.cpp
 )
 
 ecm_qt_declare_logging_category(komparediff2
-    HEADER komparediffdebug.h
-    IDENTIFIER LIBKOMPAREDIFF2
+    HEADER komparediff2_logging.h
+    IDENTIFIER KOMPAREDIFF2_LOG
     CATEGORY_NAME "libkomparediff"
     DESCRIPTION "libkomparediff"
     EXPORT komparediff2
 )
 
-if (QT_MAJOR_VERSION STREQUAL "5")
-    set(_generate_export_header_version_args)
-else()
-    # For Qt6/KF6 world transitively include the version header
-    if(ECM_VERSION VERSION_LESS "5.106")
-        set(include_version_header_code "#include <komparediff2_version.h>\n")
-        set(_generate_export_header_version_args CUSTOM_CONTENT_FROM_VARIABLE include_version_header_code)
-    else()
-        set(_generate_export_header_version_args USE_VERSION_HEADER VERSION_BASE_NAME KOMPAREDIFF2)
-    endif()
-endif()
-
 ecm_generate_export_header(komparediff2
     VERSION ${KOMPAREDIFF2_VERSION}
     DEPRECATED_BASE_VERSION 0
-    DEPRECATION_VERSIONS 5.4
+    DEPRECATION_VERSIONS
     EXCLUDE_DEPRECATED_BEFORE_AND_AT ${EXCLUDE_DEPRECATED_BEFORE_AND_AT}
-    ${_generate_export_header_version_args}
+    USE_VERSION_HEADER
 )
 
 target_link_libraries(komparediff2
     PUBLIC
-        KF${KF_MAJOR_VERSION}::XmlGui
-        KF${KF_MAJOR_VERSION}::ConfigCore
-        Qt::Widgets
-        Qt::Core
+        KF6::XmlGui
+        KF6::ConfigCore
+        Qt6::Widgets
+        Qt6::Core
     PRIVATE
-        KF${KF_MAJOR_VERSION}::KIOCore
-        KF${KF_MAJOR_VERSION}::I18n
-        KF${KF_MAJOR_VERSION}::CoreAddons
+        KF6::KIOCore
+        KF6::I18n
+        KF6::CoreAddons
 )
 
-if (QT_MAJOR_VERSION STREQUAL "6")
-    target_link_libraries(komparediff2 PRIVATE Qt6::Core5Compat)
-endif()
-
 target_include_directories(komparediff2 INTERFACE "$<INSTALL_INTERFACE:${KOMPAREDIFF2_INSTALL_INCLUDEDIR}>")
-if(NOT EXCLUDE_DEPRECATED_BEFORE_AND_AT STREQUAL "CURRENT" AND EXCLUDE_DEPRECATED_BEFORE_AND_AT VERSION_LESS 5.4.0)
-    target_include_directories(komparediff2 PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/compat>")
-endif()
 
 install(TARGETS komparediff2 EXPORT LibKompareDiff2Targets ${KDE_INSTALL_TARGETS_DEFAULT_ARGS})
 
 ecm_generate_headers(komparediff2_CamelCase_HEADERS
     HEADER_NAMES
-        Difference,DifferenceString
+        Difference
+        DifferenceString
         DiffHunk
         DiffModel
         DiffModelList
         DiffSettings
-        Kompare
-        KompareModelList
+        Info
+        Global
         Marker
-        SettingsBase
+        ModelList
     PREFIX KompareDiff2
     REQUIRED_HEADERS komparediff2_HEADERS
 )
 
-# provide compat headers for old include path prefix libkomparediff2/
-if(NOT EXCLUDE_DEPRECATED_BEFORE_AND_AT STREQUAL "CURRENT" AND EXCLUDE_DEPRECATED_BEFORE_AND_AT VERSION_LESS 5.4.0)
-    set(compat_headers
-        compat/diff2_export.h
-        compat/diff2_export_p.h
-    )
-
-    function(generate_compat_headers)
-        foreach(classname ${ARGV})
-            string(TOLOWER ${classname} classname_lc)
-            set(header_name "${classname_lc}.h")
-            set(compat_header "${CMAKE_CURRENT_BINARY_DIR}/compat/${header_name}")
-            configure_file(compat/header.h.in ${compat_header} @ONLY)
-            list(APPEND compat_headers ${compat_header})
-        endforeach()
-        set(compat_headers ${compat_headers} PARENT_SCOPE)
-    endfunction()
-
-    generate_compat_headers(
-        Difference
-        DiffHunk
-        DiffModel
-        DiffModelList
-        DiffSettings
-        Kompare
-        KompareModelList
-        Marker
-        SettingsBase
-    )
-
-    install(
-        FILES ${compat_headers}
-        DESTINATION ${KOMPAREDIFF2_INSTALL_INCLUDEDIR}/libkomparediff2
-        COMPONENT Devel
-    )
-endif()
-
 install(
     FILES
         ${CMAKE_CURRENT_BINARY_DIR}/komparediff2_export.h
@@ -177,7 +124,7 @@ ecm_qt_install_logging_categories(
 set(_LibKompareDiff2_CONFIG_DEST "${KDE_INSTALL_CMAKEPACKAGEDIR}/${KOMPAREDIFF2_CMAKECONFIG_NAME}")
 
 configure_package_config_file(
-    "${CMAKE_CURRENT_SOURCE_DIR}/LibKompareDiff2Config.cmake.in"
+    "${CMAKE_CURRENT_SOURCE_DIR}/KompareDiff2Config.cmake.in"
     "${CMAKE_CURRENT_BINARY_DIR}/${KOMPAREDIFF2_CMAKECONFIG_NAME}Config.cmake"
     INSTALL_DESTINATION  "${_LibKompareDiff2_CONFIG_DEST}"
 )
diff --git a/src/KompareDiff2Config.cmake.in b/src/KompareDiff2Config.cmake.in
new file mode 100644
index 000000000000..bb13a28197dd
--- /dev/null
+++ b/src/KompareDiff2Config.cmake.in
@@ -0,0 +1,10 @@
+@PACKAGE_INIT@
+
+include(CMakeFindDependencyMacro)
+find_dependency(Qt6Core "@QT_MIN_VERSION@")
+find_dependency(Qt6Widgets "@QT_MIN_VERSION@")
+
+find_dependency(KF6Config "@KF_MIN_VERSION@")
+find_dependency(KF6XmlGui "@KF_MIN_VERSION@")
+
+include("${CMAKE_CURRENT_LIST_DIR}/@KOMPAREDIFF2_CMAKECONFIG_NAME@Targets.cmake")
diff --git a/src/LibKompareDiff2Config.cmake.in b/src/LibKompareDiff2Config.cmake.in
deleted file mode 100644
index 190c7983c903..000000000000
--- a/src/LibKompareDiff2Config.cmake.in
+++ /dev/null
@@ -1,13 +0,0 @@
-@PACKAGE_INIT@
-
-include(CMakeFindDependencyMacro)
-find_dependency(Qt@QT_MAJOR_VERSION@Core "@QT_MIN_VERSION@")
-find_dependency(Qt@QT_MAJOR_VERSION@Widgets "@QT_MIN_VERSION@")
-
-find_dependency(KF@KF_MAJOR_VERSION@Config "@KF_MIN_VERSION@")
-find_dependency(KF@KF_MAJOR_VERSION@XmlGui "@KF_MIN_VERSION@")
-
-include("${CMAKE_CURRENT_LIST_DIR}/@KOMPAREDIFF2_CMAKECONFIG_NAME@Targets.cmake")
-
-get_target_property(LIBKOMPAREDIFF2_INCLUDE_DIR KompareDiff2 INTERFACE_INCLUDE_DIRECTORIES)
-set(LIBKOMPAREDIFF2_LIBRARIES KompareDiff2)
diff --git a/src/compat/diff2_export.h b/src/compat/diff2_export.h
deleted file mode 100644
index 3fe5fda6cccc..000000000000
--- a/src/compat/diff2_export.h
+++ /dev/null
@@ -1,21 +0,0 @@
-/*
-SPDX-FileCopyrightText: 2023 Friedrich W. H. Kossebau <kossebau@kde.org>
-
-SPDX-License-Identifier: GPL-2.0-or-later
-*/
-
-#ifndef DIFF2_EXPORT_H
-#define DIFF2_EXPORT_H
-
-#include <komparediff2/komparediff2_export.h>
-
-#if KOMPAREDIFF2_ENABLE_DEPRECATED_SINCE(5, 4)
-#  include "diff2_export_p.h"
-#  if KOMPAREDIFF2_DEPRECATED_WARNINGS_SINCE >= 0x050400
-#      pragma message("Deprecated header. Since 5.4, use #include <komparediff2/komparediff2_export.h> instead")
-#  endif
-#else
-#   error "Include of deprecated header is disabled"
-#endif
-
-#endif /* DIFF2_EXPORT_H */
diff --git a/src/compat/diff2_export_p.h b/src/compat/diff2_export_p.h
deleted file mode 100644
index 47373e9f1dd3..000000000000
--- a/src/compat/diff2_export_p.h
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
-SPDX-FileCopyrightText: 2023 Friedrich W. H. Kossebau <kossebau@kde.org>
-
-SPDX-License-Identifier: GPL-2.0-or-later
-*/
-
-// Private header,do not use.
-// Provides backward compat definitions.
-// Assumes komparediff2_export.h was included before
-
-#ifndef DIFF2_EXPORT_P_H
-#define DIFF2_EXPORT_P_H
-
-#ifndef DIFF2_EXPORT
-#  define DIFF2_EXPORT KOMPAREDIFF2_EXPORT
-#endif
-
-#ifndef DIFF2_NO_EXPORT
-#  define DIFF2_NO_EXPORT KOMPAREDIFF2_NO_EXPORT
-#endif
-
-#ifndef DIFF2_DEPRECATED
-#  define DIFF2_DEPRECATED KOMPAREDIFF2_DEPRECATED
-#endif
-
-#ifndef DIFF2_DEPRECATED_EXPORT
-#  define DIFF2_DEPRECATED_EXPORT KOMPAREDIFF2_DEPRECATED_EXPORT
-#endif
-
-#ifndef DIFF2_DEPRECATED_NO_EXPORT
-#  define DIFF2_DEPRECATED_NO_EXPORT KOMPAREDIFF2_DEPRECATED_NO_EXPORT
-#endif
-
-#endif /* DIFF2_EXPORT_P_H */
diff --git a/src/compat/header.h.in b/src/compat/header.h.in
deleted file mode 100644
index 9e4b14bba635..000000000000
--- a/src/compat/header.h.in
+++ /dev/null
@@ -1,11 +0,0 @@
-#include <komparediff2/komparediff2_export.h>
-
-#if KOMPAREDIFF2_ENABLE_DEPRECATED_SINCE(5, 4)
-#   include "diff2_export_p.h"
-#   include <komparediff2/@header_name@>
-#   if KOMPAREDIFF2_DEPRECATED_WARNINGS_SINCE >= 0x050400
-#       pragma message("Deprecated header. Since 5.4, use #include <KompareDiff2/@classname@> instead")
-#   endif
-#else
-#   error "Include of deprecated header is disabled"
-#endif
diff --git a/src/cvsdiffparser.cpp b/src/cvsdiffparser.cpp
index 47625233e4a1..2dd424094f24 100644
--- a/src/cvsdiffparser.cpp
+++ b/src/cvsdiffparser.cpp
@@ -1,19 +1,21 @@
 /*
-SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
+    SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #include "cvsdiffparser.h"
 
+// lib
+#include "modellist.h"
+#include <komparediff2_logging.h>
+// Qt
 #include <QRegularExpression>
 
-#include <komparediffdebug.h>
-#include "komparemodellist.h"
+using namespace KompareDiff2;
 
-using namespace Diff2;
-
-CVSDiffParser::CVSDiffParser(const KompareModelList* list, const QStringList& diff) : ParserBase(list, diff)
+CVSDiffParser::CVSDiffParser(const ModelList *list, const QStringList &diff)
+    : ParserBase(list, diff)
 {
     // The regexps needed for context cvs diff parsing, the rest is the same as in parserbase.cpp
     // third capture in header1 is non optional for cvs diff, it is the revision
@@ -23,13 +25,11 @@ CVSDiffParser::CVSDiffParser(const KompareModelList* list, const QStringList& di
     m_normalDiffHeader.setPattern(QRegularExpression::anchoredPattern(QStringLiteral("Index: (.*)\\n")));
 }
 
-CVSDiffParser::~CVSDiffParser()
-{
-}
+CVSDiffParser::~CVSDiffParser() = default;
 
-enum Kompare::Format CVSDiffParser::determineFormat()
+Format CVSDiffParser::determineFormat()
 {
-//     qCDebug(LIBKOMPAREDIFF2) << "Determining the format of the CVSDiff";
+    //     qCDebug(KOMPAREDIFF2_LOG) << "Determining the format of the CVSDiff";
 
     QRegularExpression normalRE(QStringLiteral("[0-9]+[0-9,]*[acd][0-9]+[0-9,]*"));
     QRegularExpression unifiedRE(QStringLiteral("^--- [^\\t]+\\t"));
@@ -37,55 +37,44 @@ enum Kompare::Format CVSDiffParser::determineFormat()
     QRegularExpression rcsRE(QStringLiteral("^[acd][0-9]+ [0-9]+"));
     QRegularExpression edRE(QStringLiteral("^[0-9]+[0-9,]*[acd]"));
 
-    QStringList::ConstIterator it = m_diffLines.begin();
-
-    while (it != m_diffLines.end())
-    {
-        if ((*it).indexOf(normalRE, 0) == 0)
-        {
-//             qCDebug(LIBKOMPAREDIFF2) << "Difflines are from a Normal diff...";
-            return Kompare::Normal;
+    for (const QString &diffLine : std::as_const(m_diffLines)) {
+        if (diffLine.indexOf(normalRE, 0) == 0) {
+//             qCDebug(KOMPAREDIFF2_LOG) << "Difflines are from a Normal diff...";
+            return Normal;
         }
-        else if ((*it).indexOf(unifiedRE, 0) == 0)
-        {
-//             qCDebug(LIBKOMPAREDIFF2) << "Difflines are from a Unified diff...";
-            return Kompare::Unified;
+        if (diffLine.indexOf(unifiedRE, 0) == 0) {
+//             qCDebug(KOMPAREDIFF2_LOG) << "Difflines are from a Unified diff...";
+            return Unified;
         }
-        else if ((*it).indexOf(contextRE, 0) == 0)
-        {
-//             qCDebug(LIBKOMPAREDIFF2) << "Difflines are from a Context diff...";
-            return Kompare::Context;
+        if (diffLine.indexOf(contextRE, 0) == 0) {
+//             qCDebug(KOMPAREDIFF2_LOG) << "Difflines are from a Context diff...";
+            return Context;
         }
-        else if ((*it).indexOf(rcsRE, 0) == 0)
-        {
-//             qCDebug(LIBKOMPAREDIFF2) << "Difflines are from a RCS diff...";
-            return Kompare::RCS;
+        if (diffLine.indexOf(rcsRE, 0) == 0) {
+//             qCDebug(KOMPAREDIFF2_LOG) << "Difflines are from a RCS diff...";
+            return RCS;
         }
-        else if ((*it).indexOf(edRE, 0) == 0)
-        {
-//             qCDebug(LIBKOMPAREDIFF2) << "Difflines are from an ED diff...";
-            return Kompare::Ed;
+        if (diffLine.indexOf(edRE, 0) == 0) {
+//             qCDebug(KOMPAREDIFF2_LOG) << "Difflines are from an ED diff...";
+            return Ed;
         }
-        ++it;
     }
-//     qCDebug(LIBKOMPAREDIFF2) << "Difflines are from an unknown diff...";
-    return Kompare::UnknownFormat;
+    //     qCDebug(KOMPAREDIFF2_LOG) << "Difflines are from an unknown diff...";
+    return UnknownFormat;
 }
 
 bool CVSDiffParser::parseNormalDiffHeader()
 {
-    qCDebug(LIBKOMPAREDIFF2) << "CVSDiffParser::parseNormalDiffHeader()";
+    qCDebug(KOMPAREDIFF2_LOG) << "CVSDiffParser::parseNormalDiffHeader()";
     bool result = false;
 
     QStringList::ConstIterator diffEnd = m_diffLines.end();
 
-    while (m_diffIterator != diffEnd)
-    {
+    while (m_diffIterator != diffEnd) {
         const auto normalDiffHeaderMatch = m_normalDiffHeader.match(*m_diffIterator);
-        if (normalDiffHeaderMatch.hasMatch())
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Matched length Header = " << normalDiffHeaderMatch.capturedLength();
-            qCDebug(LIBKOMPAREDIFF2) << "Matched string Header = " << normalDiffHeaderMatch.captured(0);
+        if (normalDiffHeaderMatch.hasMatch()) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Matched length Header = " << normalDiffHeaderMatch.capturedLength();
+            qCDebug(KOMPAREDIFF2_LOG) << "Matched string Header = " << normalDiffHeaderMatch.captured(0);
 
             m_currentModel = new DiffModel();
             m_currentModel->setSourceFile(normalDiffHeaderMatch.captured(1));
@@ -95,16 +84,13 @@ bool CVSDiffParser::parseNormalDiffHeader()
 
             ++m_diffIterator;
             break;
-        }
-        else
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "No match for: " << (*m_diffIterator);
+        } else {
+            qCDebug(KOMPAREDIFF2_LOG) << "No match for: " << (*m_diffIterator);
         }
         ++m_diffIterator;
     }
 
-    if (result == false)
-    {
+    if (result == false) {
         // Set this to the first line again and hope it is a single file diff
         m_diffIterator = m_diffLines.begin();
         m_currentModel = new DiffModel();
@@ -114,7 +100,6 @@ bool CVSDiffParser::parseNormalDiffHeader()
     return result;
 }
 
-
 bool CVSDiffParser::parseEdDiffHeader()
 {
     return false;
diff --git a/src/cvsdiffparser.h b/src/cvsdiffparser.h
index 1c2558c09005..7d1a1655fee2 100644
--- a/src/cvsdiffparser.h
+++ b/src/cvsdiffparser.h
@@ -1,27 +1,28 @@
 /*
-SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
+    SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #ifndef KOMPAREDIFF2_CVSDIFFPARSER_H
 #define KOMPAREDIFF2_CVSDIFFPARSER_H
 
+// lib
 #include "parserbase.h"
 
-namespace Diff2
+namespace KompareDiff2
 {
 
-class KompareModelList;
+class ModelList;
 
 class CVSDiffParser : public ParserBase
 {
 public:
-    CVSDiffParser(const KompareModelList* list, const QStringList& diff);
+    CVSDiffParser(const ModelList *list, const QStringList &diff);
     ~CVSDiffParser() override;
 
 protected:
-    enum Kompare::Format determineFormat() override;
+    Format determineFormat() override;
 
 protected:
 //     virtual bool parseContextDiffHeader();
@@ -43,6 +44,6 @@ protected:
 //     virtual bool parseUnifiedHunkBody();
 };
 
-} // End of namespace Diff2
+} // End of namespace KompareDiff2
 
 #endif
diff --git a/src/difference.cpp b/src/difference.cpp
index 8c4268ecd4a2..8ccb37cd34ca 100644
--- a/src/difference.cpp
+++ b/src/difference.cpp
@@ -1,91 +1,210 @@
 /*
-SPDX-FileCopyrightText: 2001-2004,2009 Otto Bruggeman <bruggie@gmail.com>
-SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+    SPDX-FileCopyrightText: 2001-2004,2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #include "difference.h"
+#include "difference_p.h"
+
+// lib
 #include "differencestringpair.h"
 #include "levenshteintable.h"
 
-using namespace Diff2;
+using namespace KompareDiff2;
 
-Difference::Difference(int sourceLineNo, int destinationLineNo, int type) :
-    QObject(),
-    m_type(type),
-    m_sourceLineNo(sourceLineNo),
-    m_destinationLineNo(destinationLineNo),
-    m_trackingDestinationLineNo(sourceLineNo),      // The whole patch starts as unapplied
-    m_applied(false),
-    m_conflicts(false),
-    m_unsaved(false)
+Difference::Difference(int sourceLineNo, int destinationLineNo, int type)
+    : d_ptr(new DifferencePrivate(sourceLineNo, destinationLineNo, type))
 {
 }
 
-Difference::~Difference()
+Difference::~Difference() = default;
+
+int Difference::type() const
+{
+    Q_D(const Difference);
+
+    return d->type;
+};
+
+int Difference::sourceLineNumber() const
+{
+    Q_D(const Difference);
+
+    return d->sourceLineNo;
+}
+
+int Difference::destinationLineNumber() const
+{
+    Q_D(const Difference);
+
+    return d->destinationLineNo;
+}
+
+int Difference::trackingDestinationLineNumber() const
+{
+    Q_D(const Difference);
+
+    return d->trackingDestinationLineNo;
+}
+
+void Difference::setTrackingDestinationLineNumber(int i)
+{
+    Q_D(Difference);
+
+    d->trackingDestinationLineNo = i;
+}
+
+DifferenceString *Difference::sourceLineAt(int i) const
 {
-    qDeleteAll(m_sourceLines);
-    qDeleteAll(m_destinationLines);
+    Q_D(const Difference);
+
+    return d->sourceLines[i];
 }
 
-void Difference::addSourceLine(QString line)
+DifferenceString *Difference::destinationLineAt(int i) const
 {
-    m_sourceLines.append(new DifferenceString(line));
+    Q_D(const Difference);
+
+    return d->destinationLines[i];
+}
+
+DifferenceStringList Difference::sourceLines() const
+{
+    Q_D(const Difference);
+
+    return d->sourceLines;
+}
+
+DifferenceStringList Difference::destinationLines() const
+{
+    Q_D(const Difference);
+
+    return d->destinationLines;
 }
 
-void Difference::addDestinationLine(QString line)
+bool Difference::hasConflict() const
 {
-    m_destinationLines.append(new DifferenceString(line));
+    Q_D(const Difference);
+
+    return d->conflicts;
+}
+
+void Difference::setConflict(bool conflicts)
+{
+    Q_D(Difference);
+
+    d->conflicts = conflicts;
+}
+
+bool Difference::isUnsaved() const
+{
+    Q_D(const Difference);
+
+    return d->unsaved;
+}
+
+void Difference::setUnsaved(bool unsaved)
+{
+    Q_D(Difference);
+
+    d->unsaved = unsaved;
+}
+
+bool Difference::applied() const
+{
+    Q_D(const Difference);
+
+    return d->applied;
+}
+
+void Difference::setType(int type)
+{
+    Q_D(Difference);
+
+    d->type = type;
+}
+
+void Difference::addSourceLine(const QString &line)
+{
+    Q_D(Difference);
+
+    d->sourceLines.append(new DifferenceString(line));
+}
+
+void Difference::addDestinationLine(const QString &line)
+{
+    Q_D(Difference);
+
+    d->destinationLines.append(new DifferenceString(line));
 }
 
 int Difference::sourceLineCount() const
 {
-    return m_sourceLines.count();
+    Q_D(const Difference);
+
+    return d->sourceLines.count();
 }
 
 int Difference::destinationLineCount() const
 {
-    return m_destinationLines.count();
+    Q_D(const Difference);
+
+    return d->destinationLines.count();
 }
 
 int Difference::sourceLineEnd() const
 {
-    return m_sourceLineNo + m_sourceLines.count();
+    Q_D(const Difference);
+
+    return d->sourceLineNo + d->sourceLines.count();
 }
 
 int Difference::destinationLineEnd() const
 {
-    return m_destinationLineNo + m_destinationLines.count();
+    Q_D(const Difference);
+
+    return d->destinationLineNo + d->destinationLines.count();
 }
 
 int Difference::trackingDestinationLineEnd() const
 {
-    return m_trackingDestinationLineNo + m_destinationLines.count();
+    Q_D(const Difference);
+
+    return d->trackingDestinationLineNo + d->destinationLines.count();
 }
 
 void Difference::apply(bool apply)
 {
-    if (apply != m_applied)
-    {
-        m_applied = apply;
-        m_unsaved = !m_unsaved;
-        Q_EMIT differenceApplied(this);
+    Q_D(Difference);
+
+    if (apply == d->applied) {
+        return;
     }
+
+    d->applied = apply;
+    d->unsaved = !d->unsaved;
+    Q_EMIT differenceApplied(this);
 }
 
 void Difference::applyQuietly(bool apply)
 {
-    if (m_applied != apply)
-    {
-        m_unsaved = !m_unsaved;
-        m_applied = apply;
+    Q_D(Difference);
+
+    if (d->applied == apply) {
+        return;
     }
+
+    d->unsaved = !d->unsaved;
+    d->applied = apply;
 }
 
 void Difference::determineInlineDifferences()
 {
-    if (m_type != Difference::Change)
+    Q_D(Difference);
+
+    if (d->type != Difference::Change)
         return;
 
     // Do nothing for now when the slc != dlc
@@ -98,11 +217,10 @@ void Difference::determineInlineDifferences()
 
     LevenshteinTable<DifferenceStringPair> table;
 
-    for (int i = 0; i < slc; ++i)
-    {
-        DifferenceString* sl = sourceLineAt(i);
-        DifferenceString* dl = destinationLineAt(i);
-        DifferenceStringPair* pair = new DifferenceStringPair(sl, dl);
+    for (int i = 0; i < slc; ++i) {
+        DifferenceString *sl = sourceLineAt(i);
+        DifferenceString *dl = destinationLineAt(i);
+        DifferenceStringPair *pair = new DifferenceStringPair(sl, dl);
 
         // return value 0 means something went wrong creating the table so don't bother finding markers
         if (table.createTable(pair) != 0)
@@ -112,16 +230,13 @@ void Difference::determineInlineDifferences()
 
 QString Difference::recreateDifference() const
 {
+    Q_D(const Difference);
+
     QString difference;
 
     // source
-    DifferenceStringListConstIterator stringIt = m_sourceLines.begin();
-    DifferenceStringListConstIterator sEnd     = m_sourceLines.end();
-
-    for (; stringIt != sEnd; ++stringIt)
-    {
-        switch (m_type)
-        {
+    for (const DifferenceString *diffString : d->sourceLines) {
+        switch (d->type) {
         case Change:
         case Delete:
             difference += QLatin1Char('-');
@@ -130,20 +245,15 @@ QString Difference::recreateDifference() const
             // Insert but this is not possible in source
             // Unchanged will be handled in destination
             // since they are the same
-//             qCDebug(LIBKOMPAREDIFF2) << "Go away, nothing to do for you in source...";
+//             qCDebug(KOMPAREDIFF2_LOG) << "Go away, nothing to do for you in source...";
             continue;
         }
-        difference += (*stringIt)->string();
+        difference += diffString->string();
     }
 
-    //destination
-    stringIt = m_destinationLines.begin();
-    sEnd     = m_destinationLines.end();
-
-    for (; stringIt != sEnd; ++stringIt)
-    {
-        switch (m_type)
-        {
+    // destination
+    for (const DifferenceString *diffString : d->destinationLines) {
+        switch (d->type) {
         case Change:
         case Insert:
             difference += QLatin1Char('+');
@@ -152,10 +262,10 @@ QString Difference::recreateDifference() const
             difference += QLatin1Char(' ');
             break;
         default: // Delete but this is not possible in destination
-//             qCDebug(LIBKOMPAREDIFF2) << "Go away, nothing to do for you in destination...";
+//             qCDebug(KOMPAREDIFF2_LOG) << "Go away, nothing to do for you in destination...";
             continue;
         }
-        difference += (*stringIt)->string();
+        difference += diffString->string();
     }
 
     return difference;
diff --git a/src/difference.h b/src/difference.h
index b010f531028d..41c847e43392 100644
--- a/src/difference.h
+++ b/src/difference.h
@@ -1,119 +1,24 @@
 /*
-SPDX-FileCopyrightText: 2001-2004,2009 Otto Bruggeman <bruggie@gmail.com>
-SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+    SPDX-FileCopyrightText: 2001-2004,2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #ifndef KOMPAREDIFF2_DIFFERENCE_H
 #define KOMPAREDIFF2_DIFFERENCE_H
 
-#include <QVector>
-#include <QObject>
-
+// lib
+#include "differencestring.h"
 #include "komparediff2_export.h"
-#include "marker.h"
+// Qt
+#include <QObject>
+// Std
+#include <memory>
 
-// #include <komparediffdebug.h>
-
-class QString;
-
-namespace Diff2
+namespace KompareDiff2
 {
-
-/**
- * @class DifferenceString difference.h <KompareDiff2/Difference>
- *
- * A difference string.
- */
-class KOMPAREDIFF2_EXPORT DifferenceString
-{
-public:
-    DifferenceString()
-    {
-//         qCDebug(LIBKOMPAREDIFF2) << "DifferenceString::DifferenceString()";
-    }
-    explicit DifferenceString(const QString& string, const MarkerList& markerList = MarkerList()) :
-        m_string(string),
-        m_markerList(markerList)
-    {
-//         qCDebug(LIBKOMPAREDIFF2) << "DifferenceString::DifferenceString( " << string << ", " << markerList << " )";
-        calculateHash();
-    }
-    DifferenceString(const DifferenceString& ds) :
-        m_string(ds.m_string),
-        m_conflict(ds.m_conflict),
-        m_hash(ds.m_hash),
-        m_markerList(ds.m_markerList)
-    {
-//         qCDebug(LIBKOMPAREDIFF2) << "DifferenceString::DifferenceString( const DifferenceString& " << ds << " )";
-    }
-    ~DifferenceString()
-    {
-        qDeleteAll(m_markerList);
-    }
-
-public:
-    const QString& string() const
-    {
-        return m_string;
-    }
-    const QString& conflictString() const
-    {
-        return m_conflict;
-    }
-    const MarkerList& markerList()
-    {
-        return m_markerList;
-    }
-    void setString(const QString& string)
-    {
-        m_string = string;
-        calculateHash();
-    }
-    void setConflictString(const QString& conflict)
-    {
-        m_conflict = conflict;
-    }
-    void setMarkerList(const MarkerList& markerList)
-    {
-        m_markerList = markerList;
-    }
-    void prepend(Marker* marker)
-    {
-        m_markerList.prepend(marker);
-    }
-    bool operator==(const DifferenceString& ks)
-    {
-        if (m_hash != ks.m_hash)
-            return false;
-        return m_string == ks.m_string;
-    }
-
-protected:
-    void calculateHash()
-    {
-        unsigned short const* str = reinterpret_cast<unsigned short const*>(m_string.unicode());
-        const unsigned int len = m_string.length();
-
-        m_hash = 1315423911;
-
-        for (unsigned int i = 0; i < len; ++i)
-        {
-            m_hash ^= (m_hash << 5) + str[i] + (m_hash >> 2);
-        }
-    }
-
-private:
-    QString      m_string;
-    QString      m_conflict;
-    unsigned int m_hash;
-    MarkerList   m_markerList;
-};
-
-using DifferenceStringList =              QVector<DifferenceString*>;
-using DifferenceStringListIterator =      QVector<DifferenceString*>::iterator;
-using DifferenceStringListConstIterator = QVector<DifferenceString*>::const_iterator;
+class DifferencePrivate;
 
 /**
  * @class Difference difference.h <KompareDiff2/Difference>
@@ -124,17 +29,22 @@ class KOMPAREDIFF2_EXPORT Difference : public QObject
 {
     Q_OBJECT
 public:
-    enum Type { Change, Insert, Delete, Unchanged };
+    enum Type {
+        Change,
+        Insert,
+        Delete,
+        Unchanged,
+    };
 
 public:
     Difference(int sourceLineNo, int destinationLineNo, int type = Difference::Unchanged);
     ~Difference() override;
 
 public:
-    int type() const { return m_type; };
+    int type() const;
 
-    int sourceLineNumber() const { return m_sourceLineNo; }
-    int destinationLineNumber() const { return m_destinationLineNo; }
+    int sourceLineNumber() const;
+    int destinationLineNumber() const;
 
     int sourceLineCount() const;
     int destinationLineCount() const;
@@ -144,43 +54,31 @@ public:
 
     /// Destination line number that tracks applying/unapplying of other differences
     /// Essentially a line number in a patch consisting of applied diffs only
-    int trackingDestinationLineNumber() const { return m_trackingDestinationLineNo; }
+    int trackingDestinationLineNumber() const;
     int trackingDestinationLineEnd() const;
-    void setTrackingDestinationLineNumber(int i) { m_trackingDestinationLineNo = i; }
+    void setTrackingDestinationLineNumber(int i);
 
-    DifferenceString* sourceLineAt(int i) const { return m_sourceLines[i]; }
-    DifferenceString* destinationLineAt(int i) const { return m_destinationLines[i]; }
+    DifferenceString *sourceLineAt(int i) const;
+    DifferenceString *destinationLineAt(int i) const;
 
-    const DifferenceStringList sourceLines() const { return m_sourceLines; }
-    const DifferenceStringList destinationLines() const { return m_destinationLines; }
+    DifferenceStringList sourceLines() const;
+    DifferenceStringList destinationLines() const;
 
-    bool hasConflict() const
-    {
-        return m_conflicts;
-    }
-    void setConflict(bool conflicts)
-    {
-        m_conflicts = conflicts;
-    }
+    bool hasConflict() const;
+    void setConflict(bool conflicts);
 
-    bool isUnsaved() const
-    {
-        return m_unsaved;
-    }
-    void setUnsaved(bool unsaved)
-    {
-        m_unsaved = unsaved;
-    }
+    bool isUnsaved() const;
+    void setUnsaved(bool unsaved);
 
     void apply(bool apply);
     /// Apply without emitting any signals
     void applyQuietly(bool apply);
-    bool applied() const { return m_applied; }
+    bool applied() const;
 
-    void setType(int type) { m_type = type; }
+    void setType(int type);
 
-    void addSourceLine(QString line);
-    void addDestinationLine(QString line);
+    void addSourceLine(const QString &line);
+    void addDestinationLine(const QString &line);
 
     /** This method will calculate the differences between the individual strings and store them as Markers */
     void determineInlineDifferences();
@@ -188,28 +86,17 @@ public:
     QString recreateDifference() const;
 
 Q_SIGNALS:
-    void differenceApplied(Difference*);
+    void differenceApplied(KompareDiff2::Difference *);
 
 private:
-    int                   m_type;
-
-    int                   m_sourceLineNo;
-    int                   m_destinationLineNo;
-    int                   m_trackingDestinationLineNo;
-
-    DifferenceStringList  m_sourceLines;
-    DifferenceStringList  m_destinationLines;
-
-    bool                  m_applied;
-    bool                  m_conflicts;
-    bool                  m_unsaved;
+    Q_DECLARE_PRIVATE(Difference)
+    std::unique_ptr<DifferencePrivate> const d_ptr;
 };
 
-using DifferenceList =              QList<Difference*>;
-using DifferenceListIterator =      QList<Difference*>::iterator;
-using DifferenceListConstIterator = QList<Difference*>::const_iterator;
+using DifferenceList =              QList<Difference *>;
+using DifferenceListIterator =      QList<Difference *>::iterator;
+using DifferenceListConstIterator = QList<Difference *>::const_iterator;
 
-} // End of namespace Diff2
+} // End of namespace KompareDiff2
 
 #endif
-
diff --git a/src/difference_p.h b/src/difference_p.h
new file mode 100644
index 000000000000..136ea5b420b4
--- /dev/null
+++ b/src/difference_p.h
@@ -0,0 +1,54 @@
+/*
+    SPDX-FileCopyrightText: 2001-2004,2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#ifndef KOMPAREDIFF2_DIFFERENCE_P_H
+#define KOMPAREDIFF2_DIFFERENCE_P_H
+
+// lib
+#include "differencestring.h"
+
+namespace KompareDiff2
+{
+
+class DifferencePrivate
+{
+public:
+    DifferencePrivate(int sourceLineNo, int destinationLineNo, int type);
+    ~DifferencePrivate();
+
+public:
+    int type;
+
+    int sourceLineNo;
+    int destinationLineNo;
+    int trackingDestinationLineNo;
+
+    DifferenceStringList sourceLines;
+    DifferenceStringList destinationLines;
+
+    bool applied = false;
+    bool conflicts = false;
+    bool unsaved = false;
+};
+
+DifferencePrivate::DifferencePrivate(int sourceLineNo, int destinationLineNo, int type)
+    : type(type)
+    , sourceLineNo(sourceLineNo)
+    , destinationLineNo(destinationLineNo)
+    , trackingDestinationLineNo(sourceLineNo) // The whole patch starts as unapplied
+{
+}
+
+DifferencePrivate::~DifferencePrivate()
+{
+    qDeleteAll(sourceLines);
+    qDeleteAll(destinationLines);
+}
+
+}
+
+#endif
diff --git a/src/differencestring.cpp b/src/differencestring.cpp
new file mode 100644
index 000000000000..9a67417359d7
--- /dev/null
+++ b/src/differencestring.cpp
@@ -0,0 +1,91 @@
+/*
+    SPDX-FileCopyrightText: 2001-2004,2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#include "differencestring.h"
+#include "differencestring_p.h"
+
+namespace KompareDiff2
+{
+
+DifferenceString::DifferenceString()
+    : d_ptr(new DifferenceStringPrivate())
+{
+//         qCDebug(KOMPAREDIFF2_LOG) << "DifferenceString::DifferenceString()";
+}
+
+DifferenceString::DifferenceString(const QString &string, const MarkerList &markerList)
+    : d_ptr(new DifferenceStringPrivate(string, markerList))
+{
+//         qCDebug(KOMPAREDIFF2_LOG) << "DifferenceString::DifferenceString( " << string << ", " << markerList << " )";
+}
+
+DifferenceString::DifferenceString(const DifferenceString &ds)
+    : d_ptr(new DifferenceStringPrivate(*ds.d_ptr))
+{
+//         qCDebug(KOMPAREDIFF2_LOG) << "DifferenceString::DifferenceString( const DifferenceString& " << ds << " )";
+}
+
+DifferenceString::~DifferenceString() = default;
+
+bool DifferenceString::operator==(const DifferenceString &ks) const
+{
+    Q_D(const DifferenceString);
+
+    return (*d == *ks.d_ptr);
+}
+
+QString DifferenceString::string() const
+{
+    Q_D(const DifferenceString);
+
+    return d->string;
+}
+
+QString DifferenceString::conflictString() const
+{
+    Q_D(const DifferenceString);
+
+    return d->conflict;
+}
+
+MarkerList DifferenceString::markerList() const
+{
+    Q_D(const DifferenceString);
+
+    return d->markerList;
+}
+
+void DifferenceString::setString(const QString &string)
+{
+    Q_D(DifferenceString);
+
+    d->string = string;
+    d->calculateHash();
+}
+
+void DifferenceString::setConflictString(const QString &conflict)
+{
+    Q_D(DifferenceString);
+
+    d->conflict = conflict;
+}
+
+void DifferenceString::setMarkerList(const MarkerList &markerList)
+{
+    Q_D(DifferenceString);
+
+    d->markerList = markerList;
+}
+
+void DifferenceString::prepend(Marker *marker)
+{
+    Q_D(DifferenceString);
+
+    d->markerList.prepend(marker);
+}
+
+}
diff --git a/src/differencestring.h b/src/differencestring.h
new file mode 100644
index 000000000000..a58983f31c1d
--- /dev/null
+++ b/src/differencestring.h
@@ -0,0 +1,59 @@
+/*
+    SPDX-FileCopyrightText: 2001-2004,2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#ifndef KOMPAREDIFF2_DIFFERENCESTRING_H
+#define KOMPAREDIFF2_DIFFERENCESTRING_H
+
+// lib
+#include "komparediff2_export.h"
+#include "marker.h"
+// Qt
+#include <QList>
+#include <QString>
+// Std
+#include <memory>
+
+namespace KompareDiff2
+{
+class DifferenceStringPrivate;
+
+/**
+ * @class DifferenceString differencestring.h <KompareDiff2/DifferenceString>
+ *
+ * A difference string.
+ */
+class KOMPAREDIFF2_EXPORT DifferenceString
+{
+public:
+    DifferenceString();
+    explicit DifferenceString(const QString &string, const MarkerList &markerList = MarkerList());
+    DifferenceString(const DifferenceString &ds);
+    ~DifferenceString();
+
+public:
+    bool operator==(const DifferenceString &ks) const;
+
+    QString string() const;
+    QString conflictString() const;
+    MarkerList markerList() const;
+    void setString(const QString &string);
+    void setConflictString(const QString &conflict);
+    void setMarkerList(const MarkerList &markerList);
+    void prepend(Marker *marker);
+
+private:
+    Q_DECLARE_PRIVATE(DifferenceString)
+    std::unique_ptr<DifferenceStringPrivate> const d_ptr;
+};
+
+using DifferenceStringList =              QList<DifferenceString *>;
+using DifferenceStringListIterator =      QList<DifferenceString *>::iterator;
+using DifferenceStringListConstIterator = QList<DifferenceString *>::const_iterator;
+
+}
+
+#endif
diff --git a/src/differencestring_p.h b/src/differencestring_p.h
new file mode 100644
index 000000000000..6c43b6a289ce
--- /dev/null
+++ b/src/differencestring_p.h
@@ -0,0 +1,74 @@
+/*
+    SPDX-FileCopyrightText: 2001-2004,2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#ifndef KOMPAREDIFF2_DIFFERENCESTRING_P_H
+#define KOMPAREDIFF2_DIFFERENCESTRING_P_H
+
+// lib
+#include "marker.h"
+// Qt
+#include <QString>
+
+namespace KompareDiff2
+{
+
+class DifferenceStringPrivate
+{
+public:
+    DifferenceStringPrivate() = default;
+    DifferenceStringPrivate(const QString &string, const MarkerList &markerList);
+    DifferenceStringPrivate(const DifferenceStringPrivate &ds) = default;
+
+    ~DifferenceStringPrivate();
+
+    bool operator==(const DifferenceStringPrivate &ks) const;
+
+public:
+    void calculateHash();
+
+public:
+    QString string;
+    QString conflict;
+    unsigned int hash;
+    MarkerList markerList;
+};
+
+inline DifferenceStringPrivate::DifferenceStringPrivate(const QString &string, const MarkerList &markerList)
+    : string(string)
+    , markerList(markerList)
+{
+    calculateHash();
+}
+
+inline DifferenceStringPrivate::~DifferenceStringPrivate()
+{
+    qDeleteAll(markerList);
+}
+
+inline bool DifferenceStringPrivate::operator==(const DifferenceStringPrivate &ks) const
+{
+    if (hash != ks.hash) {
+        return false;
+    }
+    return (string == ks.string);
+}
+
+inline void DifferenceStringPrivate::calculateHash()
+{
+    unsigned short const *str = reinterpret_cast<unsigned short const *>(string.unicode());
+    const unsigned int len = string.length();
+
+    hash = 1315423911;
+
+    for (unsigned int i = 0; i < len; ++i) {
+        hash ^= (hash << 5) + str[i] + (hash >> 2);
+    }
+}
+
+}
+
+#endif
diff --git a/src/differencestringpair.h b/src/differencestringpair.h
index a4810ca9f328..5f1cc9cbb1fb 100644
--- a/src/differencestringpair.h
+++ b/src/differencestringpair.h
@@ -1,28 +1,35 @@
 /*
-SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
+    SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
 
-SPDX-License-Identifier: LGPL-2.0-or-later
+    SPDX-License-Identifier: LGPL-2.0-or-later
  */
 
 #ifndef KOMPAREDIFF2_DIFFERENCESTRINGPAIR_H
 #define KOMPAREDIFF2_DIFFERENCESTRINGPAIR_H
 
+// lib
+#include "differencestring.h"
+// Qt
 #include <QString>
 
-#include "difference.h"
-
-namespace Diff2 {
+namespace KompareDiff2
+{
 
 class Marker;
 class DifferenceString;
 
-class DifferenceStringPair {
+class DifferenceStringPair
+{
 public:
-    DifferenceStringPair(DifferenceString* first, DifferenceString* second)
-        : m_first(first), m_second(second),
-          m_strFirst(QLatin1Char(' ') + first->string()), m_strSecond(QLatin1Char(' ') + second->string()),
-          m_lengthFirst(m_strFirst.length()), m_lengthSecond(m_strSecond.length()),
-          m_arrayFirst(m_strFirst.unicode()), m_arraySecond(m_strSecond.unicode())
+    DifferenceStringPair(DifferenceString *first, DifferenceString *second)
+        : m_first(first)
+        , m_second(second)
+        , m_strFirst(QLatin1Char(' ') + first->string())
+        , m_strSecond(QLatin1Char(' ') + second->string())
+        , m_lengthFirst(m_strFirst.length())
+        , m_lengthSecond(m_strSecond.length())
+        , m_arrayFirst(m_strFirst.unicode())
+        , m_arraySecond(m_strSecond.unicode())
     {
         // Actual contents must be indented by 1
     }
@@ -46,11 +53,11 @@ public:
     {
         return m_second->markerList();
     }
-    void prependFirst(Marker* marker)
+    void prependFirst(Marker *marker)
     {
         m_first->prepend(marker);
     }
-    void prependSecond(Marker* marker)
+    void prependSecond(Marker *marker)
     {
         m_second->prepend(marker);
     }
@@ -59,15 +66,16 @@ public:
         return difference <= qMax(m_lengthFirst, m_lengthSecond) / 2;
     }
     const static bool allowReplace = true;
+
 private:
-    DifferenceString* m_first;
-    DifferenceString* m_second;
+    DifferenceString *m_first;
+    DifferenceString *m_second;
     QString m_strFirst;
     QString m_strSecond;
     unsigned int m_lengthFirst;
     unsigned int m_lengthSecond;
-    const QChar* m_arrayFirst;
-    const QChar* m_arraySecond;
+    const QChar *m_arrayFirst;
+    const QChar *m_arraySecond;
 };
 
 }
diff --git a/src/diffhunk.cpp b/src/diffhunk.cpp
index 6d5d5e11e7d8..9a22ade7ec7b 100644
--- a/src/diffhunk.cpp
+++ b/src/diffhunk.cpp
@@ -1,103 +1,137 @@
 /*
-SPDX-FileCopyrightText: 2001-2004,2009 Otto Bruggeman <bruggie@gmail.com>
-SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+    SPDX-FileCopyrightText: 2001-2004,2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #include "diffhunk.h"
+#include "diffhunk_p.h"
 
-#include <komparediffdebug.h>
+// lib
+#include <komparediff2_logging.h>
 
-using namespace Diff2;
+using namespace KompareDiff2;
 
-DiffHunk::DiffHunk(int sourceLine, int destinationLine, const QString& function, Type type) :
-    m_sourceLine(sourceLine),
-    m_destinationLine(destinationLine),
-    m_function(function),
-    m_type(type)
+DiffHunk::DiffHunk(int sourceLine, int destinationLine, const QString &function, Type type)
+    : d_ptr(new DiffHunkPrivate(sourceLine, destinationLine, function, type))
 {
 }
 
-DiffHunk::~DiffHunk()
+DiffHunk::~DiffHunk() = default;
+
+DifferenceList DiffHunk::differences() const
+{
+    Q_D(const DiffHunk);
+
+    return d->differences;
+};
+
+QString DiffHunk::function() const
+{
+    Q_D(const DiffHunk);
+
+    return d->function;
+};
+
+int DiffHunk::sourceLineNumber() const
+{
+    Q_D(const DiffHunk);
+
+    return d->sourceLine;
+};
+
+int DiffHunk::destinationLineNumber() const
 {
+    Q_D(const DiffHunk);
+
+    return d->destinationLine;
+};
+
+DiffHunk::Type DiffHunk::type() const
+{
+    Q_D(const DiffHunk);
+
+    return d->type;
 }
 
-void DiffHunk::add(Difference* diff)
+void DiffHunk::setType(Type type)
 {
-    m_differences.append(diff);
+    Q_D(DiffHunk);
+
+    d->type = type;
+}
+
+void DiffHunk::add(Difference *diff)
+{
+    Q_D(DiffHunk);
+
+    d->differences.append(diff);
 }
 
 int DiffHunk::sourceLineCount() const
 {
-    DifferenceListConstIterator diffIt = m_differences.begin();
-    DifferenceListConstIterator dEnd   = m_differences.end();
+    Q_D(const DiffHunk);
 
     int lineCount = 0;
 
-    for (; diffIt != dEnd; ++diffIt)
-        lineCount += (*diffIt)->sourceLineCount();
+    for (const Difference *diff : d->differences) {
+        lineCount += diff->sourceLineCount();
+    }
 
     return lineCount;
 }
 
 int DiffHunk::destinationLineCount() const
 {
-    DifferenceListConstIterator diffIt = m_differences.begin();
-    DifferenceListConstIterator dEnd   = m_differences.end();
+    Q_D(const DiffHunk);
 
     int lineCount = 0;
 
-    for (; diffIt != dEnd; ++diffIt)
-        lineCount += (*diffIt)->destinationLineCount();
+    for (const Difference *diff : d->differences) {
+        lineCount += diff->destinationLineCount();
+    }
 
     return lineCount;
 }
 
 QString DiffHunk::recreateHunk() const
 {
+    Q_D(const DiffHunk);
+
     QString hunk;
     QString differences;
 
     // recreate body
-    DifferenceListConstIterator diffIt = m_differences.begin();
-    DifferenceListConstIterator dEnd   = m_differences.end();
-
     int slc = 0; // source line count
     int dlc = 0; // destination line count
-    for (; diffIt != dEnd; ++diffIt)
-    {
-        switch ((*diffIt)->type())
-        {
+    for (const Difference *diff : d->differences) {
+        switch (diff->type()) {
         case Difference::Unchanged:
         case Difference::Change:
-            slc += (*diffIt)->sourceLineCount();
-            dlc += (*diffIt)->destinationLineCount();
+            slc += diff->sourceLineCount();
+            dlc += diff->destinationLineCount();
             break;
         case Difference::Insert:
-            dlc += (*diffIt)->destinationLineCount();
+            dlc += diff->destinationLineCount();
             break;
         case Difference::Delete:
-            slc += (*diffIt)->sourceLineCount();
+            slc += diff->sourceLineCount();
             break;
         }
-        differences += (*diffIt)->recreateDifference();
+        differences += diff->recreateDifference();
     }
 
     // recreate header
-    hunk += QStringLiteral("@@ -%1,%3 +%2,%4 @@")
-            .arg(m_sourceLine)
-            .arg(m_destinationLine)
-            .arg(slc)
-            .arg(dlc);
+    hunk += QStringLiteral("@@ -%1,%3 +%2,%4 @@").arg(d->sourceLine).arg(d->destinationLine).arg(slc).arg(dlc);
 
-    if (!m_function.isEmpty())
-        hunk += QLatin1Char(' ') + m_function;
+    if (!d->function.isEmpty())
+        hunk += QLatin1Char(' ') + d->function;
 
     hunk += QLatin1Char('\n');
 
     hunk += differences;
 
-    qCDebug(LIBKOMPAREDIFF2) << hunk;
+    qCDebug(KOMPAREDIFF2_LOG) << hunk;
     return hunk;
 }
diff --git a/src/diffhunk.h b/src/diffhunk.h
index 1f68bb9319a1..389b234b27eb 100644
--- a/src/diffhunk.h
+++ b/src/diffhunk.h
@@ -1,61 +1,65 @@
 /*
-SPDX-FileCopyrightText: 2001-2004,2009 Otto Bruggeman <bruggie@gmail.com>
-SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+    SPDX-FileCopyrightText: 2001-2004,2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #ifndef KOMPAREDIFF2_DIFFHUNK_H
 #define KOMPAREDIFF2_DIFFHUNK_H
 
+// lib
 #include "difference.h"
+#include "komparediff2_export.h"
+// Std
+#include <memory>
 
-
-namespace Diff2
+namespace KompareDiff2
 {
 
 class Difference;
+class DiffHunkPrivate;
 
 /**
  * DiffHunk
  */
-class DiffHunk
+class KOMPAREDIFF2_EXPORT DiffHunk
 {
 public:
-    enum Type { Normal, AddedByBlend };
+    enum Type {
+        Normal,
+        AddedByBlend,
+    };
 
 public:
-    DiffHunk(int sourceLine, int destinationLine, const QString& function = QString(), Type type = Normal);
+    DiffHunk(int sourceLine, int destinationLine, const QString &function = QString(), Type type = Normal);
     ~DiffHunk();
 
-    const DifferenceList& differences() const { return m_differences; };
-    const QString& function() const           { return m_function; };
+    DifferenceList differences() const;
+    QString function() const;
 
-    int sourceLineNumber() const      { return m_sourceLine; };
-    int destinationLineNumber() const { return m_destinationLine; };
+    int sourceLineNumber() const;
+    int destinationLineNumber() const;
 
     int sourceLineCount() const;
     int destinationLineCount() const;
 
-    Type type() const       { return m_type; }
-    void setType(Type type) { m_type = type; }
+    Type type() const;
+    void setType(Type type);
 
-    void add(Difference* diff);
+    void add(Difference *diff);
 
     QString recreateHunk() const;
 
 private:
-    int            m_sourceLine;
-    int            m_destinationLine;
-    DifferenceList m_differences;
-    QString        m_function;
-    Type           m_type;
+    Q_DECLARE_PRIVATE(DiffHunk)
+    std::unique_ptr<DiffHunkPrivate> const d_ptr;
 };
 
-using DiffHunkList =              QList<DiffHunk*>;
-using DiffHunkListIterator =      QList<DiffHunk*>::iterator;
-using DiffHunkListConstIterator = QList<DiffHunk*>::const_iterator;
+using DiffHunkList =              QList<DiffHunk *>;
+using DiffHunkListIterator =      QList<DiffHunk *>::iterator;
+using DiffHunkListConstIterator = QList<DiffHunk *>::const_iterator;
 
-} // End of namespace Diff2
+} // End of namespace KompareDiff2
 
 #endif
diff --git a/src/diffhunk_p.h b/src/diffhunk_p.h
new file mode 100644
index 000000000000..21b56f26d099
--- /dev/null
+++ b/src/diffhunk_p.h
@@ -0,0 +1,41 @@
+/*
+    SPDX-FileCopyrightText: 2001-2004,2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#ifndef KOMPAREDIFF2_DIFFHUNK_P_H
+#define KOMPAREDIFF2_DIFFHUNK_P_H
+
+// lib
+#include "difference.h"
+#include "diffhunk.h"
+
+namespace KompareDiff2
+{
+
+class DiffHunkPrivate
+{
+public:
+    DiffHunkPrivate(int sourceLine, int destinationLine, const QString &function, DiffHunk::Type type);
+
+public:
+    int sourceLine;
+    int destinationLine;
+    DifferenceList differences;
+    QString function;
+    DiffHunk::Type type;
+};
+
+inline DiffHunkPrivate::DiffHunkPrivate(int sourceLine, int destinationLine, const QString &function, DiffHunk::Type type)
+    : sourceLine(sourceLine)
+    , destinationLine(destinationLine)
+    , function(function)
+    , type(type)
+{
+}
+
+}
+
+#endif
diff --git a/src/diffmodel.cpp b/src/diffmodel.cpp
index 355a411cc286..7464898a101c 100644
--- a/src/diffmodel.cpp
+++ b/src/diffmodel.cpp
@@ -1,338 +1,439 @@
 /*
-SPDX-FileCopyrightText: 2001-2009 Otto Bruggeman <bruggie@gmail.com>
-SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+    SPDX-FileCopyrightText: 2001-2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #include "diffmodel.h"
+#include "diffmodel_p.h"
 
-#include <komparediffdebug.h>
+// lib
 #include "difference.h"
 #include "levenshteintable.h"
-#include "stringlistpair.h"
 #include "parserbase.h"
+#include "stringlistpair.h"
+#include <komparediff2_logging.h>
+// Std
+#include <algorithm>
 
-using namespace Diff2;
+using namespace KompareDiff2;
 
 /**  */
-DiffModel::DiffModel(const QString& source, const QString& destination) :
-    m_source(source),
-    m_destination(destination),
-    m_sourcePath(),
-    m_destinationPath(),
-    m_sourceFile(),
-    m_destinationFile(),
-    m_sourceTimestamp(),
-    m_destinationTimestamp(),
-    m_sourceRevision(),
-    m_destinationRevision(),
-    m_appliedCount(0),
-    m_diffIndex(0),
-    m_selectedDifference(nullptr),
-    m_blended(false)
+DiffModel::DiffModel(const QString &source, const QString &destination)
+    : d_ptr(new DiffModelPrivate(source, destination))
 {
-    splitSourceInPathAndFileName();
-    splitDestinationInPathAndFileName();
-}
+    Q_D(DiffModel);
 
-DiffModel::DiffModel() :
-    m_source(),
-    m_destination(),
-    m_sourcePath(),
-    m_destinationPath(),
-    m_sourceFile(),
-    m_destinationFile(),
-    m_sourceTimestamp(),
-    m_destinationTimestamp(),
-    m_sourceRevision(),
-    m_destinationRevision(),
-    m_appliedCount(0),
-    m_diffIndex(0),
-    m_selectedDifference(nullptr),
-    m_blended(false)
-{
+    d->splitSourceInPathAndFileName();
+    d->splitDestinationInPathAndFileName();
 }
 
-/**  */
-DiffModel::~DiffModel()
+DiffModel::DiffModel()
+    : d_ptr(new DiffModelPrivate())
 {
-    m_selectedDifference = nullptr;
-
-    qDeleteAll(m_hunks);
-    qDeleteAll(m_differences);
 }
 
-void DiffModel::splitSourceInPathAndFileName()
-{
-    int pos;
-
-    if ((pos = m_source.lastIndexOf(QLatin1Char('/'))) >= 0)
-        m_sourcePath = m_source.mid(0, pos + 1);
-
-    if ((pos = m_source.lastIndexOf(QLatin1Char('/'))) >= 0)
-        m_sourceFile = m_source.mid(pos + 1, m_source.length() - pos);
-    else
-        m_sourceFile = m_source;
+DiffModel::~DiffModel() = default;
 
-    qCDebug(LIBKOMPAREDIFF2) << m_source << " was split into " << m_sourcePath << " and " << m_sourceFile;
-}
-
-void DiffModel::splitDestinationInPathAndFileName()
+DiffModel &DiffModel::operator=(const DiffModel &model)
 {
-    int pos;
-
-    if ((pos = m_destination.lastIndexOf(QLatin1Char('/'))) >= 0)
-        m_destinationPath = m_destination.mid(0, pos + 1);
-
-    if ((pos = m_destination.lastIndexOf(QLatin1Char('/'))) >= 0)
-        m_destinationFile = m_destination.mid(pos + 1, m_destination.length() - pos);
-    else
-        m_destinationFile = m_destination;
+    Q_D(DiffModel);
 
-    qCDebug(LIBKOMPAREDIFF2) << m_destination << " was split into " << m_destinationPath << " and " << m_destinationFile;
-}
-
-DiffModel& DiffModel::operator=(const DiffModel& model)
-{
-    if (&model != this)   // Guard from self-assignment
+    if (&model != this) // Guard from self-assignment
     {
-        m_source = model.m_source;
-        m_destination = model.m_destination;
-        m_sourcePath = model.m_sourcePath;
-        m_sourceFile = model.m_sourceFile;
-        m_sourceTimestamp = model.m_sourceTimestamp;
-        m_sourceRevision = model.m_sourceRevision;
-        m_destinationPath = model.m_destinationPath;
-        m_destinationFile = model.m_destinationFile;
-        m_destinationTimestamp = model.m_destinationTimestamp;
-        m_destinationRevision = model.m_destinationRevision;
-        m_appliedCount = model.m_appliedCount;
-
-        m_diffIndex = model.m_diffIndex;
-        m_selectedDifference = model.m_selectedDifference;
+        *d = *model.d_ptr;
     }
 
     return *this;
 }
 
-bool DiffModel::operator<(const DiffModel& model)
+bool DiffModel::operator<(const DiffModel &model) const
 {
     if (localeAwareCompareSource(model) < 0)
         return true;
     return false;
 }
 
-int DiffModel::localeAwareCompareSource(const DiffModel& model)
+int DiffModel::hunkCount() const
 {
-    qCDebug(LIBKOMPAREDIFF2) << "Path: " << model.m_sourcePath;
-    qCDebug(LIBKOMPAREDIFF2) << "File: " << model.m_sourceFile;
+    Q_D(const DiffModel);
 
-    int result = m_sourcePath.localeAwareCompare(model.m_sourcePath);
+    return d->hunks.count();
+}
+
+int DiffModel::differenceCount() const
+{
+    Q_D(const DiffModel);
+
+    return d->differences.count();
+}
+
+int DiffModel::appliedCount() const
+{
+    Q_D(const DiffModel);
+
+    return d->appliedCount;
+}
+
+DiffHunk *DiffModel::hunkAt(int i)
+{
+    Q_D(DiffModel);
+
+    return (d->hunks.at(i));
+}
+
+const Difference *DiffModel::differenceAt(int i) const
+{
+    Q_D(const DiffModel);
+
+    return (d->differences.at(i));
+}
+
+Difference *DiffModel::differenceAt(int i)
+{
+    Q_D(DiffModel);
+
+    return (d->differences.at(i));
+}
+
+DiffHunkList *DiffModel::hunks()
+{
+    Q_D(DiffModel);
+
+    return &d->hunks;
+}
+
+const DiffHunkList *DiffModel::hunks() const
+{
+    Q_D(const DiffModel);
+
+    return &d->hunks;
+}
+
+DifferenceList *DiffModel::differences()
+{
+    Q_D(DiffModel);
+
+    return &d->differences;
+}
+
+const DifferenceList *DiffModel::differences() const
+{
+    Q_D(const DiffModel);
+
+    return &d->differences;
+}
+
+int DiffModel::findDifference(Difference *diff) const
+{
+    Q_D(const DiffModel);
+
+    return d->differences.indexOf(diff);
+}
+
+int DiffModel::localeAwareCompareSource(const DiffModel &model) const
+{
+    Q_D(const DiffModel);
+
+    qCDebug(KOMPAREDIFF2_LOG) << "Path: " << model.d_ptr->sourcePath;
+    qCDebug(KOMPAREDIFF2_LOG) << "File: " << model.d_ptr->sourceFile;
+
+    int result = d->sourcePath.localeAwareCompare(model.d_ptr->sourcePath);
 
     if (result == 0)
-        return m_sourceFile.localeAwareCompare(model.m_sourceFile);
+        return d->sourceFile.localeAwareCompare(model.d_ptr->sourceFile);
 
     return result;
 }
 
 QString DiffModel::recreateDiff() const
 {
+    Q_D(const DiffModel);
+
     // For now we'll always return a diff in the diff format
     QString diff;
 
     // recreate header
     const QChar tab = QLatin1Char('\t');
-    const QChar nl  = QLatin1Char('\n');
-    diff += QStringLiteral("--- %1\t%2").arg(ParserBase::escapePath(m_source), m_sourceTimestamp);
-    if (!m_sourceRevision.isEmpty())
-        diff += tab + m_sourceRevision;
+    const QChar nl = QLatin1Char('\n');
+    diff += QStringLiteral("--- %1\t%2").arg(ParserBase::escapePath(d->source), d->sourceTimestamp);
+    if (!d->sourceRevision.isEmpty())
+        diff += tab + d->sourceRevision;
     diff += nl;
-    diff += QStringLiteral("+++ %1\t%2").arg(ParserBase::escapePath(m_destination), m_destinationTimestamp);
-    if (!m_destinationRevision.isEmpty())
-        diff += tab + m_destinationRevision;
+    diff += QStringLiteral("+++ %1\t%2").arg(ParserBase::escapePath(d->destination), d->destinationTimestamp);
+    if (!d->destinationRevision.isEmpty())
+        diff += tab + d->destinationRevision;
     diff += nl;
 
     // recreate body by iterating over the hunks
-    DiffHunkListConstIterator hunkIt = m_hunks.begin();
-    DiffHunkListConstIterator hEnd   = m_hunks.end();
-
-    for (; hunkIt != hEnd; ++hunkIt)
-    {
-        if ((*hunkIt)->type() != DiffHunk::AddedByBlend)
-            diff += (*hunkIt)->recreateHunk();
+    for (const DiffHunk *hunk : d->hunks) {
+        if (hunk->type() != DiffHunk::AddedByBlend) {
+            diff += hunk->recreateHunk();
+        }
     }
 
     return diff;
 }
 
-Difference* DiffModel::firstDifference()
+Difference *DiffModel::firstDifference()
 {
-    qCDebug(LIBKOMPAREDIFF2) << "DiffModel::firstDifference()";
-    m_diffIndex = 0;
-    qCDebug(LIBKOMPAREDIFF2) << "m_diffIndex = " << m_diffIndex;
+    Q_D(DiffModel);
 
-    m_selectedDifference = m_differences[ m_diffIndex ];
+    qCDebug(KOMPAREDIFF2_LOG) << "DiffModel::firstDifference()";
+    d->diffIndex = 0;
+    qCDebug(KOMPAREDIFF2_LOG) << "d->diffIndex = " << d->diffIndex;
 
-    return m_selectedDifference;
+    d->selectedDifference = d->differences[d->diffIndex];
+
+    return d->selectedDifference;
 }
 
-Difference* DiffModel::lastDifference()
+Difference *DiffModel::lastDifference()
 {
-    qCDebug(LIBKOMPAREDIFF2) << "DiffModel::lastDifference()";
-    m_diffIndex = m_differences.count() - 1;
-    qCDebug(LIBKOMPAREDIFF2) << "m_diffIndex = " << m_diffIndex;
+    Q_D(DiffModel);
+
+    qCDebug(KOMPAREDIFF2_LOG) << "DiffModel::lastDifference()";
+    d->diffIndex = d->differences.count() - 1;
+    qCDebug(KOMPAREDIFF2_LOG) << "d->diffIndex = " << d->diffIndex;
 
-    m_selectedDifference = m_differences[ m_diffIndex ];
+    d->selectedDifference = d->differences[d->diffIndex];
 
-    return m_selectedDifference;
+    return d->selectedDifference;
 }
 
-Difference* DiffModel::prevDifference()
+Difference *DiffModel::prevDifference()
 {
-    qCDebug(LIBKOMPAREDIFF2) << "DiffModel::prevDifference()";
-    if (m_diffIndex > 0 && --m_diffIndex < m_differences.count())
-    {
-        qCDebug(LIBKOMPAREDIFF2) << "m_diffIndex = " << m_diffIndex;
-        m_selectedDifference = m_differences[ m_diffIndex ];
-    }
-    else
-    {
-        m_selectedDifference = nullptr;
-        m_diffIndex = 0;
-        qCDebug(LIBKOMPAREDIFF2) << "m_diffIndex = " << m_diffIndex;
+    Q_D(DiffModel);
+
+    qCDebug(KOMPAREDIFF2_LOG) << "DiffModel::prevDifference()";
+    if (d->diffIndex > 0 && --d->diffIndex < d->differences.count()) {
+        qCDebug(KOMPAREDIFF2_LOG) << "d->diffIndex = " << d->diffIndex;
+        d->selectedDifference = d->differences[d->diffIndex];
+    } else {
+        d->selectedDifference = nullptr;
+        d->diffIndex = 0;
+        qCDebug(KOMPAREDIFF2_LOG) << "d->diffIndex = " << d->diffIndex;
     }
 
-    return m_selectedDifference;
+    return d->selectedDifference;
 }
 
-Difference* DiffModel::nextDifference()
+Difference *DiffModel::nextDifference()
 {
-    qCDebug(LIBKOMPAREDIFF2) << "DiffModel::nextDifference()";
-    if (++m_diffIndex < m_differences.count())
-    {
-        qCDebug(LIBKOMPAREDIFF2) << "m_diffIndex = " << m_diffIndex;
-        m_selectedDifference = m_differences[ m_diffIndex ];
-    }
-    else
-    {
-        m_selectedDifference = nullptr;
-        m_diffIndex = 0; // just for safety...
-        qCDebug(LIBKOMPAREDIFF2) << "m_diffIndex = " << m_diffIndex;
+    Q_D(DiffModel);
+
+    qCDebug(KOMPAREDIFF2_LOG) << "DiffModel::nextDifference()";
+    if (++d->diffIndex < d->differences.count()) {
+        qCDebug(KOMPAREDIFF2_LOG) << "d->diffIndex = " << d->diffIndex;
+        d->selectedDifference = d->differences[d->diffIndex];
+    } else {
+        d->selectedDifference = nullptr;
+        d->diffIndex = 0; // just for safety...
+        qCDebug(KOMPAREDIFF2_LOG) << "d->diffIndex = " << d->diffIndex;
     }
 
-    return m_selectedDifference;
+    return d->selectedDifference;
 }
 
-const QString DiffModel::sourceFile() const
+QString DiffModel::source() const
 {
-    return m_sourceFile;
+    Q_D(const DiffModel);
+
+    return d->source;
 }
 
-const QString DiffModel::destinationFile() const
+QString DiffModel::destination() const
 {
-    return m_destinationFile;
+    Q_D(const DiffModel);
+
+    return d->destination;
 }
 
-const QString DiffModel::sourcePath() const
+QString DiffModel::sourceFile() const
 {
-    return m_sourcePath;
+    Q_D(const DiffModel);
+
+    return d->sourceFile;
 }
 
-const QString DiffModel::destinationPath() const
+QString DiffModel::destinationFile() const
 {
-    return m_destinationPath;
+    Q_D(const DiffModel);
+
+    return d->destinationFile;
 }
 
-void DiffModel::setSourceFile(QString path)
+QString DiffModel::sourcePath() const
 {
-    m_source = path;
-    splitSourceInPathAndFileName();
+    Q_D(const DiffModel);
+
+    return d->sourcePath;
 }
 
-void DiffModel::setDestinationFile(QString path)
+QString DiffModel::destinationPath() const
 {
-    m_destination = path;
-    splitDestinationInPathAndFileName();
+    Q_D(const DiffModel);
+
+    return d->destinationPath;
 }
 
-void DiffModel::setSourceTimestamp(QString timestamp)
+QString DiffModel::sourceTimestamp() const
 {
-    m_sourceTimestamp = timestamp;
+    Q_D(const DiffModel);
+
+    return d->sourceTimestamp;
 }
 
-void DiffModel::setDestinationTimestamp(QString timestamp)
+QString DiffModel::destinationTimestamp() const
 {
-    m_destinationTimestamp = timestamp;
+    Q_D(const DiffModel);
+
+    return d->destinationTimestamp;
 }
 
-void DiffModel::setSourceRevision(QString revision)
+QString DiffModel::sourceRevision() const
 {
-    m_sourceRevision = revision;
+    Q_D(const DiffModel);
+
+    return d->sourceRevision;
 }
 
-void DiffModel::setDestinationRevision(QString revision)
+QString DiffModel::destinationRevision() const
 {
-    m_destinationRevision = revision;
+    Q_D(const DiffModel);
+
+    return d->destinationRevision;
 }
 
-void DiffModel::addHunk(DiffHunk* hunk)
+void DiffModel::setSourceFile(const QString &path)
 {
-    m_hunks.append(hunk);
+    Q_D(DiffModel);
+
+    d->source = path;
+    d->splitSourceInPathAndFileName();
 }
 
-void DiffModel::addDiff(Difference* diff)
+void DiffModel::setDestinationFile(const QString &path)
 {
-    m_differences.append(diff);
-    connect(diff, &Difference::differenceApplied,
-            this, &DiffModel::slotDifferenceApplied);
+    Q_D(DiffModel);
+
+    d->destination = path;
+    d->splitDestinationInPathAndFileName();
 }
 
-bool DiffModel::hasUnsavedChanges(void) const
+void DiffModel::setSourceTimestamp(const QString &timestamp)
 {
-    DifferenceListConstIterator diffIt = m_differences.begin();
-    DifferenceListConstIterator endIt  = m_differences.end();
+    Q_D(DiffModel);
 
-    for (; diffIt != endIt; ++diffIt)
-    {
-        if ((*diffIt)->isUnsaved())
-            return true;
-    }
+    d->sourceTimestamp = timestamp;
+}
+
+void DiffModel::setDestinationTimestamp(const QString &timestamp)
+{
+    Q_D(DiffModel);
+
+    d->destinationTimestamp = timestamp;
+}
+
+void DiffModel::setSourceRevision(const QString &revision)
+{
+    Q_D(DiffModel);
+
+    d->sourceRevision = revision;
+}
+
+void DiffModel::setDestinationRevision(const QString &revision)
+{
+    Q_D(DiffModel);
+
+    d->destinationRevision = revision;
+}
+
+bool DiffModel::isBlended() const
+{
+    Q_D(const DiffModel);
+
+    return d->blended;
+}
+
+void DiffModel::setBlended(bool blended)
+{
+    Q_D(DiffModel);
+
+    d->blended = blended;
+}
+
+void DiffModel::addHunk(DiffHunk *hunk)
+{
+    Q_D(DiffModel);
+
+    d->hunks.append(hunk);
+}
+
+void DiffModel::addDiff(Difference *diff)
+{
+    Q_D(DiffModel);
+
+    d->differences.append(diff);
+    connect(diff, &Difference::differenceApplied, this, &DiffModel::slotDifferenceApplied);
+}
+
+int DiffModel::diffIndex() const
+{
+    Q_D(const DiffModel);
+
+    return d->diffIndex;
+}
+
+void DiffModel::setDiffIndex(int diffIndex)
+{
+    Q_D(DiffModel);
+
+    d->diffIndex = diffIndex;
+}
+
+bool DiffModel::hasUnsavedChanges() const
+{
+    Q_D(const DiffModel);
 
-    return false;
+    return std::any_of(d->differences.constBegin(), d->differences.constEnd(), [] (const Difference* diff) {
+        return diff->isUnsaved();
+    });
 }
 
 void DiffModel::applyDifference(bool apply)
 {
-    bool appliedState = m_selectedDifference->applied();
-    if (appliedState == apply)
-    {
+    Q_D(DiffModel);
+
+    bool appliedState = d->selectedDifference->applied();
+    if (appliedState == apply) {
         return;
     }
-    if (apply && !m_selectedDifference->applied())
-        ++m_appliedCount;
-    else if (!apply && m_selectedDifference->applied())
-        --m_appliedCount;
+    if (apply && !d->selectedDifference->applied())
+        ++d->appliedCount;
+    else if (!apply && d->selectedDifference->applied())
+        --d->appliedCount;
 
-    m_selectedDifference->apply(apply);
+    d->selectedDifference->apply(apply);
 }
 
-static int GetDifferenceDelta(Difference* diff)
+static int GetDifferenceDelta(Difference *diff)
 {
     int delta = diff->destinationLineCount() - diff->sourceLineCount();
-    if (!diff->applied())
-    {
+    if (!diff->applied()) {
         delta = -delta;
     }
     return delta;
 }
 
-void DiffModel::slotDifferenceApplied(Difference* diff)
+void DiffModel::slotDifferenceApplied(Difference *diff)
 {
+    Q_D(DiffModel);
+
     int delta = GetDifferenceDelta(diff);
-    for (Difference *current : std::as_const(m_differences)) {
-        if (current->destinationLineNumber() > diff->destinationLineNumber())
-        {
+    for (Difference *current : std::as_const(d->differences)) {
+        if (current->destinationLineNumber() > diff->destinationLineNumber()) {
             current->setTrackingDestinationLineNumber(current->trackingDestinationLineNumber() + delta);
         }
     }
@@ -340,75 +441,73 @@ void DiffModel::slotDifferenceApplied(Difference* diff)
 
 void DiffModel::applyAllDifferences(bool apply)
 {
-    if (apply)
-    {
-        m_appliedCount = m_differences.count();
-    }
-    else
-    {
-        m_appliedCount = 0;
-    }
+    Q_D(DiffModel);
 
-    DifferenceListIterator diffIt = m_differences.begin();
-    DifferenceListIterator dEnd   = m_differences.end();
+    if (apply) {
+        d->appliedCount = d->differences.count();
+    } else {
+        d->appliedCount = 0;
+    }
 
     int totalDelta = 0;
-    for (; diffIt != dEnd; ++diffIt)
-    {
-        (*diffIt)->setTrackingDestinationLineNumber((*diffIt)->trackingDestinationLineNumber() + totalDelta);
-        bool appliedState = (*diffIt)->applied();
-        if (appliedState == apply)
-        {
+
+    for (Difference *diff : std::as_const(d->differences)) {
+        diff->setTrackingDestinationLineNumber(diff->trackingDestinationLineNumber() + totalDelta);
+        const bool appliedState = diff->applied();
+        if (appliedState == apply) {
             continue;
         }
-        (*diffIt)->applyQuietly(apply);
-        int currentDelta = GetDifferenceDelta(*diffIt);
+        diff->applyQuietly(apply);
+        const int currentDelta = GetDifferenceDelta(diff);
         totalDelta += currentDelta;
     }
 }
 
-bool DiffModel::setSelectedDifference(Difference* diff)
+bool DiffModel::setSelectedDifference(Difference *diff)
 {
-    qCDebug(LIBKOMPAREDIFF2) << "diff = " << diff;
-    qCDebug(LIBKOMPAREDIFF2) << "m_selectedDifference = " << m_selectedDifference;
+    Q_D(DiffModel);
 
-    if (diff != m_selectedDifference)
-    {
-        if ((m_differences.indexOf(diff)) == -1)
+    qCDebug(KOMPAREDIFF2_LOG) << "diff = " << diff;
+    qCDebug(KOMPAREDIFF2_LOG) << "d->selectedDifference = " << d->selectedDifference;
+
+    if (diff != d->selectedDifference) {
+        if ((d->differences.indexOf(diff)) == -1)
             return false;
-        // Do not set m_diffIndex if it cant be found
-        m_diffIndex = m_differences.indexOf(diff);
-        qCDebug(LIBKOMPAREDIFF2) << "m_diffIndex = " << m_diffIndex;
-        m_selectedDifference = diff;
+        // Do not set d->diffIndex if it cant be found
+        d->diffIndex = d->differences.indexOf(diff);
+        qCDebug(KOMPAREDIFF2_LOG) << "d->diffIndex = " << d->diffIndex;
+        d->selectedDifference = diff;
     }
 
     return true;
 }
 
-QPair<QList<Difference*>, QList<Difference*> > DiffModel::linesChanged(const QStringList& oldLines, const QStringList& newLines, int editLineNumber)
+QPair<QList<Difference *>, QList<Difference *>> DiffModel::linesChanged(const QStringList &oldLines, const QStringList &newLines, int editLineNumber)
 {
+    Q_D(DiffModel);
+
     // These two will be returned as the function result
-    QList<Difference*> inserted;
-    QList<Difference*> removed;
+    QList<Difference *> inserted;
+    QList<Difference *> removed;
     if (oldLines.size() == 0 && newLines.size() == 0) {
-        return qMakePair(QList<Difference*>(), QList<Difference*>());
+        return qMakePair(QList<Difference *>(), QList<Difference *>());
     }
     int editLineEnd = editLineNumber + oldLines.size();
     // Find the range of differences [iterBegin, iterEnd) that should be updated
     // TODO: assume that differences are ordered by starting line. Check that this is always the case
     DifferenceList applied;
     DifferenceListIterator iterBegin; // first diff ending a line before editLineNo or later
-    for (iterBegin = m_differences.begin(); iterBegin != m_differences.end(); ++iterBegin) {
+    for (iterBegin = d->differences.begin(); iterBegin != d->differences.end(); ++iterBegin) {
         // If the difference ends a line before the edit starts, they should be merged if this difference is applied.
         // Also it should be merged if it starts on editLineNumber, otherwise there will be two markers for the same line
         int lineAfterLast = (*iterBegin)->trackingDestinationLineEnd();
-        if (lineAfterLast > editLineNumber || (lineAfterLast == editLineNumber &&
-                                               ((*iterBegin)->applied() || (*iterBegin)->trackingDestinationLineNumber() == editLineNumber))) {
+        if (lineAfterLast > editLineNumber
+            || (lineAfterLast == editLineNumber && ((*iterBegin)->applied() || (*iterBegin)->trackingDestinationLineNumber() == editLineNumber))) {
             break;
         }
     }
     DifferenceListIterator iterEnd;
-    for (iterEnd = iterBegin; iterEnd != m_differences.end(); ++iterEnd) {
+    for (iterEnd = iterBegin; iterEnd != d->differences.end(); ++iterEnd) {
         // If the difference starts a line after the edit ends, it should still be merged if it is applied
         int firstLine = (*iterEnd)->trackingDestinationLineNumber();
         if (firstLine > editLineEnd || (!(*iterEnd)->applied() && firstLine == editLineEnd)) {
@@ -422,10 +521,10 @@ QPair<QList<Difference*>, QList<Difference*> > DiffModel::linesChanged(const QSt
     // Compute line numbers in source and destination to which the for diff line sequences (will be created later)
     int sourceLineNumber;
     int destinationLineNumber;
-    if (iterBegin == m_differences.end()) {    // All existing diffs are after the change
+    if (iterBegin == d->differences.end()) { // All existing diffs are after the change
         destinationLineNumber = editLineNumber;
-        if (!m_differences.isEmpty()) {
-            sourceLineNumber = m_differences.last()->sourceLineEnd() - (m_differences.last()->trackingDestinationLineEnd() - editLineNumber);
+        if (!d->differences.isEmpty()) {
+            sourceLineNumber = d->differences.last()->sourceLineEnd() - (d->differences.last()->trackingDestinationLineEnd() - editLineNumber);
         } else {
             sourceLineNumber = destinationLineNumber;
         }
@@ -444,7 +543,7 @@ QPair<QList<Difference*>, QList<Difference*> > DiffModel::linesChanged(const QSt
     // Now create a sequence of lines for the destination file and the corresponding lines in source
     QStringList sourceLines;
     QStringList destinationLines;
-    DifferenceListIterator insertPosition;  // where to insert the created diffs
+    DifferenceListIterator insertPosition; // where to insert the created diffs
     if (appliedBegin == appliedEnd) {
         destinationLines = newLines;
         sourceLines = oldLines;
@@ -454,7 +553,7 @@ QPair<QList<Difference*>, QList<Difference*> > DiffModel::linesChanged(const QSt
         for (int lineNumber = firstDestinationLineNumber; lineNumber < editLineNumber; ++lineNumber) {
             destinationLines.append((*appliedBegin)->destinationLineAt(lineNumber - firstDestinationLineNumber)->string());
         }
-        for (const QString& line : newLines) {
+        for (const QString &line : newLines) {
             destinationLines.append(line);
         }
         DifferenceListConstIterator appliedLast = appliedEnd;
@@ -492,10 +591,10 @@ QPair<QList<Difference*>, QList<Difference*> > DiffModel::linesChanged(const QSt
     for (DifferenceListIterator iter = iterBegin; iter != iterEnd; ++iter) {
         removed << *iter;
     }
-    insertPosition = m_differences.erase(iterBegin, iterEnd);
+    insertPosition = d->differences.erase(iterBegin, iterEnd);
 
     // Compute the Levenshtein table for two line sequences and construct the shortest possible edit script
-    StringListPair* pair = new StringListPair(sourceLines, destinationLines);
+    StringListPair *pair = new StringListPair(sourceLines, destinationLines);
     LevenshteinTable<StringListPair> table;
     table.createTable(pair);
     table.createListsOfMarkers();
@@ -506,7 +605,7 @@ QPair<QList<Difference*>, QList<Difference*> > DiffModel::linesChanged(const QSt
     int currentDestinationListLine = 0;
     MarkerListConstIterator sourceMarkerIter = sourceMarkers.constBegin();
     MarkerListConstIterator destinationMarkerIter = destinationMarkers.constBegin();
-    const int terminatorLineNumber = sourceLines.size() + destinationLines.size() + 1;    // A virtual offset for simpler computation - stands for infinity
+    const int terminatorLineNumber = sourceLines.size() + destinationLines.size() + 1; // A virtual offset for simpler computation - stands for infinity
 
     // Process marker lists, converting pairs of Start-End markers into differences.
     // Marker in source list only stands for deletion, in source and destination lists - for change, in destination list only - for insertion.
@@ -518,59 +617,26 @@ QPair<QList<Difference*>, QList<Difference*> > DiffModel::linesChanged(const QSt
         int linesToSkip = qMin(nextDestinationListLine - currentDestinationListLine, nextSourceListLine - currentSourceListLine);
         currentSourceListLine += linesToSkip;
         currentDestinationListLine += linesToSkip;
-        Difference* diff = new Difference(sourceLineNumber + currentSourceListLine, destinationLineNumber + currentDestinationListLine);
+        Difference *diff = new Difference(sourceLineNumber + currentSourceListLine, destinationLineNumber + currentDestinationListLine);
         if (nextSourceListLine == currentSourceListLine) {
-            processStartMarker(diff, sourceLines, sourceMarkerIter, currentSourceListLine, true);
+            DiffModelPrivate::processStartMarker(diff, sourceLines, sourceMarkerIter, currentSourceListLine, true);
         }
         if (nextDestinationListLine == currentDestinationListLine) {
-            processStartMarker(diff, destinationLines, destinationMarkerIter, currentDestinationListLine, false);
+            DiffModelPrivate::processStartMarker(diff, destinationLines, destinationMarkerIter, currentDestinationListLine, false);
         }
-        computeDiffStats(diff);
+        DiffModelPrivate::computeDiffStats(diff);
         Q_ASSERT(diff->type() != Difference::Unchanged);
         diff->applyQuietly(true);
         diff->setTrackingDestinationLineNumber(diff->destinationLineNumber());
-        insertPosition = m_differences.insert(insertPosition, diff);
+        insertPosition = d->differences.insert(insertPosition, diff);
         ++insertPosition;
         inserted << diff;
     }
     // Update line numbers for differences that are after the edit
-    for (; insertPosition != m_differences.end(); ++insertPosition) {
+    for (; insertPosition != d->differences.end(); ++insertPosition) {
         (*insertPosition)->setTrackingDestinationLineNumber((*insertPosition)->trackingDestinationLineNumber() + (newLines.size() - oldLines.size()));
     }
     return qMakePair(inserted, removed);
 }
 
-// Some common computing after diff contents have been filled.
-void DiffModel::computeDiffStats(Difference* diff)
-{
-    if (diff->sourceLineCount() > 0 && diff->destinationLineCount() > 0) {
-        diff->setType(Difference::Change);
-    } else if (diff->sourceLineCount() > 0) {
-        diff->setType(Difference::Delete);
-    } else if (diff->destinationLineCount() > 0) {
-        diff->setType(Difference::Insert);
-    }
-    diff->determineInlineDifferences();
-}
-
-// Helper method to extract duplicate code from DiffModel::linesChanged
-void DiffModel::processStartMarker(Difference* diff, const QStringList& lines, MarkerListConstIterator& currentMarker, int& currentListLine, bool isSource)
-{
-    Q_ASSERT((*currentMarker)->type() == Marker::Start);
-    ++currentMarker;
-    Q_ASSERT((*currentMarker)->type() == Marker::End);
-    int nextDestinationListLine = (*currentMarker)->offset();
-    for (; currentListLine < nextDestinationListLine; ++currentListLine) {
-        if (isSource) {
-            diff->addSourceLine(lines.at(currentListLine));
-        } else {
-            diff->addDestinationLine(lines.at(currentListLine));
-        }
-    }
-    ++currentMarker;
-    currentListLine = nextDestinationListLine;
-}
-
 #include "moc_diffmodel.cpp"
-
-/* vim: set ts=4 sw=4 noet: */
diff --git a/src/diffmodel.h b/src/diffmodel.h
index 59a0912828f4..32ccc1f4ff1b 100644
--- a/src/diffmodel.h
+++ b/src/diffmodel.h
@@ -1,21 +1,26 @@
 /*
-SPDX-FileCopyrightText: 2001-2004,2009 Otto Bruggeman <bruggie@gmail.com>
-SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+    SPDX-FileCopyrightText: 2001-2004,2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #ifndef KOMPAREDIFF2_DIFFMODEL_H
 #define KOMPAREDIFF2_DIFFMODEL_H
 
-#include <QObject>
-#include <QStringList>
+// lib
 #include "diffhunk.h"
-#include "kompare.h"
+#include "global.h"
 #include "komparediff2_export.h"
+// Qt
+#include <QObject>
+#include <QStringList>
+// Std
+#include <memory>
 
-namespace Diff2
+namespace KompareDiff2
 {
+class DiffModelPrivate;
 
 /**
  * @class DiffModel diffmodel.h <KompareDiff2/DiffModel>
@@ -25,122 +30,90 @@ namespace Diff2
 class KOMPAREDIFF2_EXPORT DiffModel : public QObject
 {
     Q_OBJECT
-public:
 
-    DiffModel(const QString& srcBaseURL, const QString& destBaseURL);
+public:
+    DiffModel(const QString &srcBaseURL, const QString &destBaseURL);
     DiffModel();
     ~DiffModel() override;
 
-private:
-    DiffModel(const DiffModel&) : QObject() {}
-
 public:
-    int parseDiff(enum Kompare::Format format, const QStringList& list);
+    DiffModel &operator=(const DiffModel &model);
+    bool operator<(const DiffModel &model) const;
+
+    int parseDiff(Format format, const QStringList &list);
 
     QString recreateDiff() const;
 
-    int hunkCount() const       { return m_hunks.count(); }
-    int differenceCount() const { return m_differences.count(); }
-    int appliedCount() const    { return m_appliedCount; }
+    int hunkCount() const;
+    int differenceCount() const;
+    int appliedCount() const;
 
-    DiffHunk* hunkAt(int i)               { return (m_hunks.at(i)); }
-    const Difference* differenceAt(int i) const { return (m_differences.at(i)); }
-    Difference* differenceAt(int i) { return (m_differences.at(i)); }
+    DiffHunk *hunkAt(int i);
+    const Difference *differenceAt(int i) const;
+    Difference *differenceAt(int i);
 
-    DiffHunkList*         hunks()             { return &m_hunks; }
-    const DiffHunkList*   hunks() const       { return &m_hunks; }
-    DifferenceList*       differences()       { return &m_differences; }
-    const DifferenceList* differences() const { return &m_differences; }
+    DiffHunkList *hunks();
+    const DiffHunkList *hunks() const;
+    DifferenceList *differences();
+    const DifferenceList *differences() const;
 
-    int findDifference(Difference* diff) const { return m_differences.indexOf(diff); }
+    int findDifference(Difference *diff) const;
 
-    Difference* firstDifference();
-    Difference* lastDifference();
-    Difference* prevDifference();
-    Difference* nextDifference();
+    Difference *firstDifference();
+    Difference *lastDifference();
+    Difference *prevDifference();
+    Difference *nextDifference();
 
-    const QString source() const               { return m_source; }
-    const QString destination() const          { return m_destination; }
-    const QString sourceFile() const;
-    const QString destinationFile() const;
-    const QString sourcePath() const;
-    const QString destinationPath() const;
-    const QString sourceTimestamp() const      { return m_sourceTimestamp; }
-    const QString destinationTimestamp() const { return m_destinationTimestamp; }
-    const QString sourceRevision() const       { return m_sourceRevision; }
-    const QString destinationRevision() const  { return m_destinationRevision; }
+    QString source() const;
+    QString destination() const;
+    QString sourceFile() const;
+    QString destinationFile() const;
+    QString sourcePath() const;
+    QString destinationPath() const;
+    QString sourceTimestamp() const;
+    QString destinationTimestamp() const;
+    QString sourceRevision() const;
+    QString destinationRevision() const;
 
-    void setSourceFile(QString path);
-    void setDestinationFile(QString path);
-    void setSourceTimestamp(QString timestamp);
-    void setDestinationTimestamp(QString timestamp);
-    void setSourceRevision(QString revision);
-    void setDestinationRevision(QString revision);
+    void setSourceFile(const QString &path);
+    void setDestinationFile(const QString &path);
+    void setSourceTimestamp(const QString &timestamp);
+    void setDestinationTimestamp(const QString &timestamp);
+    void setSourceRevision(const QString &revision);
+    void setDestinationRevision(const QString &revision);
 
-    void addHunk(DiffHunk* hunk);
-    void addDiff(Difference* diff);
+    void addHunk(DiffHunk *hunk);
+    void addDiff(Difference *diff);
     bool hasUnsavedChanges() const;
 
-    int  diffIndex(void) const       { return m_diffIndex; }
-    void setDiffIndex(int diffIndex) { m_diffIndex = diffIndex; }
+    int diffIndex() const;
+    void setDiffIndex(int diffIndex);
 
     void applyDifference(bool apply);
     void applyAllDifferences(bool apply);
 
-    bool setSelectedDifference(Difference* diff);
+    bool setSelectedDifference(Difference *diff);
 
-    DiffModel& operator=(const DiffModel& model);
-    bool operator<(const DiffModel& model);
+    int localeAwareCompareSource(const DiffModel &model) const;
 
-    int localeAwareCompareSource(const DiffModel& model);
-
-    bool isBlended() const { return m_blended; }
-    void setBlended(bool blended) { m_blended = blended; }
+    bool isBlended() const;
+    void setBlended(bool blended);
 
     /**
      * @p oldlines - lines that were removed.
      * @p newLines - lines that were inserted.
      * @p startPos - number of line at which the change occurred
      */
-    QPair<QList<Difference*>, QList<Difference*> > linesChanged(const QStringList& oldLines, const QStringList& newLines, int editLineNumber);
-
-private:
-    void splitSourceInPathAndFileName();
-    void splitDestinationInPathAndFileName();
-    void computeDiffStats(Difference* diff);
-    void processStartMarker(Difference* diff, const QStringList& lines, MarkerListConstIterator& currentMarker, int& currentListLine, bool isSource);
-
-private:
-    QString m_source;
-    QString m_destination;
-
-    QString m_sourcePath;
-    QString m_destinationPath;
-
-    QString m_sourceFile;
-    QString m_destinationFile;
-
-    QString m_sourceTimestamp;
-    QString m_destinationTimestamp;
-
-    QString m_sourceRevision;
-    QString m_destinationRevision;
-
-    DiffHunkList   m_hunks;
-    DifferenceList m_differences;
-
-    int  m_appliedCount;
-
-    int          m_diffIndex;
-    Difference*  m_selectedDifference;
-
-    bool m_blended;
+    QPair<QList<Difference *>, QList<Difference *>> linesChanged(const QStringList &oldLines, const QStringList &newLines, int editLineNumber);
 
 private Q_SLOTS:
-    void slotDifferenceApplied(Difference* diff);
+    void slotDifferenceApplied(Difference *diff);
+
+private:
+    Q_DECLARE_PRIVATE(DiffModel)
+    std::unique_ptr<DiffModelPrivate> const d_ptr;
 };
 
-} // End of namespace Diff2
+} // End of namespace KompareDiff2
 
 #endif
-
diff --git a/src/diffmodel_p.cpp b/src/diffmodel_p.cpp
new file mode 100644
index 000000000000..cc8acb85723c
--- /dev/null
+++ b/src/diffmodel_p.cpp
@@ -0,0 +1,78 @@
+/*
+    SPDX-FileCopyrightText: 2001-2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#include "diffmodel_p.h"
+
+// lib
+#include <komparediff2_logging.h>
+
+using namespace KompareDiff2;
+
+void DiffModelPrivate::splitSourceInPathAndFileName()
+{
+    int pos;
+
+    if ((pos = source.lastIndexOf(QLatin1Char('/'))) >= 0)
+        sourcePath = source.mid(0, pos + 1);
+
+    if ((pos = source.lastIndexOf(QLatin1Char('/'))) >= 0)
+        sourceFile = source.mid(pos + 1, source.length() - pos);
+    else
+        sourceFile = source;
+
+    qCDebug(KOMPAREDIFF2_LOG) << source << " was split into " << sourcePath << " and " << sourceFile;
+}
+
+void DiffModelPrivate::splitDestinationInPathAndFileName()
+{
+    int pos;
+
+    if ((pos = destination.lastIndexOf(QLatin1Char('/'))) >= 0)
+        destinationPath = destination.mid(0, pos + 1);
+
+    if ((pos = destination.lastIndexOf(QLatin1Char('/'))) >= 0)
+        destinationFile = destination.mid(pos + 1, destination.length() - pos);
+    else
+        destinationFile = destination;
+
+    qCDebug(KOMPAREDIFF2_LOG) << destination << " was split into " << destinationPath << " and " << destinationFile;
+}
+
+// Some common computing after diff contents have been filled.
+void DiffModelPrivate::computeDiffStats(Difference *diff)
+{
+    if (diff->sourceLineCount() > 0 && diff->destinationLineCount() > 0) {
+        diff->setType(Difference::Change);
+    } else if (diff->sourceLineCount() > 0) {
+        diff->setType(Difference::Delete);
+    } else if (diff->destinationLineCount() > 0) {
+        diff->setType(Difference::Insert);
+    }
+    diff->determineInlineDifferences();
+}
+
+// Helper method to extract duplicate code from DiffModel::linesChanged
+void DiffModelPrivate::processStartMarker(Difference *diff,
+                                          const QStringList &lines,
+                                          MarkerListConstIterator &currentMarker,
+                                          int &currentListLine,
+                                          bool isSource)
+{
+    Q_ASSERT((*currentMarker)->type() == Marker::Start);
+    ++currentMarker;
+    Q_ASSERT((*currentMarker)->type() == Marker::End);
+    int nextDestinationListLine = (*currentMarker)->offset();
+    for (; currentListLine < nextDestinationListLine; ++currentListLine) {
+        if (isSource) {
+            diff->addSourceLine(lines.at(currentListLine));
+        } else {
+            diff->addDestinationLine(lines.at(currentListLine));
+        }
+    }
+    ++currentMarker;
+    currentListLine = nextDestinationListLine;
+}
diff --git a/src/diffmodel_p.h b/src/diffmodel_p.h
new file mode 100644
index 000000000000..d69bb0b88cf0
--- /dev/null
+++ b/src/diffmodel_p.h
@@ -0,0 +1,99 @@
+/*
+    SPDX-FileCopyrightText: 2001-2004,2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#ifndef KOMPAREDIFF2_DIFFMODEL_P_H
+#define KOMPAREDIFF2_DIFFMODEL_P_H
+
+// lib
+#include "diffhunk.h"
+#include "diffmodel.h"
+
+namespace KompareDiff2
+{
+
+class DiffModelPrivate
+{
+public:
+    DiffModelPrivate() = default;
+    DiffModelPrivate(const QString &source, const QString &destination);
+    ~DiffModelPrivate();
+
+public:
+    DiffModelPrivate &operator=(const DiffModelPrivate &other);
+
+    void splitSourceInPathAndFileName();
+    void splitDestinationInPathAndFileName();
+
+    static void computeDiffStats(Difference *diff);
+    static void processStartMarker(Difference *diff, const QStringList &lines, MarkerListConstIterator &currentMarker, int &currentListLine, bool isSource);
+
+public:
+    QString source;
+    QString destination;
+
+    QString sourcePath;
+    QString destinationPath;
+
+    QString sourceFile;
+    QString destinationFile;
+
+    QString sourceTimestamp;
+    QString destinationTimestamp;
+
+    QString sourceRevision;
+    QString destinationRevision;
+
+    DiffHunkList hunks;
+    DifferenceList differences;
+
+    int appliedCount = 0;
+
+    int diffIndex = 0;
+    Difference *selectedDifference = nullptr;
+
+    bool blended = false;
+};
+
+inline DiffModelPrivate::DiffModelPrivate(const QString &source, const QString &destination)
+    : source(source)
+    , destination(destination)
+{
+}
+
+inline DiffModelPrivate::~DiffModelPrivate()
+{
+    selectedDifference = nullptr;
+
+    qDeleteAll(hunks);
+    qDeleteAll(differences);
+}
+
+inline DiffModelPrivate &DiffModelPrivate::operator=(const DiffModelPrivate &other)
+{
+    source = other.source;
+    sourcePath = other.sourcePath;
+    sourceFile = other.sourceFile;
+    sourceTimestamp = other.sourceTimestamp;
+    sourceRevision = other.sourceRevision;
+
+    destination = other.destination;
+    destinationPath = other.destinationPath;
+    destinationFile = other.destinationFile;
+    destinationTimestamp = other.destinationTimestamp;
+    destinationRevision = other.destinationRevision;
+
+    appliedCount = other.appliedCount;
+
+    diffIndex = other.diffIndex;
+    selectedDifference = other.selectedDifference;
+
+    return *this;
+}
+
+}
+
+#endif
diff --git a/src/diffmodellist.cpp b/src/diffmodellist.cpp
index 94a6d51a316f..fc63ecfbf109 100644
--- a/src/diffmodellist.cpp
+++ b/src/diffmodellist.cpp
@@ -1,14 +1,14 @@
 /*
-SPDX-FileCopyrightText: 2004 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2004 Otto Bruggeman <bruggie@gmail.com>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #include "diffmodellist.h"
 
-using namespace Diff2;
+using namespace KompareDiff2;
 
-static bool diffModelCompare(DiffModel* model1, DiffModel* model2)
+static bool diffModelCompare(DiffModel *model1, DiffModel *model2)
 {
     return *model1 < *model2;
 }
diff --git a/src/diffmodellist.h b/src/diffmodellist.h
index 6fa0d6e8de32..702b7faf8ba8 100644
--- a/src/diffmodellist.h
+++ b/src/diffmodellist.h
@@ -1,46 +1,49 @@
 /*
-SPDX-FileCopyrightText: 2004-2005, 2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2004-2005, 2009 Otto Bruggeman <bruggie@gmail.com>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #ifndef KOMPAREDIFF2_DIFFMODELLIST_H
 #define KOMPAREDIFF2_DIFFMODELLIST_H
 
-#include <QList> // include for the base class
-
+// lib
 #include "diffmodel.h"
 #include "komparediff2_export.h"
+// Qt
+#include <QList>
 
 /**
- * Diff2 namespace
+ * KompareDiff2 namespace
  */
-namespace Diff2
+namespace KompareDiff2
 {
 
-using DiffModelListIterator =      QList<DiffModel*>::iterator;
-using DiffModelListConstIterator = QList<DiffModel*>::const_iterator;
-
 /**
  * @class DiffModelList diffmodellist.h <KompareDiff2/DiffModelList>
  *
  * A list of DiffModel.
  */
-class KOMPAREDIFF2_EXPORT DiffModelList : public QList<DiffModel*>
+class KOMPAREDIFF2_EXPORT DiffModelList : public QList<DiffModel *>
 {
 public:
-    DiffModelList() {}
-    DiffModelList(const DiffModelList& list) : QList<DiffModel*>(list) {}
+    DiffModelList() = default;
+    DiffModelList(const DiffModelList &list)
+        : QList<DiffModel *>(list)
+    {
+    }
     virtual ~DiffModelList()
     {
         qDeleteAll(begin(), end());
     }
 
 public:
-    virtual void sort();
+    void sort();
+};
 
-}; // End of class DiffModelList
+using DiffModelListIterator =      QList<DiffModel *>::iterator;
+using DiffModelListConstIterator = QList<DiffModel *>::const_iterator;
 
-} // End of Namespace Diff2
+} // End of Namespace KompareDiff2
 
 #endif // KOMPAREDIFF2_DIFFMODELLIST_H
diff --git a/src/diffparser.cpp b/src/diffparser.cpp
index e8ed54a19a5a..a7c2a3183566 100644
--- a/src/diffparser.cpp
+++ b/src/diffparser.cpp
@@ -1,31 +1,31 @@
 /*
-SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
+    SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #include "diffparser.h"
 
+// lib
+#include <komparediff2_logging.h>
+// Qt
 #include <QRegularExpression>
 
-#include <komparediffdebug.h>
+using namespace KompareDiff2;
 
-using namespace Diff2;
-
-DiffParser::DiffParser(const KompareModelList* list, const QStringList& diff) : ParserBase(list, diff)
+DiffParser::DiffParser(const ModelList *list, const QStringList &diff)
+    : ParserBase(list, diff)
 {
     // The regexps needed for context diff parsing, the rest is the same as in parserbase.cpp
     m_contextDiffHeader1.setPattern(QRegularExpression::anchoredPattern(QStringLiteral("\\*\\*\\* ([^\\t]+)(\\t([^\\t]+))?\\n")));
     m_contextDiffHeader2.setPattern(QRegularExpression::anchoredPattern(QStringLiteral("--- ([^\\t]+)(\\t([^\\t]+))?\\n")));
 }
 
-DiffParser::~DiffParser()
-{
-}
+DiffParser::~DiffParser() = default;
 
-enum Kompare::Format DiffParser::determineFormat()
+Format DiffParser::determineFormat()
 {
-    qCDebug(LIBKOMPAREDIFF2) << "Determining the format of the diff Diff" << m_diffLines;
+    qCDebug(KOMPAREDIFF2_LOG) << "Determining the format of the diff Diff" << m_diffLines;
 
     QRegularExpression normalRE(QStringLiteral("[0-9]+[0-9,]*[acd][0-9]+[0-9,]*"));
     QRegularExpression unifiedRE(QStringLiteral("^--- "));
@@ -33,38 +33,29 @@ enum Kompare::Format DiffParser::determineFormat()
     QRegularExpression rcsRE(QStringLiteral("^[acd][0-9]+ [0-9]+"));
     QRegularExpression edRE(QStringLiteral("^[0-9]+[0-9,]*[acd]"));
 
-    QStringList::ConstIterator it = m_diffLines.begin();
-
-    while (it != m_diffLines.end())
-    {
-        qCDebug(LIBKOMPAREDIFF2) << (*it);
-        if (it->indexOf(normalRE, 0) == 0)
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Difflines are from a Normal diff...";
-            return Kompare::Normal;
+    for (const QString &diffLine : std::as_const(m_diffLines)) {
+        qCDebug(KOMPAREDIFF2_LOG) << diffLine;
+        if (diffLine.indexOf(normalRE, 0) == 0) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Difflines are from a Normal diff...";
+            return Normal;
         }
-        else if (it->indexOf(unifiedRE, 0) == 0)
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Difflines are from a Unified diff...";
-            return Kompare::Unified;
+        if (diffLine.indexOf(unifiedRE, 0) == 0) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Difflines are from a Unified diff...";
+            return Unified;
         }
-        else if (it->indexOf(contextRE, 0) == 0)
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Difflines are from a Context diff...";
-            return Kompare::Context;
+        if (diffLine.indexOf(contextRE, 0) == 0) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Difflines are from a Context diff...";
+            return Context;
         }
-        else if (it->indexOf(rcsRE, 0) == 0)
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Difflines are from an RCS diff...";
-            return Kompare::RCS;
+        if (diffLine.indexOf(rcsRE, 0) == 0) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Difflines are from an RCS diff...";
+            return RCS;
         }
-        else if (it->indexOf(edRE, 0) == 0)
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Difflines are from an ED diff...";
-            return Kompare::Ed;
+        if (diffLine.indexOf(edRE, 0) == 0) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Difflines are from an ED diff...";
+            return Ed;
         }
-        ++it;
     }
-    qCDebug(LIBKOMPAREDIFF2) << "Difflines are from an unknown diff...";
-    return Kompare::UnknownFormat;
+    qCDebug(KOMPAREDIFF2_LOG) << "Difflines are from an unknown diff...";
+    return UnknownFormat;
 }
diff --git a/src/diffparser.h b/src/diffparser.h
index 654930e357d9..b65275439bcd 100644
--- a/src/diffparser.h
+++ b/src/diffparser.h
@@ -1,27 +1,28 @@
 /*
-SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
+    SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #ifndef KOMPAREDIFF2_DIFFPARSER_H
 #define KOMPAREDIFF2_DIFFPARSER_H
 
+// lib
 #include "parserbase.h"
 
-namespace Diff2
+namespace KompareDiff2
 {
 
 class DiffParser : public ParserBase
 {
 public:
-    DiffParser(const KompareModelList* list, const QStringList& diff);
+    DiffParser(const ModelList *list, const QStringList &diff);
     ~DiffParser() override;
 
 protected:
-    enum Kompare::Format determineFormat() override;
+    Format determineFormat() override;
 };
 
-} // End of namespace Diff2
+} // End of namespace KompareDiff2
 
 #endif
diff --git a/src/diffsettings.cpp b/src/diffsettings.cpp
index c288665c1c8d..b4971d1d49a8 100644
--- a/src/diffsettings.cpp
+++ b/src/diffsettings.cpp
@@ -1,45 +1,47 @@
 /*
-SPDX-FileCopyrightText: 2001-2004 Otto Bruggeman <otto.bruggeman@home.nl>
-SPDX-FileCopyrightText: 2007 Kevin Kofler <kevin.kofler@chello.at>
+    SPDX-FileCopyrightText: 2001-2004 Otto Bruggeman <otto.bruggeman@home.nl>
+    SPDX-FileCopyrightText: 2007 Kevin Kofler <kevin.kofler@chello.at>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #include "diffsettings.h"
 
+// KF
 #include <KConfig>
 #include <KConfigGroup>
-
+// Qt
 #include <QWidget>
 
-DiffSettings::DiffSettings(QWidget* parent)
-    : SettingsBase(parent),
-      m_linesOfContext(0),
-      m_format(Kompare::Unified),
-      m_largeFiles(false),
-      m_ignoreWhiteSpace(false),
-      m_ignoreAllWhiteSpace(false),
-      m_ignoreEmptyLines(false),
-      m_ignoreChangesDueToTabExpansion(false),
-      m_createSmallerDiff(false),
-      m_ignoreChangesInCase(false),
-      m_showCFunctionChange(false),
-      m_convertTabsToSpaces(false),
-      m_ignoreRegExp(false),
-      m_recursive(false),
-      m_newFiles(false),
-      m_excludeFilePattern(false),
-      m_excludeFilesFile(false)
+namespace KompareDiff2
 {
-}
 
-DiffSettings::~DiffSettings()
+DiffSettings::DiffSettings()
+    : m_linesOfContext(0)
+    , m_format(Unified)
+    , m_largeFiles(false)
+    , m_ignoreWhiteSpace(false)
+    , m_ignoreAllWhiteSpace(false)
+    , m_ignoreEmptyLines(false)
+    , m_ignoreChangesDueToTabExpansion(false)
+    , m_createSmallerDiff(false)
+    , m_ignoreChangesInCase(false)
+    , m_showCFunctionChange(false)
+    , m_convertTabsToSpaces(false)
+    , m_ignoreRegExp(false)
+    , m_recursive(false)
+    , m_newFiles(false)
+    , m_excludeFilePattern(false)
+    , m_excludeFilesFile(false)
 {
 }
 
-void DiffSettings::loadSettings(KConfig* config)
+DiffSettings::~DiffSettings() = default;
+
+void DiffSettings::loadSettings(KConfig *config)
 {
     KConfigGroup group(config, QStringLiteral("Diff Options"));
+    // clang-format off
     m_diffProgram                    = group.readEntry("DiffProgram", QString());
     m_linesOfContext                 = group.readEntry("LinesOfContext", 3);
     m_largeFiles                     = group.readEntry("LargeFiles", true);
@@ -56,20 +58,24 @@ void DiffSettings::loadSettings(KConfig* config)
     m_showCFunctionChange            = group.readEntry("ShowCFunctionChange", false);
     m_recursive                      = group.readEntry("CompareRecursively", true);
     m_newFiles                       = group.readEntry("NewFiles", true);
+    // clang-format on
 
-    m_format = static_cast<Kompare::Format>(group.readEntry("Format", (int) Kompare::Unified));
+    m_format = static_cast<Format>(group.readEntry("Format", static_cast<int>(Unified)));
 
     KConfigGroup group2(config, QStringLiteral("Exclude File Options"));
-    m_excludeFilePattern             = group2.readEntry("Pattern", false);
-    m_excludeFilePatternList         = group2.readEntry("PatternList", QStringList());
-    m_excludeFilesFile               = group2.readEntry("File", false);
-    m_excludeFilesFileURL            = group2.readEntry("FileURL", QString());
-    m_excludeFilesFileHistoryList    = group2.readEntry("FileHistoryList", QStringList());
+    // clang-format off
+    m_excludeFilePattern          = group2.readEntry("Pattern", false);
+    m_excludeFilePatternList      = group2.readEntry("PatternList", QStringList());
+    m_excludeFilesFile            = group2.readEntry("File", false);
+    m_excludeFilesFileURL         = group2.readEntry("FileURL", QString());
+    m_excludeFilesFileHistoryList = group2.readEntry("FileHistoryList", QStringList());
+    // clang-format on
 }
 
-void DiffSettings::saveSettings(KConfig* config)
+void DiffSettings::saveSettings(KConfig *config)
 {
     KConfigGroup group(config, QStringLiteral("Diff Options"));
+    // clang-format off
     group.writeEntry("DiffProgram",                    m_diffProgram);
     group.writeEntry("LinesOfContext",                 m_linesOfContext);
     group.writeEntry("Format",                         (int)m_format);
@@ -87,15 +93,18 @@ void DiffSettings::saveSettings(KConfig* config)
     group.writeEntry("ShowCFunctionChange",            m_showCFunctionChange);
     group.writeEntry("CompareRecursively",             m_recursive);
     group.writeEntry("NewFiles",                       m_newFiles);
+    // clang-format on
 
     KConfigGroup group2(config, QStringLiteral("Exclude File Options"));
-    group2.writeEntry("Pattern",            m_excludeFilePattern);
-    group2.writeEntry("PatternList",        m_excludeFilePatternList);
-    group2.writeEntry("File",               m_excludeFilesFile);
-    group2.writeEntry("FileURL",            m_excludeFilesFileURL);
-    group2.writeEntry("FileHistoryList",    m_excludeFilesFileHistoryList);
+    // clang-format off
+    group2.writeEntry("Pattern",         m_excludeFilePattern);
+    group2.writeEntry("PatternList",     m_excludeFilePatternList);
+    group2.writeEntry("File",            m_excludeFilesFile);
+    group2.writeEntry("FileURL",         m_excludeFilesFileURL);
+    group2.writeEntry("FileHistoryList", m_excludeFilesFileHistoryList);
+    // clang-format on
 
     config->sync();
 }
 
-#include "moc_diffsettings.cpp"
+}
diff --git a/src/diffsettings.h b/src/diffsettings.h
index 13b7a377f849..9e7c834df761 100644
--- a/src/diffsettings.h
+++ b/src/diffsettings.h
@@ -1,59 +1,67 @@
 /*
-SPDX-FileCopyrightText: 2001-2003 Otto Bruggeman <otto.bruggeman@home.nl>
-SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+    SPDX-FileCopyrightText: 2001-2003 Otto Bruggeman <otto.bruggeman@home.nl>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #ifndef KOMPAREDIFF2_DIFFSETTINGS_H
 #define KOMPAREDIFF2_DIFFSETTINGS_H
 
-#include <QStringList>
-
-#include "kompare.h"
-#include "settingsbase.h"
+// lib
+#include "global.h"
 #include "komparediff2_export.h"
+// Qt
+#include <QStringList>
+
+class KConfig;
+
+namespace KompareDiff2
+{
 
 /**
  * @class DiffSettings diffsettings.h <KompareDiff2/DiffSettings>
  *
  * The settings for a diff.
  */
-class KOMPAREDIFF2_EXPORT  DiffSettings : public SettingsBase
+class KOMPAREDIFF2_EXPORT DiffSettings
 {
-    Q_OBJECT
 public:
-    explicit DiffSettings(QWidget* parent);
-    ~DiffSettings() override;
+    DiffSettings();
+    ~DiffSettings();
+
 public:
-    // some virtual functions that will be overloaded from the base class
-    void loadSettings(KConfig* config) override;
-    void saveSettings(KConfig* config) override;
+    void loadSettings(KConfig *config);
+    void saveSettings(KConfig *config);
 
 public:
     QString m_diffProgram;
     int m_linesOfContext;
-    Kompare::Format m_format;
-    bool m_largeFiles;                           // -H
-    bool m_ignoreWhiteSpace;                     // -b
-    bool m_ignoreAllWhiteSpace;                  // -w
-    bool m_ignoreEmptyLines;                     // -B
-    bool m_ignoreChangesDueToTabExpansion;       // -E
-    bool m_createSmallerDiff;                    // -d
-    bool m_ignoreChangesInCase;                  // -i
-    bool m_showCFunctionChange;                  // -p
-    bool m_convertTabsToSpaces;                  // -t
-    bool m_ignoreRegExp;                         // -I
-    QString m_ignoreRegExpText;                  // the RE for -I
+    Format m_format;
+    // clang-format off
+    bool m_largeFiles;                         ///< -H
+    bool m_ignoreWhiteSpace;                   ///< -b
+    bool m_ignoreAllWhiteSpace;                ///< -w
+    bool m_ignoreEmptyLines;                   ///< -B
+    bool m_ignoreChangesDueToTabExpansion;     ///< -E
+    bool m_createSmallerDiff;                  ///< -d
+    bool m_ignoreChangesInCase;                ///< -i
+    bool m_showCFunctionChange;                ///< -p
+    bool m_convertTabsToSpaces;                ///< -t
+    bool m_ignoreRegExp;                       ///< -I
+    QString m_ignoreRegExpText;                ///< the RE for -I
     QStringList m_ignoreRegExpTextHistory;
-    bool m_recursive;                            // -r
-    bool m_newFiles;                             // -N
-//  bool m_allText;                              // -a
-    bool m_excludeFilePattern;                   // -x
-    QStringList m_excludeFilePatternList;        // The list of patterns for -x
-    bool m_excludeFilesFile;                     // -X
-    QString m_excludeFilesFileURL;               // The filename to -X
-    QStringList m_excludeFilesFileHistoryList;   // The history list of filenames
+    bool m_recursive;                          ///< -r
+    bool m_newFiles;                           ///< -N
+//  bool m_allText;                            ///< -a
+    bool m_excludeFilePattern;                 ///< -x
+    QStringList m_excludeFilePatternList;      ///< The list of patterns for -x
+    bool m_excludeFilesFile;                   ///< -X
+    QString m_excludeFilesFileURL;             ///< The filename to -X
+    QStringList m_excludeFilesFileHistoryList; ///< The history list of filenames
+    // clang-format on
 };
 
+}
+
 #endif
diff --git a/src/global.h b/src/global.h
new file mode 100644
index 000000000000..6034c919ccf0
--- /dev/null
+++ b/src/global.h
@@ -0,0 +1,79 @@
+/*
+    SPDX-FileCopyrightText: 2001-2003 Otto Bruggeman <otto.bruggeman@home.nl>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#ifndef KOMPAREDIFF2_GLOBAL_H
+#define KOMPAREDIFF2_GLOBAL_H
+
+namespace KompareDiff2
+{
+/**
+ * Patch format enum.
+ */
+enum Format {
+    UnknownFormat = -1,
+    Context       = 0,
+    Ed            = 1,
+    Normal        = 2,
+    RCS           = 3,
+    Unified       = 4,
+    SideBySide    = 5,
+};
+
+/**
+ * Patch generator enum.
+ */
+enum Generator {
+    UnknownGenerator = -1,
+    CVSDiff          = 0,
+    Diff             = 1,
+    Perforce         = 2,
+    SubVersion       = 3,
+    Reserved2        = 4,
+    Reserved3        = 5,
+    Reserved4        = 6,
+    Reserved5        = 7,
+    Reserved6        = 8,
+    Reserved7        = 9,
+};
+
+/**
+ * Mode
+ */
+enum Mode {
+    ComparingFiles,      ///< compareFiles
+    ComparingFileString, ///< Compare a source file with a destination string
+    ComparingStringFile, ///< Compare a source string with a destination file
+    ComparingDirs,       ///< compareDirs
+    ShowingDiff,         ///< openDiff
+    BlendingDir,         ///< openDirAndDiff
+    BlendingFile,        ///< openFileAndDiff
+    UnknownMode,         ///< Used to initialize the Infoi struct
+};
+
+/**
+ * DiffMode
+ */
+enum DiffMode {
+    Default,
+    Custom,
+    UnknownDiffMode, ///< Use to initialize the Info struct
+};
+
+/**
+ * State
+ */
+enum Status {
+    RunningDiff,
+    Parsing,
+    FinishedParsing,
+    FinishedWritingDiff,
+    ReRunningDiff, ///< When a change has been detected after diff has run
+};
+
+} // End of namespace KompareDiff2
+
+#endif
diff --git a/src/info.cpp b/src/info.cpp
new file mode 100644
index 000000000000..0bb332795145
--- /dev/null
+++ b/src/info.cpp
@@ -0,0 +1,52 @@
+/*
+    SPDX-FileCopyrightText: 2001-2003 Otto Bruggeman <otto.bruggeman@home.nl>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#include "info.h"
+
+using namespace KompareDiff2;
+
+Info::Info(Mode _mode,
+           DiffMode _diffMode,
+           Format _format,
+           Generator _generator,
+           const QUrl &_source,
+           const QUrl &_destination,
+           const QString &_localSource,
+           const QString &_localDestination,
+           QTemporaryDir *_sourceQTempDir,
+           QTemporaryDir *_destinationQTempDir,
+           uint _depth,
+           bool _applied)
+    : mode(_mode)
+    , diffMode(_diffMode)
+    , format(_format)
+    , generator(_generator)
+    , source(_source)
+    , destination(_destination)
+    , localSource(_localSource)
+    , localDestination(_localDestination)
+    , sourceQTempDir(_sourceQTempDir)
+    , destinationQTempDir(_destinationQTempDir)
+    , depth(_depth)
+    , applied(_applied)
+{
+}
+
+void Info::swapSourceWithDestination()
+{
+    QUrl url = source;
+    source = destination;
+    destination = url;
+
+    QString string = localSource;
+    localSource = localDestination;
+    localDestination = string;
+
+    QTemporaryDir *tmpDir = sourceQTempDir;
+    sourceQTempDir = destinationQTempDir;
+    destinationQTempDir = tmpDir;
+}
diff --git a/src/info.h b/src/info.h
new file mode 100644
index 000000000000..084aa84ba92a
--- /dev/null
+++ b/src/info.h
@@ -0,0 +1,62 @@
+/*
+    SPDX-FileCopyrightText: 2001-2003 Otto Bruggeman <otto.bruggeman@home.nl>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#ifndef KOMPAREDIFF2_INFO_H
+#define KOMPAREDIFF2_INFO_H
+
+// lib
+#include "global.h"
+#include "komparediff2_export.h"
+// Qt
+#include <QUrl>
+
+// Forward declaration needed
+class QTemporaryDir;
+
+namespace KompareDiff2
+{
+
+/**
+ * @class Info info.h <KompareDiff2/Info>
+ *
+ * Info.
+ */
+class KOMPAREDIFF2_EXPORT Info
+{
+public:
+    Info(Mode _mode = UnknownMode,
+         DiffMode _diffMode = UnknownDiffMode,
+         Format _format = UnknownFormat,
+         Generator _generator = UnknownGenerator,
+         const QUrl &_source = QUrl(),
+         const QUrl &_destination = QUrl(),
+         const QString &_localSource = QString(),
+         const QString &_localDestination = QString(),
+         QTemporaryDir *_sourceQTempDir = nullptr,
+         QTemporaryDir *_destinationQTempDir = nullptr,
+         uint _depth = 0,
+         bool _applied = true);
+
+    void swapSourceWithDestination();
+
+    Mode mode;
+    DiffMode diffMode;
+    Format format;
+    Generator generator;
+    QUrl source;
+    QUrl destination;
+    QString localSource;
+    QString localDestination;
+    QTemporaryDir *sourceQTempDir;
+    QTemporaryDir *destinationQTempDir;
+    uint depth;
+    bool applied;
+};
+
+} // End of namespace KompareDiff2
+
+#endif
diff --git a/src/kompare.cpp b/src/kompare.cpp
deleted file mode 100644
index 70b613563d4c..000000000000
--- a/src/kompare.cpp
+++ /dev/null
@@ -1,40 +0,0 @@
-/*
-SPDX-FileCopyrightText: 2001-2003 Otto Bruggeman <otto.bruggeman@home.nl>
-SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
-
-SPDX-License-Identifier: GPL-2.0-or-later
-*/
-
-#include "kompare.h"
-
-Kompare::Info::Info(Kompare::Mode _mode, Kompare::DiffMode _diffMode, Kompare::Format _format, Kompare::Generator _generator, QUrl _source, QUrl _destination, QString _localSource, QString _localDestination, QTemporaryDir* _sourceQTempDir, QTemporaryDir* _destinationQTempDir, uint _depth, bool _applied)
-    : mode(_mode)
-    , diffMode(_diffMode)
-    , format(_format)
-    , generator(_generator)
-    , source(_source)
-    , destination(_destination)
-    , localSource(_localSource)
-    , localDestination(_localDestination)
-    , sourceQTempDir(_sourceQTempDir)
-    , destinationQTempDir(_destinationQTempDir)
-    , depth(_depth)
-    , applied(_applied)
-{
-}
-
-
-void Kompare::Info::swapSourceWithDestination()
-{
-    QUrl url = source;
-    source = destination;
-    destination = url;
-
-    QString string = localSource;
-    localSource = localDestination;
-    localDestination = string;
-
-    QTemporaryDir* tmpDir = sourceQTempDir;
-    sourceQTempDir = destinationQTempDir;
-    destinationQTempDir = tmpDir;
-}
diff --git a/src/kompare.h b/src/kompare.h
deleted file mode 100644
index 1ab22e13ea37..000000000000
--- a/src/kompare.h
+++ /dev/null
@@ -1,132 +0,0 @@
-/*
-SPDX-FileCopyrightText: 2001-2003 Otto Bruggeman <otto.bruggeman@home.nl>
-SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
-
-SPDX-License-Identifier: GPL-2.0-or-later
-*/
-
-#ifndef KOMPAREDIFF2_KOMPARE_H
-#define KOMPAREDIFF2_KOMPARE_H
-
-#include <QUrl>
-
-#include "komparediff2_export.h"
-
-// Forward declaration needed
-class QTemporaryDir;
-
-/**
- * Kompare namespace
- */
-namespace Kompare
-{
-/**
- * Patch format enum.
- */
-enum Format {
-    Context       = 0,
-    Ed            = 1,
-    Normal        = 2,
-    RCS           = 3,
-    Unified       = 4,
-    SideBySide    = 5,
-    UnknownFormat = -1
-};
-
-/**
- * Patch generator enum.
- */
-enum Generator {
-    CVSDiff          = 0,
-    Diff             = 1,
-    Perforce         = 2,
-    SubVersion       = 3,
-    Reserved2        = 4,
-    Reserved3        = 5,
-    Reserved4        = 6,
-    Reserved5        = 7,
-    Reserved6        = 8,
-    Reserved7        = 9,
-    UnknownGenerator = -1
-};
-
-/**
- * Mode
- */
-enum Mode {
-    ComparingFiles,      // compareFiles
-    ComparingFileString, // Compare a source file with a destination string
-    ComparingStringFile, // Compare a source string with a destination file
-    ComparingDirs,       // compareDirs
-    ShowingDiff,         // openDiff
-    BlendingDir,         // openDirAndDiff
-    BlendingFile,        // openFileAndDiff
-    UnknownMode          // Used to initialize the Infoi struct
-};
-
-/**
- * DiffMode
- */
-enum DiffMode {
-    Default,
-    Custom,
-    UnknownDiffMode // Use to initialize the Info struct
-};
-
-/**
- * State
- */
-enum Status {
-    RunningDiff,
-    Parsing,
-    FinishedParsing,
-    FinishedWritingDiff,
-    ReRunningDiff   // When a change has been detected after diff has run
-};
-
-/**
- * Target
- */
-enum Target {
-    Source,
-    Destination
-};
-
-/**
- * @class Info kompare.h <KompareDiff2/Kompare>
- *
- * Info.
- */
-struct KOMPAREDIFF2_EXPORT Info {
-    Info(
-        enum Mode _mode = UnknownMode,
-        enum DiffMode _diffMode = UnknownDiffMode,
-        enum Format _format = UnknownFormat,
-        enum Generator _generator = UnknownGenerator,
-        QUrl _source = QUrl(),
-        QUrl _destination = QUrl(),
-        QString _localSource = QString(),
-        QString _localDestination = QString(),
-        QTemporaryDir* _sourceQTempDir = nullptr,
-        QTemporaryDir* _destinationQTempDir = nullptr,
-        uint _depth = 0,
-        bool _applied = true
-    );
-    void swapSourceWithDestination();
-
-    enum Mode      mode;
-    enum DiffMode  diffMode;
-    enum Format    format;
-    enum Generator generator;
-    QUrl           source;
-    QUrl           destination;
-    QString        localSource;
-    QString        localDestination;
-    QTemporaryDir*      sourceQTempDir;
-    QTemporaryDir*      destinationQTempDir;
-    uint           depth;
-    bool           applied;
-};
-} // End of namespace Kompare
-
-#endif
diff --git a/src/komparemodellist.cpp b/src/komparemodellist.cpp
deleted file mode 100644
index 934562ec918f..000000000000
--- a/src/komparemodellist.cpp
+++ /dev/null
@@ -1,1535 +0,0 @@
-/*
-SPDX-FileCopyrightText: 2001-2005,2009 Otto Bruggeman <otto.bruggeman@home.nl>
-SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
-SPDX-FileCopyrightText: 2007-2010 Kevin Kofler <kevin.kofler@chello.at>
-SPDX-FileCopyrightText: 2012 Jean -Nicolas Artaud <jeannicolasartaud@gmail.com>
-
-SPDX-License-Identifier: GPL-2.0-or-later
-*/
-
-#include "komparemodellist.h"
-
-#include <QAction>
-#include <QFile>
-#include <QDir>
-#include <QTextCodec>
-#include <QTextStream>
-#include <QList>
-#include <QTemporaryFile>
-#include <QMimeType>
-#include <QMimeDatabase>
-
-#include <KActionCollection>
-#include <KDirWatch>
-#include <KIO/UDSEntry>
-#include <KIO/StatJob>
-#include <KIO/MkdirJob>
-#include <KIO/FileCopyJob>
-#include <KLocalizedString>
-#include <KStandardAction>
-
-#include <komparediffdebug.h>
-#include "diffhunk.h"
-#include "kompareprocess.h"
-#include "parser.h"
-
-using namespace Diff2;
-
-#if KOMPAREDIFF2_BUILD_DEPRECATED_SINCE(5, 4)
-KompareModelList::KompareModelList(DiffSettings* diffSettings, QWidget* widgetForKIO, QObject* parent, const char* name, bool supportReadWrite)
-    : KompareModelList(diffSettings, parent, name, supportReadWrite)
-{
-    Q_UNUSED(widgetForKIO)
-}
-#endif
-
-KompareModelList::KompareModelList(DiffSettings* diffSettings, QObject* parent, const char* name, bool supportReadWrite)
-    : QObject(parent),
-      m_diffProcess(nullptr),
-      m_diffSettings(diffSettings),
-      m_models(nullptr),
-      m_selectedModel(nullptr),
-      m_selectedDifference(nullptr),
-      m_modelIndex(0),
-      m_info(nullptr),
-      m_textCodec(nullptr),
-      m_isReadWrite(supportReadWrite)
-{
-    qCDebug(LIBKOMPAREDIFF2) << "Show me the arguments: " << diffSettings << ", " << parent << ", " << name;
-    m_actionCollection = new KActionCollection(this);
-    if (supportReadWrite) {
-        m_applyDifference = m_actionCollection->addAction(QStringLiteral("difference_apply"), this, &KompareModelList::slotActionApplyDifference);
-        m_applyDifference->setIcon(QIcon::fromTheme(QStringLiteral("arrow-right")));
-        m_applyDifference->setText(i18nc("@action", "&Apply Difference"));
-        m_actionCollection->setDefaultShortcut(m_applyDifference, QKeySequence(Qt::Key_Space));
-        m_unApplyDifference = m_actionCollection->addAction(QStringLiteral("difference_unapply"), this, &KompareModelList::slotActionUnApplyDifference);
-        m_unApplyDifference->setIcon(QIcon::fromTheme(QStringLiteral("arrow-left")));
-        m_unApplyDifference->setText(i18nc("@action", "Un&apply Difference"));
-        m_actionCollection->setDefaultShortcut(m_unApplyDifference, QKeySequence(Qt::Key_Backspace));
-        m_applyAll = m_actionCollection->addAction(QStringLiteral("difference_applyall"), this, &KompareModelList::slotActionApplyAllDifferences);
-        m_applyAll->setIcon(QIcon::fromTheme(QStringLiteral("arrow-right-double")));
-        m_applyAll->setText(i18nc("@action", "App&ly All"));
-        m_actionCollection->setDefaultShortcut(m_applyAll, QKeySequence(Qt::CTRL | Qt::Key_A));
-        m_unapplyAll = m_actionCollection->addAction(QStringLiteral("difference_unapplyall"), this, &KompareModelList::slotActionUnapplyAllDifferences);
-        m_unapplyAll->setIcon(QIcon::fromTheme(QStringLiteral("arrow-left-double")));
-        m_unapplyAll->setText(i18nc("@action", "&Unapply All"));
-        m_actionCollection->setDefaultShortcut(m_unapplyAll, QKeySequence(Qt::CTRL | Qt::Key_U));
-    } else {
-        m_applyDifference = nullptr;
-        m_unApplyDifference = nullptr;
-        m_applyAll = nullptr;
-        m_unapplyAll = nullptr;
-    }
-    m_previousFile = m_actionCollection->addAction(QStringLiteral("difference_previousfile"), this, &KompareModelList::slotPreviousModel);
-    m_previousFile->setIcon(QIcon::fromTheme(QStringLiteral("arrow-up-double")));
-    m_previousFile->setText(i18nc("@action", "P&revious File"));
-    m_actionCollection->setDefaultShortcut(m_previousFile, QKeySequence(Qt::CTRL | Qt::Key_PageUp));
-    m_nextFile = m_actionCollection->addAction(QStringLiteral("difference_nextfile"), this, &KompareModelList::slotNextModel);
-    m_nextFile->setIcon(QIcon::fromTheme(QStringLiteral("arrow-down-double")));
-    m_nextFile->setText(i18nc("@action", "N&ext File"));
-    m_actionCollection->setDefaultShortcut(m_nextFile, QKeySequence(Qt::CTRL | Qt::Key_PageDown));
-    m_previousDifference = m_actionCollection->addAction(QStringLiteral("difference_previous"), this, &KompareModelList::slotPreviousDifference);
-    m_previousDifference->setIcon(QIcon::fromTheme(QStringLiteral("arrow-up")));
-    m_previousDifference->setText(i18nc("@action", "&Previous Difference"));
-    m_actionCollection->setDefaultShortcut(m_previousDifference, QKeySequence(Qt::CTRL | Qt::Key_Up));
-    m_nextDifference = m_actionCollection->addAction(QStringLiteral("difference_next"), this, &KompareModelList::slotNextDifference);
-    m_nextDifference->setIcon(QIcon::fromTheme(QStringLiteral("arrow-down")));
-    m_nextDifference->setText(i18nc("@action", "&Next Difference"));
-    m_actionCollection->setDefaultShortcut(m_nextDifference, QKeySequence(Qt::CTRL | Qt::Key_Down));
-    m_previousDifference->setEnabled(false);
-    m_nextDifference->setEnabled(false);
-
-    if (supportReadWrite) {
-        m_save = KStandardAction::save(this, &KompareModelList::slotSaveDestination, m_actionCollection);
-        m_save->setEnabled(false);
-    } else {
-        m_save = nullptr;
-    }
-
-    updateModelListActions();
-}
-
-KompareModelList::~KompareModelList()
-{
-    m_selectedModel = nullptr;
-    m_selectedDifference = nullptr;
-    m_info = nullptr;
-    delete m_models;
-}
-
-bool KompareModelList::isDirectory(const QString& url) const
-{
-    QFileInfo fi(url);
-    if (fi.isDir())
-        return true;
-    else
-        return false;
-}
-
-bool KompareModelList::isDiff(const QString& mimeType) const
-{
-    if (mimeType == QLatin1String("text/x-patch"))
-        return true;
-    else
-        return false;
-}
-
-bool KompareModelList::compare()
-{
-    bool result = false;
-
-    bool sourceIsDirectory = isDirectory(m_info->localSource);
-    bool destinationIsDirectory = isDirectory(m_info->localDestination);
-
-    if (sourceIsDirectory && destinationIsDirectory)
-    {
-        m_info->mode = Kompare::ComparingDirs;
-        result = compare(m_info->mode);
-    }
-    else if (!sourceIsDirectory && !destinationIsDirectory)
-    {
-        QFile sourceFile(m_info->localSource);
-        sourceFile.open(QIODevice::ReadOnly);
-        QMimeDatabase db;
-        QString sourceMimeType = (db.mimeTypeForData(sourceFile.readAll())).name();
-        sourceFile.close();
-        qCDebug(LIBKOMPAREDIFF2) << "Mimetype source     : " << sourceMimeType;
-
-        QFile destinationFile(m_info->localDestination);
-        destinationFile.open(QIODevice::ReadOnly);
-        QString destinationMimeType = (db.mimeTypeForData(destinationFile.readAll())).name();
-        destinationFile.close();
-        qCDebug(LIBKOMPAREDIFF2) << "Mimetype destination: " << destinationMimeType;
-
-        // Not checking if it is a text file/something diff can even compare, we'll let diff handle that
-        if (!isDiff(sourceMimeType) && isDiff(destinationMimeType))
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Blending destination into source...";
-            m_info->mode = Kompare::BlendingFile;
-            result = openFileAndDiff();
-        }
-        else if (isDiff(sourceMimeType) && !isDiff(destinationMimeType))
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Blending source into destination...";
-            m_info->mode = Kompare::BlendingFile;
-            // Swap source and destination before calling this
-            m_info->swapSourceWithDestination();
-            // Do we need to notify anyone we swapped source and destination?
-            // No we do not need to notify anyone about swapping source with destination
-            result = openFileAndDiff();
-        }
-        else
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Comparing source with destination";
-            m_info->mode = Kompare::ComparingFiles;
-            result = compare(m_info->mode);
-        }
-    }
-    else if (sourceIsDirectory && !destinationIsDirectory)
-    {
-        m_info->mode = Kompare::BlendingDir;
-        result = openDirAndDiff();
-    }
-    else
-    {
-        m_info->mode = Kompare::BlendingDir;
-        // Swap source and destination first in m_info
-        m_info->swapSourceWithDestination();
-        // Do we need to notify anyone we swapped source and destination?
-        // No we do not need to notify anyone about swapping source with destination
-        result = openDirAndDiff();
-    }
-
-    return result;
-}
-
-bool KompareModelList::compare(Kompare::Mode mode)
-{
-    clear(); // Destroy the old models...
-
-    m_diffProcess = new KompareProcess(m_diffSettings, Kompare::Custom, m_info->localSource, m_info->localDestination, QString(), mode);
-    m_diffProcess->setEncoding(m_encoding);
-
-    connect(m_diffProcess, &KompareProcess::diffHasFinished,
-            this, &KompareModelList::slotDiffProcessFinished);
-
-    Q_EMIT status(Kompare::RunningDiff);
-    m_diffProcess->start();
-
-    return true;
-}
-
-static QString lstripSeparators(const QString& from, uint count)
-{
-    int position = 0;
-    for (uint i = 0; i < count; ++i)
-    {
-        position = from.indexOf(QLatin1Char('/'), position);
-        if (position == -1)
-        {
-            break;
-        }
-    }
-    if (position == -1)
-    {
-        return QString();
-    }
-
-    return from.mid(position + 1);
-}
-
-void KompareModelList::setDepthAndApplied()
-{
-    // Splice to avoid calling ~DiffModelList
-    const QList<Diff2::DiffModel*> splicedModelList(*m_models);
-    for (DiffModel* model : splicedModelList) {
-        model->setSourceFile(lstripSeparators(model->source(), m_info->depth));
-        model->setDestinationFile(lstripSeparators(model->destination(), m_info->depth));
-        model->applyAllDifferences(m_info->applied);
-    }
-}
-
-bool KompareModelList::openFileAndDiff()
-{
-    clear();
-
-    if (parseDiffOutput(readFile(m_info->localDestination)) != 0)
-    {
-        Q_EMIT error(i18n("<qt>No models or no differences, this file: <b>%1</b>, is not a valid diff file.</qt>", m_info->destination.url()));
-        return false;
-    }
-
-    setDepthAndApplied();
-
-    if (!blendOriginalIntoModelList(m_info->localSource))
-    {
-        qCDebug(LIBKOMPAREDIFF2) << "Oops cant blend original file into modellist : " << m_info->localSource;
-        Q_EMIT error(i18n("<qt>There were problems applying the diff <b>%1</b> to the file <b>%2</b>.</qt>", m_info->destination.url(), m_info->source.url()));
-        return false;
-    }
-
-    updateModelListActions();
-    show();
-
-    return true;
-}
-
-bool KompareModelList::openDirAndDiff()
-{
-    clear();
-
-    if (parseDiffOutput(readFile(m_info->localDestination)) != 0)
-    {
-        Q_EMIT error(i18n("<qt>No models or no differences, this file: <b>%1</b>, is not a valid diff file.</qt>", m_info->destination.url()));
-        return false;
-    }
-
-    setDepthAndApplied();
-
-    // Do our thing :)
-    if (!blendOriginalIntoModelList(m_info->localSource))
-    {
-        // Trouble blending the original into the model
-        qCDebug(LIBKOMPAREDIFF2) << "Oops cant blend original dir into modellist : " << m_info->localSource;
-        Q_EMIT error(i18n("<qt>There were problems applying the diff <b>%1</b> to the folder <b>%2</b>.</qt>", m_info->destination.url(), m_info->source.url()));
-        return false;
-    }
-
-    updateModelListActions();
-    show();
-
-    return true;
-}
-
-void KompareModelList::slotSaveDestination()
-{
-    // Unnecessary safety check! We can now guarantee that saving is only possible when there is a model and there are unsaved changes
-    if (m_selectedModel)
-    {
-        saveDestination(m_selectedModel);
-        if (m_save) m_save->setEnabled(false);
-        Q_EMIT updateActions();
-    }
-}
-
-bool KompareModelList::saveDestination(DiffModel* model)
-{
-    qCDebug(LIBKOMPAREDIFF2) << "KompareModelList::saveDestination: ";
-
-    // Unnecessary safety check, we can guarantee there are unsaved changes!!!
-    if (!model->hasUnsavedChanges())
-        return true;
-
-    QTemporaryFile temp;
-
-    if (!temp.open()) {
-        Q_EMIT error(i18n("Could not open a temporary file."));
-        temp.remove();
-        return false;
-    }
-
-    QTextStream stream(&temp);
-    QStringList list;
-
-    DiffHunkListConstIterator hunkIt = model->hunks()->constBegin();
-    DiffHunkListConstIterator hEnd   = model->hunks()->constEnd();
-
-    for (; hunkIt != hEnd; ++hunkIt)
-    {
-        DiffHunk* hunk = *hunkIt;
-
-        DifferenceListConstIterator diffIt = hunk->differences().constBegin();
-        DifferenceListConstIterator dEnd   = hunk->differences().constEnd();
-
-        Difference* diff;
-        for (; diffIt != dEnd; ++diffIt)
-        {
-            diff = *diffIt;
-            if (!diff->applied())
-            {
-                DifferenceStringListConstIterator stringIt = diff->destinationLines().begin();
-                DifferenceStringListConstIterator sEnd     = diff->destinationLines().end();
-                for (; stringIt != sEnd; ++stringIt)
-                {
-                    list.append((*stringIt)->string());
-                }
-            }
-            else
-            {
-                DifferenceStringListConstIterator stringIt = diff->sourceLines().begin();
-                DifferenceStringListConstIterator sEnd = diff->sourceLines().end();
-                for (; stringIt != sEnd; ++stringIt)
-                {
-                    list.append((*stringIt)->string());
-                }
-            }
-        }
-    }
-
-    // qCDebug(LIBKOMPAREDIFF2) << "Everything: " << endl << list.join( "\n" );
-
-    if (list.count() > 0)
-        stream << list.join(QString());
-    if (temp.error() != QFile::NoError) {
-        Q_EMIT error(i18n("<qt>Could not write to the temporary file <b>%1</b>, deleting it.</qt>", temp.fileName()));
-        temp.remove();
-        return false;
-    }
-
-    temp.close();
-    if (temp.error() != QFile::NoError) {
-        Q_EMIT error(i18n("<qt>Could not write to the temporary file <b>%1</b>, deleting it.</qt>", temp.fileName()));
-        temp.remove();
-        return false;
-    }
-
-    bool result = false;
-
-    // Make sure the destination directory exists, it is possible when using -N to not have the destination dir/file available
-    if (m_info->mode == Kompare::ComparingDirs)
-    {
-        // Don't use destination which was used for creating the diff directly, use the original URL!!!
-        // FIXME!!! Wrong destination this way! Need to add the sub directory to the url!!!!
-        qCDebug(LIBKOMPAREDIFF2) << "Tempfilename (save) : " << temp.fileName();
-        qCDebug(LIBKOMPAREDIFF2) << "Model->path+file    : " << model->destinationPath() << model->destinationFile();
-        qCDebug(LIBKOMPAREDIFF2) << "info->localdest     : " << m_info->localDestination;
-        QString tmp = model->destinationPath();
-        if (tmp.startsWith(m_info->localDestination))     // It should, if not serious trouble...
-            tmp.remove(0, m_info->localDestination.size());
-        qCDebug(LIBKOMPAREDIFF2) << "DestinationURL      : " << m_info->destination;
-        qCDebug(LIBKOMPAREDIFF2) << "tmp                 : " << tmp;
-        KIO::UDSEntry entry;
-        QUrl fullDestinationPath = m_info->destination;
-        fullDestinationPath.setPath(fullDestinationPath.path() + tmp);
-        qCDebug(LIBKOMPAREDIFF2) << "fullDestinationPath : " << fullDestinationPath;
-        KIO::StatJob* statJob = KIO::stat(fullDestinationPath);
-        if (!statJob->exec())
-        {
-            entry = statJob->statResult();
-            KIO::MkdirJob* mkdirJob = KIO::mkdir(fullDestinationPath);
-            if (!mkdirJob->exec())
-            {
-                Q_EMIT error(i18n("<qt>Could not create destination directory <b>%1</b>.\nThe file has not been saved.</qt>", fullDestinationPath.path()));
-                return false;
-            }
-        }
-        fullDestinationPath.setPath(fullDestinationPath.path() + model->destinationFile());
-        KIO::FileCopyJob* copyJob = KIO::file_copy(QUrl::fromLocalFile(temp.fileName()), fullDestinationPath, -1, KIO::Overwrite);
-        result = copyJob->exec();
-    }
-    else
-    {
-        qCDebug(LIBKOMPAREDIFF2) << "Tempfilename   : " << temp.fileName();
-        qCDebug(LIBKOMPAREDIFF2) << "DestinationURL : " << m_info->destination;
-
-        // Get permissions of existing file and copy temporary file with the same permissions
-        int permissions = -1;
-        KIO::StatJob* statJob = KIO::stat(m_info->destination);
-        result = statJob->exec();
-        if (result)
-            permissions = statJob->statResult().numberValue(KIO::UDSEntry::UDS_ACCESS);
-
-        KIO::FileCopyJob* copyJob = KIO::file_copy(QUrl::fromLocalFile(temp.fileName()), m_info->destination , permissions, KIO::Overwrite);
-        result = copyJob->exec();
-        qCDebug(LIBKOMPAREDIFF2) << "true or false?" << result;
-    }
-
-    if (!result)
-    {
-        // FIXME: Wrong first argument given in case of comparing directories!
-        Q_EMIT error(i18n("<qt>Could not upload the temporary file to the destination location <b>%1</b>. The temporary file is still available under: <b>%2</b>. You can manually copy it to the right place.</qt>", m_info->destination.url(), temp.fileName()));
-        //Don't remove file when we delete temp and don't leak it.
-        temp.setAutoRemove(false);
-    }
-    else
-    {
-        temp.remove();
-    }
-
-    // If saving was fine set all differences to saved so we can start again with a clean slate
-    if (result)
-    {
-        DifferenceListConstIterator diffIt = model->differences()->constBegin();
-        DifferenceListConstIterator endIt  = model->differences()->constEnd();
-
-        for (; diffIt != endIt; ++diffIt)
-        {
-            (*diffIt)->setUnsaved(false);
-        }
-    }
-
-    return true;
-}
-
-bool KompareModelList::saveAll()
-{
-    if (modelCount() == 0)
-        return false;
-
-    DiffModelListIterator it  =  m_models->begin();
-    DiffModelListIterator end =  m_models->end();
-    for (; it != end; ++it)
-    {
-        if (!saveDestination(*it))
-            return false;
-    }
-
-    return true;
-}
-
-void KompareModelList::setEncoding(const QString& encoding)
-{
-    m_encoding = encoding;
-    if (!encoding.compare(QLatin1String("default"), Qt::CaseInsensitive))
-    {
-        m_textCodec = QTextCodec::codecForLocale();
-    }
-    else
-    {
-        qCDebug(LIBKOMPAREDIFF2) << "Encoding : " << encoding;
-        m_textCodec = QTextCodec::codecForName(encoding.toUtf8());
-        qCDebug(LIBKOMPAREDIFF2) << "TextCodec: " << m_textCodec;
-        if (!m_textCodec)
-            m_textCodec = QTextCodec::codecForLocale();
-    }
-    qCDebug(LIBKOMPAREDIFF2) << "TextCodec: " << m_textCodec;
-}
-
-void KompareModelList::setReadWrite(bool isReadWrite)
-{
-    if (m_isReadWrite == isReadWrite)
-        return;
-
-    m_isReadWrite = isReadWrite;
-    updateModelListActions();
-}
-
-bool KompareModelList::isReadWrite() const
-{
-    return m_isReadWrite;
-}
-
-void KompareModelList::slotDiffProcessFinished(bool success)
-{
-    if (success)
-    {
-        Q_EMIT status(Kompare::Parsing);
-        if (parseDiffOutput(m_diffProcess->diffOutput()) != 0)
-        {
-            Q_EMIT error(i18n("Could not parse diff output."));
-        }
-        else
-        {
-            if (m_info->mode != Kompare::ShowingDiff)
-            {
-                qCDebug(LIBKOMPAREDIFF2) << "Blend this crap please and do not give me any conflicts...";
-                blendOriginalIntoModelList(m_info->localSource);
-            }
-            updateModelListActions();
-            show();
-        }
-        Q_EMIT status(Kompare::FinishedParsing);
-    }
-    else if (m_diffProcess->exitStatus() == 0)
-    {
-        Q_EMIT error(i18n("The files are identical."));
-    }
-    else
-    {
-        Q_EMIT error(m_diffProcess->stdErr());
-    }
-
-    m_diffProcess->deleteLater();
-    m_diffProcess = nullptr;
-}
-
-void KompareModelList::slotDirectoryChanged(const QString& /*dir*/)
-{
-    // some debug output to see if watching works properly
-    qCDebug(LIBKOMPAREDIFF2) << "Yippie directories are being watched !!! :)";
-    if (m_diffProcess)
-    {
-        Q_EMIT status(Kompare::ReRunningDiff);
-        m_diffProcess->start();
-    }
-}
-
-void KompareModelList::slotFileChanged(const QString& /*file*/)
-{
-    // some debug output to see if watching works properly
-    qCDebug(LIBKOMPAREDIFF2) << "Yippie files are being watched !!! :)";
-    if (m_diffProcess)
-    {
-        Q_EMIT status(Kompare::ReRunningDiff);
-        m_diffProcess->start();
-    }
-}
-
-QStringList KompareModelList::split(const QString& fileContents)
-{
-    QString contents = fileContents;
-    QStringList list;
-
-    int pos = 0;
-    int oldpos = 0;
-    // split that does not strip the split char
-#ifdef QT_OS_MAC
-    const char split = '\r';
-#else
-    const char split = '\n';
-#endif
-    while ((pos = contents.indexOf(QLatin1Char(split), oldpos)) >= 0)
-    {
-        list.append(contents.mid(oldpos, pos - oldpos + 1));
-        oldpos = pos + 1;
-    }
-
-    if (contents.length() > oldpos)
-    {
-        list.append(contents.right(contents.length() - oldpos));
-    }
-
-    return list;
-}
-
-QString KompareModelList::readFile(const QString& fileName)
-{
-    QStringList list;
-
-    QFile file(fileName);
-    file.open(QIODevice::ReadOnly);
-
-    qCDebug(LIBKOMPAREDIFF2) << "Codec = " << m_textCodec;
-    if (!m_textCodec)
-        m_textCodec = QTextCodec::codecForLocale();
-    std::unique_ptr<QTextDecoder> decoder(m_textCodec->makeDecoder());
-
-    QString contents;
-    while (!file.atEnd()) {
-        char buffer[4096];
-        const auto len = file.read(buffer, 4096);
-        contents += decoder->toUnicode(buffer, len);
-    }
-
-    file.close();
-
-    return contents;
-}
-
-bool KompareModelList::openDiff(const QString& diffFile)
-{
-    qCDebug(LIBKOMPAREDIFF2) << "Stupid :) Url = " << diffFile;
-
-    if (diffFile.isEmpty())
-        return false;
-
-    QString diff = readFile(diffFile);
-
-    clear(); // Clear the current models
-
-    Q_EMIT status(Kompare::Parsing);
-
-    if (parseDiffOutput(diff) != 0)
-    {
-        Q_EMIT error(i18n("Could not parse diff output."));
-        return false;
-    }
-
-    updateModelListActions();
-    show();
-
-    Q_EMIT status(Kompare::FinishedParsing);
-
-    return true;
-}
-
-bool KompareModelList::parseAndOpenDiff(const QString& diff)
-{
-    clear(); // Clear the current models
-
-    Q_EMIT status(Kompare::Parsing);
-
-    if (parseDiffOutput(diff) != 0)
-    {
-        Q_EMIT error(i18n("Could not parse diff output."));
-        return false;
-    }
-
-    updateModelListActions();
-    show();
-
-    Q_EMIT status(Kompare::FinishedParsing);
-    return true;
-}
-
-QString KompareModelList::recreateDiff() const
-{
-    QString diff;
-
-    DiffModelListConstIterator modelIt = m_models->constBegin();
-    DiffModelListConstIterator mEnd    = m_models->constEnd();
-
-    for (; modelIt != mEnd; ++modelIt)
-    {
-        diff += (*modelIt)->recreateDiff();
-    }
-    return diff;
-}
-
-bool KompareModelList::saveDiff(const QString& url, QString directory, DiffSettings* diffSettings)
-{
-    qCDebug(LIBKOMPAREDIFF2) << "KompareModelList::saveDiff: ";
-
-    m_diffTemp = new QTemporaryFile();
-    m_diffURL = QUrl(url); // ### TODO the "url" argument should be a QUrl
-
-    if (!m_diffTemp->open()) {
-        Q_EMIT error(i18n("Could not open a temporary file."));
-        m_diffTemp->remove();
-        delete m_diffTemp;
-        m_diffTemp = nullptr;
-        return false;
-    }
-
-    m_diffProcess = new KompareProcess(diffSettings, Kompare::Custom, m_info->localSource, m_info->localDestination, directory);
-    m_diffProcess->setEncoding(m_encoding);
-
-    connect(m_diffProcess, &KompareProcess::diffHasFinished,
-            this, &KompareModelList::slotWriteDiffOutput);
-
-    Q_EMIT status(Kompare::RunningDiff);
-    m_diffProcess->start();
-    return true;
-}
-
-void KompareModelList::slotWriteDiffOutput(bool success)
-{
-    qCDebug(LIBKOMPAREDIFF2) << "Success = " << success;
-
-    if (success)
-    {
-        QTextStream stream(m_diffTemp);
-
-        stream << m_diffProcess->diffOutput();
-
-        m_diffTemp->close();
-
-        if (false /*|| m_diffTemp->status() != 0 */)
-        {
-            Q_EMIT error(i18n("Could not write to the temporary file."));
-        }
-
-        KIO::FileCopyJob* copyJob = KIO::file_copy(QUrl::fromLocalFile(m_diffTemp->fileName()), m_diffURL);
-        copyJob->exec();
-
-        Q_EMIT status(Kompare::FinishedWritingDiff);
-    }
-
-    m_diffURL = QUrl();
-    m_diffTemp->remove();
-
-    delete m_diffTemp;
-    m_diffTemp = nullptr;
-
-    delete m_diffProcess;
-    m_diffProcess = nullptr;
-}
-
-void KompareModelList::slotSelectionChanged(const Diff2::DiffModel* model, const Diff2::Difference* diff)
-{
-// This method will signal all the other objects about a change in selection,
-// it will Q_EMIT setSelection( const DiffModel*, const Difference* ) to all who are connected
-    qCDebug(LIBKOMPAREDIFF2) << "KompareModelList::slotSelectionChanged( " << model << ", " << diff << " )";
-    qCDebug(LIBKOMPAREDIFF2) << "Sender is : " << sender()->metaObject()->className();
-//     qCDebug(LIBKOMPAREDIFF2) << kBacktrace();
-
-    m_selectedModel = const_cast<DiffModel*>(model);
-    m_modelIndex = m_models->indexOf(m_selectedModel);
-    qCDebug(LIBKOMPAREDIFF2) << "m_modelIndex = " << m_modelIndex;
-    m_selectedDifference = const_cast<Difference*>(diff);
-
-    m_selectedModel->setSelectedDifference(m_selectedDifference);
-
-    // setSelected* search for the argument in the lists and return false if not found
-    // if found they return true and set the m_selected*
-    if (!setSelectedModel(m_selectedModel))
-    {
-        // Backup plan
-        m_selectedModel = firstModel();
-        m_selectedDifference = m_selectedModel->firstDifference();
-    }
-    else if (!m_selectedModel->setSelectedDifference(m_selectedDifference))
-    {
-        // Another backup plan
-        m_selectedDifference = m_selectedModel->firstDifference();
-    }
-
-    Q_EMIT setSelection(model, diff);
-    Q_EMIT setStatusBarModelInfo(findModel(m_selectedModel), m_selectedModel->findDifference(m_selectedDifference), modelCount(), differenceCount(), m_selectedModel->appliedCount());
-
-    updateModelListActions();
-}
-
-void KompareModelList::slotSelectionChanged(const Diff2::Difference* diff)
-{
-// This method will Q_EMIT setSelection( const Difference* ) to whomever is listening
-// when for instance in kompareview the selection has changed
-    qCDebug(LIBKOMPAREDIFF2) << "KompareModelList::slotSelectionChanged( " << diff << " )";
-    qCDebug(LIBKOMPAREDIFF2) << "Sender is : " << sender()->metaObject()->className();
-
-    m_selectedDifference = const_cast<Difference*>(diff);
-
-    if (!m_selectedModel->setSelectedDifference(m_selectedDifference))
-    {
-        // Backup plan
-        m_selectedDifference = m_selectedModel->firstDifference();
-    }
-
-    Q_EMIT setSelection(diff);
-    Q_EMIT setStatusBarModelInfo(findModel(m_selectedModel), m_selectedModel->findDifference(m_selectedDifference), modelCount(), differenceCount(), m_selectedModel->appliedCount());
-
-    updateModelListActions();
-}
-
-void KompareModelList::slotPreviousModel()
-{
-    if ((m_selectedModel = prevModel()) != nullptr)
-    {
-        m_selectedDifference = m_selectedModel->firstDifference();
-    }
-    else
-    {
-        m_selectedModel = firstModel();
-        m_selectedDifference = m_selectedModel->firstDifference();
-    }
-
-    Q_EMIT setSelection(m_selectedModel, m_selectedDifference);
-    Q_EMIT setStatusBarModelInfo(findModel(m_selectedModel), m_selectedModel->findDifference(m_selectedDifference), modelCount(), differenceCount(), m_selectedModel->appliedCount());
-    updateModelListActions();
-}
-
-void KompareModelList::slotNextModel()
-{
-    if ((m_selectedModel = nextModel()) != nullptr)
-    {
-        m_selectedDifference = m_selectedModel->firstDifference();
-    }
-    else
-    {
-        m_selectedModel = lastModel();
-        m_selectedDifference = m_selectedModel->firstDifference();
-    }
-
-    Q_EMIT setSelection(m_selectedModel, m_selectedDifference);
-    Q_EMIT setStatusBarModelInfo(findModel(m_selectedModel), m_selectedModel->findDifference(m_selectedDifference), modelCount(), differenceCount(), m_selectedModel->appliedCount());
-    updateModelListActions();
-}
-
-DiffModel* KompareModelList::firstModel()
-{
-    qCDebug(LIBKOMPAREDIFF2) << "KompareModelList::firstModel()";
-    m_modelIndex = 0;
-    qCDebug(LIBKOMPAREDIFF2) << "m_modelIndex = " << m_modelIndex;
-
-    m_selectedModel = m_models->first();
-
-    return m_selectedModel;
-}
-
-DiffModel* KompareModelList::lastModel()
-{
-    qCDebug(LIBKOMPAREDIFF2) << "KompareModelList::lastModel()";
-    m_modelIndex = m_models->count() - 1;
-    qCDebug(LIBKOMPAREDIFF2) << "m_modelIndex = " << m_modelIndex;
-
-    m_selectedModel = m_models->last();
-
-    return m_selectedModel;
-}
-
-DiffModel* KompareModelList::prevModel()
-{
-    qCDebug(LIBKOMPAREDIFF2) << "KompareModelList::prevModel()";
-    if (m_modelIndex > 0 && --m_modelIndex < m_models->count())
-    {
-        qCDebug(LIBKOMPAREDIFF2) << "m_modelIndex = " << m_modelIndex;
-        m_selectedModel = (*m_models)[ m_modelIndex ];
-    }
-    else
-    {
-        m_selectedModel = nullptr;
-        m_modelIndex = 0;
-        qCDebug(LIBKOMPAREDIFF2) << "m_modelIndex = " << m_modelIndex;
-    }
-
-    return m_selectedModel;
-}
-
-DiffModel* KompareModelList::nextModel()
-{
-    qCDebug(LIBKOMPAREDIFF2) << "KompareModelList::nextModel()";
-    if (++m_modelIndex < m_models->count())
-    {
-        qCDebug(LIBKOMPAREDIFF2) << "m_modelIndex = " << m_modelIndex;
-        m_selectedModel = (*m_models)[ m_modelIndex ];
-    }
-    else
-    {
-        m_selectedModel = nullptr;
-        m_modelIndex = 0;
-        qCDebug(LIBKOMPAREDIFF2) << "m_modelIndex = " << m_modelIndex;
-    }
-
-    return m_selectedModel;
-}
-
-KActionCollection* KompareModelList::actionCollection() const
-{
-    return m_actionCollection;
-}
-
-void KompareModelList::slotPreviousDifference()
-{
-    qCDebug(LIBKOMPAREDIFF2) << "slotPreviousDifference called";
-    if ((m_selectedDifference = m_selectedModel->prevDifference()) != nullptr)
-    {
-        Q_EMIT setSelection(m_selectedDifference);
-        Q_EMIT setStatusBarModelInfo(findModel(m_selectedModel), m_selectedModel->findDifference(m_selectedDifference), modelCount(), differenceCount(), m_selectedModel->appliedCount());
-        updateModelListActions();
-        return;
-    }
-
-    qCDebug(LIBKOMPAREDIFF2) << "**** no previous difference... ok lets find the previous model...";
-
-    if ((m_selectedModel = prevModel()) != nullptr)
-    {
-        m_selectedDifference = m_selectedModel->lastDifference();
-
-        Q_EMIT setSelection(m_selectedModel, m_selectedDifference);
-        Q_EMIT setStatusBarModelInfo(findModel(m_selectedModel), m_selectedModel->findDifference(m_selectedDifference), modelCount(), differenceCount(), m_selectedModel->appliedCount());
-        updateModelListActions();
-        return;
-    }
-
-
-    qCDebug(LIBKOMPAREDIFF2) << "**** !!! No previous model, ok backup plan activated...";
-
-    // Backup plan
-    m_selectedModel = firstModel();
-    m_selectedDifference = m_selectedModel->firstDifference();
-
-    Q_EMIT setSelection(m_selectedModel, m_selectedDifference);
-    Q_EMIT setStatusBarModelInfo(findModel(m_selectedModel), m_selectedModel->findDifference(m_selectedDifference), modelCount(), differenceCount(), m_selectedModel->appliedCount());
-    updateModelListActions();
-}
-
-void KompareModelList::slotNextDifference()
-{
-    qCDebug(LIBKOMPAREDIFF2) << "slotNextDifference called";
-    if ((m_selectedDifference = m_selectedModel->nextDifference()) != nullptr)
-    {
-        Q_EMIT setSelection(m_selectedDifference);
-        Q_EMIT setStatusBarModelInfo(findModel(m_selectedModel), m_selectedModel->findDifference(m_selectedDifference), modelCount(), differenceCount(), m_selectedModel->appliedCount());
-        updateModelListActions();
-        return;
-    }
-
-    qCDebug(LIBKOMPAREDIFF2) << "**** no next difference... ok lets find the next model...";
-
-    if ((m_selectedModel = nextModel()) != nullptr)
-    {
-        m_selectedDifference = m_selectedModel->firstDifference();
-
-        Q_EMIT setSelection(m_selectedModel, m_selectedDifference);
-        Q_EMIT setStatusBarModelInfo(findModel(m_selectedModel), m_selectedModel->findDifference(m_selectedDifference), modelCount(), differenceCount(), m_selectedModel->appliedCount());
-        updateModelListActions();
-        return;
-    }
-
-    qCDebug(LIBKOMPAREDIFF2) << "**** !!! No next model, ok backup plan activated...";
-
-    // Backup plan
-    m_selectedModel = lastModel();
-    m_selectedDifference = m_selectedModel->lastDifference();
-
-    Q_EMIT setSelection(m_selectedModel, m_selectedDifference);
-    Q_EMIT setStatusBarModelInfo(findModel(m_selectedModel), m_selectedModel->findDifference(m_selectedDifference), modelCount(), differenceCount(), m_selectedModel->appliedCount());
-    updateModelListActions();
-}
-
-void KompareModelList::slotApplyDifference(bool apply)
-{
-    m_selectedModel->applyDifference(apply);
-    Q_EMIT applyDifference(apply);
-}
-
-void KompareModelList::slotApplyAllDifferences(bool apply)
-{
-    m_selectedModel->applyAllDifferences(apply);
-    Q_EMIT applyAllDifferences(apply);
-}
-
-int KompareModelList::parseDiffOutput(const QString& diff)
-{
-    qCDebug(LIBKOMPAREDIFF2) << "KompareModelList::parseDiffOutput";
-    Q_EMIT diffString(diff);
-
-    QStringList diffLines = split(diff);
-
-    Parser* parser = new Parser(this);
-    bool malformed = false;
-    m_models = parser->parse(diffLines, &malformed);
-
-    m_info->generator = parser->generator();
-    m_info->format    = parser->format();
-
-    delete parser;
-
-    if (m_models)
-    {
-        if (malformed)
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Malformed diff";
-            Q_EMIT error(i18n("The diff is malformed. Some lines could not be parsed and will not be displayed in the diff view."));
-            // proceed anyway with the lines which have been parsed
-        }
-        m_selectedModel = firstModel();
-        qCDebug(LIBKOMPAREDIFF2) << "Ok there are differences...";
-        m_selectedDifference = m_selectedModel->firstDifference();
-        Q_EMIT setStatusBarModelInfo(0, 0, modelCount(), differenceCount(), 0);
-    }
-    else
-    {
-        // Wow trouble, no models, so no differences...
-        qCDebug(LIBKOMPAREDIFF2) << "Now i'll be damned, there should be models here !!!";
-        return -1;
-    }
-
-    return 0;
-}
-
-bool KompareModelList::blendOriginalIntoModelList(const QString& localURL)
-{
-    qCDebug(LIBKOMPAREDIFF2) << "Hurrah we are blending...";
-    QFileInfo fi(localURL);
-
-    bool result = false;
-    DiffModel* model;
-
-    QString fileContents;
-
-    if (fi.isDir())
-    {   // is a dir
-        qCDebug(LIBKOMPAREDIFF2) << "Blend Dir";
-//      QDir dir( localURL, QString(), QDir::Name|QDir::DirsFirst, QDir::TypeMask );
-        DiffModelListIterator modelIt = m_models->begin();
-        DiffModelListIterator mEnd    = m_models->end();
-        for (; modelIt != mEnd; ++modelIt)
-        {
-            model = *modelIt;
-            qCDebug(LIBKOMPAREDIFF2) << "Model : " << model;
-            QString filename = model->source();
-            if (!filename.startsWith(localURL))
-                filename = QDir(localURL).filePath(filename);
-            QFileInfo fi2(filename);
-            if (fi2.exists())
-            {
-                qCDebug(LIBKOMPAREDIFF2) << "Reading from: " << filename;
-                fileContents = readFile(filename);
-                result = blendFile(model, fileContents);
-            }
-            else
-            {
-                qCDebug(LIBKOMPAREDIFF2) << "File " << filename << " does not exist !";
-                qCDebug(LIBKOMPAREDIFF2) << "Assume empty file !";
-                fileContents.truncate(0);
-                result = blendFile(model, fileContents);
-            }
-        }
-        qCDebug(LIBKOMPAREDIFF2) << "End of Blend Dir";
-    }
-    else if (fi.isFile())
-    {   // is a file
-        qCDebug(LIBKOMPAREDIFF2) << "Blend File";
-        qCDebug(LIBKOMPAREDIFF2) << "Reading from: " << localURL;
-        fileContents = readFile(localURL);
-
-        result = blendFile((*m_models)[ 0 ], fileContents);
-        qCDebug(LIBKOMPAREDIFF2) << "End of Blend File";
-    }
-
-    return result;
-}
-
-bool KompareModelList::blendFile(DiffModel* model, const QString& fileContents)
-{
-    if (!model)
-    {
-        qCDebug(LIBKOMPAREDIFF2) << "**** model is null :(";
-        return false;
-    }
-
-    model->setBlended(true);
-
-    int srcLineNo = 1, destLineNo = 1;
-
-    const QStringList lines = split(fileContents);
-    auto linesIt = lines.constBegin(), lEnd = lines.constEnd();
-
-    DiffHunkList* hunks = model->hunks();
-    qCDebug(LIBKOMPAREDIFF2) << "Hunks in hunklist: " << hunks->count();
-    DiffHunkListIterator hunkIt = hunks->begin();
-
-    DiffHunk*   newHunk = nullptr;
-    Difference* newDiff = nullptr;
-
-    // FIXME: this approach is not very good, we should first check if the hunk applies cleanly
-    // and without offset and if not use that new linenumber with offset to compare against
-    // This will only work for files we just diffed with kompare but not for blending where
-    // file(s) to patch has/have potentially changed
-
-    for (; hunkIt != hunks->end(); ++hunkIt)
-    {
-        // Do we need to insert a new hunk before this one ?
-        DiffHunk* hunk = *hunkIt;
-        if (srcLineNo < hunk->sourceLineNumber())
-        {
-            newHunk = new DiffHunk(srcLineNo, destLineNo, QString(), DiffHunk::AddedByBlend);
-
-            hunkIt = ++hunks->insert(hunkIt, newHunk);
-
-            newDiff = new Difference(srcLineNo, destLineNo,
-                                     Difference::Unchanged);
-
-            newHunk->add(newDiff);
-
-            while (srcLineNo < hunk->sourceLineNumber() && linesIt != lEnd)
-            {
-                newDiff->addSourceLine(*linesIt);
-                newDiff->addDestinationLine(*linesIt);
-                ++srcLineNo;
-                ++destLineNo;
-                ++linesIt;
-            }
-        }
-
-        // Now we add the linecount difference for the hunk that follows
-        int size = hunk->sourceLineCount();
-
-        linesIt += size;
-        if (linesIt > lEnd)
-        {
-            linesIt = lEnd;
-        }
-
-        srcLineNo += size;
-        destLineNo += hunk->destinationLineCount();
-    }
-
-    if (linesIt != lEnd)
-    {
-        newHunk = new DiffHunk(srcLineNo, destLineNo, QString(), DiffHunk::AddedByBlend);
-
-        model->addHunk(newHunk);
-
-        newDiff = new Difference(srcLineNo, destLineNo, Difference::Unchanged);
-
-        newHunk->add(newDiff);
-
-        while (linesIt != lEnd)
-        {
-            newDiff->addSourceLine(*linesIt);
-            newDiff->addDestinationLine(*linesIt);
-            ++linesIt;
-        }
-    }
-#if 0
-    DifferenceList hunkDiffList   = (*hunkIt)->differences();
-    DifferenceListIterator diffIt = hunkDiffList.begin();
-    DifferenceListIterator dEnd   = hunkDiffList.end();
-    qCDebug(LIBKOMPAREDIFF2) << "Number of differences in hunkDiffList = " << diffList.count();
-
-    DifferenceListIterator tempIt;
-    Difference* diff;
-
-    for (; diffIt != dEnd; ++diffIt)
-    {
-        diff = *diffIt;
-        qCDebug(LIBKOMPAREDIFF2) << "*(Diff it) = " << diff;
-        // Check if there are lines in the original file before the difference
-        // that are not yet in the diff. If so create new Unchanged diff
-        if (srcLineNo < diff->sourceLineNumber())
-        {
-            newDiff = new Difference(srcLineNo, destLineNo,
-                                     Difference::Unchanged | Difference::AddedByBlend);
-            newHunk->add(newDiff);
-            while (srcLineNo < diff->sourceLineNumber() && linesIt != lEnd)
-            {
-//                  qCDebug(LIBKOMPAREDIFF2) << "SourceLine = " << srcLineNo << ": " << *linesIt;
-                newDiff->addSourceLine(*linesIt);
-                newDiff->addDestinationLine(*linesIt);
-                ++srcLineNo;
-                ++destLineNo;
-                ++linesIt;
-            }
-        }
-        // Now i've got to add that diff
-        switch (diff->type())
-        {
-        case Difference::Unchanged:
-            qCDebug(LIBKOMPAREDIFF2) << "Unchanged";
-            for (int i = 0; i < diff->sourceLineCount(); ++i)
-            {
-                if (linesIt != lEnd && *linesIt != diff->sourceLineAt(i)->string())
-                {
-                    qCDebug(LIBKOMPAREDIFF2) << "Conflict: SourceLine = " << srcLineNo << ": " << *linesIt;
-                    qCDebug(LIBKOMPAREDIFF2) << "Conflict: DiffLine   = " << diff->sourceLineNumber() + i << ": " << diff->sourceLineAt(i)->string();
-
-                    // Do conflict resolution (well sort of)
-                    diff->sourceLineAt(i)->setConflictString(*linesIt);
-                    diff->setConflict(true);
-                }
-//                  qCDebug(LIBKOMPAREDIFF2) << "SourceLine = " << srcLineNo << ": " << *linesIt;
-//                  qCDebug(LIBKOMPAREDIFF2) << "DiffLine   = " << diff->sourceLineNumber() + i << ": " << diff->sourceLineAt( i )->string();
-                ++srcLineNo;
-                ++destLineNo;
-                ++linesIt;
-            }
-
-            tempIt = diffIt;
-            --diffIt;
-            diffList.remove(tempIt);
-            newHunk->add(diff);
-
-            break;
-        case Difference::Change:
-            qCDebug(LIBKOMPAREDIFF2) << "Change";
-
-            //QStringListConstIterator saveIt = linesIt;
-
-            for (int i = 0; i < diff->sourceLineCount(); ++i)
-            {
-                if (linesIt != lEnd && *linesIt != diff->sourceLineAt(i)->string())
-                {
-                    qCDebug(LIBKOMPAREDIFF2) << "Conflict: SourceLine = " << srcLineNo << ": " << *linesIt;
-                    qCDebug(LIBKOMPAREDIFF2) << "Conflict: DiffLine   = " << diff->sourceLineNumber() + i << ": " << diff->sourceLineAt(i)->string();
-
-                    // Do conflict resolution (well sort of)
-                    diff->sourceLineAt(i)->setConflictString(*linesIt);
-                    diff->setConflict(true);
-                }
-                ++srcLineNo;
-                ++destLineNo;
-                ++linesIt;
-            }
-
-            destLineNo += diff->destinationLineCount();
-
-            tempIt = diffIt;
-            --diffIt;
-            diffList.remove(tempIt);
-            newHunk->add(diff);
-            newModel->addDiff(diff);
-
-            break;
-        case Difference::Insert:
-            qCDebug(LIBKOMPAREDIFF2) << "Insert";
-            destLineNo += diff->destinationLineCount();
-            tempIt = diffIt;
-            --diffIt;
-            diffList.remove(tempIt);
-            newHunk->add(diff);
-            newModel->addDiff(diff);
-            break;
-        case Difference::Delete:
-            qCDebug(LIBKOMPAREDIFF2) << "Delete";
-            qCDebug(LIBKOMPAREDIFF2) << "Number of lines in Delete: " << diff->sourceLineCount();
-            for (int i = 0; i < diff->sourceLineCount(); ++i)
-            {
-                if (linesIt != lEnd && *linesIt != diff->sourceLineAt(i)->string())
-                {
-                    qCDebug(LIBKOMPAREDIFF2) << "Conflict: SourceLine = " << srcLineNo << ": " << *linesIt;
-                    qCDebug(LIBKOMPAREDIFF2) << "Conflict: DiffLine   = " << diff->sourceLineNumber() + i << ": " << diff->sourceLineAt(i)->string();
-
-                    // Do conflict resolution (well sort of)
-                    diff->sourceLineAt(i)->setConflictString(*linesIt);
-                    diff->setConflict(true);
-                }
-
-//                  qCDebug(LIBKOMPAREDIFF2) << "SourceLine = " << srcLineNo << ": " << *it;
-//                  qCDebug(LIBKOMPAREDIFF2) << "DiffLine   = " << diff->sourceLineNumber() + i << ": " << diff->sourceLineAt( i )->string();
-                ++srcLineNo;
-                ++linesIt;
-            }
-
-            tempIt = diffIt;
-            --diffIt;
-            diffList.remove(tempIt);
-            newHunk->add(diff);
-            newModel->addDiff(diff);
-            break;
-        default:
-            qCDebug(LIBKOMPAREDIFF2) << "****, some diff type we do not know about ???";
-        }
-    }
-}
-#endif
-
-/*
-    diffList = newModel->differences();
-
-    diff = diffList.first();
-    qCDebug(LIBKOMPAREDIFF2) << "Count = " << diffList.count();
-    for ( diff = diffList.first(); diff; diff = diffList.next() )
-    {
-        qCDebug(LIBKOMPAREDIFF2) << "sourcelinenumber = " << diff->sourceLineNumber();
-    }
-*/
-
-m_selectedModel = firstModel();
-
-m_selectedDifference = m_selectedModel->firstDifference();
-
-return true;
-}
-
-void KompareModelList::show()
-{
-    qCDebug(LIBKOMPAREDIFF2) << "KompareModelList::Show Number of models = " << m_models->count();
-    Q_EMIT modelsChanged(m_models);
-    Q_EMIT setSelection(m_selectedModel, m_selectedDifference);
-}
-
-void KompareModelList::clear()
-{
-    if (m_models)
-        m_models->clear();
-
-    Q_EMIT modelsChanged(m_models);
-}
-
-void KompareModelList::refresh()
-{
-    // FIXME: I can imagine blending also wants to be refreshed so make a switch case here
-    compare(m_info->mode);
-}
-
-void KompareModelList::swap()
-{
-    //FIXME Not sure if any mode could be swapped
-    if (m_info->mode == Kompare::ComparingFiles)
-        compare(m_info->mode);
-    else if (m_info->mode == Kompare::ComparingDirs)
-        compare(m_info->mode);
-}
-
-bool KompareModelList::hasUnsavedChanges() const
-{
-    if (modelCount() == 0)
-        return false;
-
-    DiffModelListConstIterator modelIt = m_models->constBegin();
-    DiffModelListConstIterator endIt   = m_models->constEnd();
-
-    for (; modelIt != endIt; ++modelIt)
-    {
-        if ((*modelIt)->hasUnsavedChanges())
-            return true;
-    }
-    return false;
-}
-
-int KompareModelList::modelCount() const
-{
-    return m_models ? m_models->count() : 0;
-}
-
-int KompareModelList::differenceCount() const
-{
-    return m_selectedModel ? m_selectedModel->differenceCount() : -1;
-}
-
-int KompareModelList::appliedCount() const
-{
-    return m_selectedModel ? m_selectedModel->appliedCount() : -1;
-}
-
-void KompareModelList::slotKompareInfo(struct Kompare::Info* info)
-{
-    m_info = info;
-}
-
-bool KompareModelList::setSelectedModel(DiffModel* model)
-{
-    qCDebug(LIBKOMPAREDIFF2) << "KompareModelList::setSelectedModel( " << model << " )";
-
-    if (model != m_selectedModel)
-    {
-        if (!m_models->contains(model))
-            return false;
-        qCDebug(LIBKOMPAREDIFF2) << "m_selectedModel (was) = " << m_selectedModel;
-        m_modelIndex = m_models->indexOf(model);
-        qCDebug(LIBKOMPAREDIFF2) << "m_selectedModel (is)  = " << m_selectedModel;
-        m_selectedModel = model;
-    }
-
-    updateModelListActions();
-
-    return true;
-}
-
-void KompareModelList::updateModelListActions()
-{
-    if (m_models && m_selectedModel && m_selectedDifference)
-    {
-        if (m_isReadWrite && m_save)
-        {
-            if (m_selectedModel->appliedCount() != m_selectedModel->differenceCount())
-                m_applyAll->setEnabled(true);
-            else
-                m_applyAll->setEnabled(false);
-
-            if (m_selectedModel->appliedCount() != 0)
-                m_unapplyAll->setEnabled(true);
-            else
-                m_unapplyAll->setEnabled(false);
-
-            m_applyDifference->setEnabled(m_selectedDifference->applied() == false);
-            m_unApplyDifference->setEnabled(m_selectedDifference->applied() == true);
-            m_save->setEnabled(m_selectedModel->hasUnsavedChanges());
-        }
-        else if (m_save)
-        {
-            m_applyDifference->setEnabled(false);
-            m_unApplyDifference->setEnabled(false);
-            m_applyAll->setEnabled(false);
-            m_unapplyAll->setEnabled(false);
-            m_save->setEnabled(false);
-        }
-
-        m_previousFile->setEnabled(hasPrevModel());
-        m_nextFile->setEnabled(hasNextModel());
-        m_previousDifference->setEnabled(hasPrevDiff());
-        m_nextDifference->setEnabled(hasNextDiff());
-    }
-    else
-    {
-        if (m_save) {
-            m_applyDifference->setEnabled(false);
-            m_unApplyDifference->setEnabled(false);
-            m_applyAll->setEnabled(false);
-            m_unapplyAll->setEnabled(false);
-            m_save->setEnabled(false);
-        }
-
-        m_previousFile->setEnabled(false);
-        m_nextFile->setEnabled(false);
-        m_previousDifference->setEnabled(false);
-        m_nextDifference->setEnabled(false);
-    }
-}
-
-bool KompareModelList::hasPrevModel() const
-{
-    qCDebug(LIBKOMPAREDIFF2) << "KompareModelList::hasPrevModel()";
-
-    if (m_modelIndex > 0)
-    {
-//         qCDebug(LIBKOMPAREDIFF2) << "has prev model";
-        return true;
-    }
-
-//     qCDebug(LIBKOMPAREDIFF2) << "doesn't have a prev model, this is the first one...";
-
-    return false;
-}
-
-bool KompareModelList::hasNextModel() const
-{
-    qCDebug(LIBKOMPAREDIFF2) << "KompareModelList::hasNextModel()";
-
-    if (m_modelIndex < (m_models->count() - 1))
-    {
-//         qCDebug(LIBKOMPAREDIFF2) << "has next model";
-        return true;
-    }
-
-//     qCDebug(LIBKOMPAREDIFF2) << "doesn't have a next model, this is the last one...";
-    return false;
-}
-
-bool KompareModelList::hasPrevDiff() const
-{
-//     qCDebug(LIBKOMPAREDIFF2) << "KompareModelList::hasPrevDiff()";
-    int index = m_selectedModel->diffIndex();
-
-    if (index > 0)
-    {
-//         qCDebug(LIBKOMPAREDIFF2) << "has prev difference in same model";
-        return true;
-    }
-
-    if (hasPrevModel())
-    {
-//         qCDebug(LIBKOMPAREDIFF2) << "has prev difference but in prev model";
-        return true;
-    }
-
-//     qCDebug(LIBKOMPAREDIFF2) << "doesn't have a prev difference, not even in the previous model because there is no previous model";
-
-    return false;
-}
-
-bool KompareModelList::hasNextDiff() const
-{
-//     qCDebug(LIBKOMPAREDIFF2) << "KompareModelList::hasNextDiff()";
-    int index = m_selectedModel->diffIndex();
-
-    if (index < (m_selectedModel->differenceCount() - 1))
-    {
-//         qCDebug(LIBKOMPAREDIFF2) << "has next difference in same model";
-        return true;
-    }
-
-    if (hasNextModel())
-    {
-//         qCDebug(LIBKOMPAREDIFF2) << "has next difference but in next model";
-        return true;
-    }
-
-//     qCDebug(LIBKOMPAREDIFF2) << "doesn't have a next difference, not even in next model because there is no next model";
-
-    return false;
-}
-
-void KompareModelList::slotActionApplyDifference()
-{
-    if (!m_selectedDifference->applied())
-        slotApplyDifference(true);
-    slotNextDifference();
-    updateModelListActions();
-}
-
-void KompareModelList::slotActionUnApplyDifference()
-{
-    if (m_selectedDifference->applied())
-        slotApplyDifference(false);
-    slotPreviousDifference();
-    updateModelListActions();
-}
-
-void KompareModelList::slotActionApplyAllDifferences()
-{
-    slotApplyAllDifferences(true);
-    updateModelListActions();
-}
-
-void KompareModelList::slotActionUnapplyAllDifferences()
-{
-    slotApplyAllDifferences(false);
-    updateModelListActions();
-}
-
-#include "moc_komparemodellist.cpp"
-
-/* vim: set ts=4 sw=4 noet: */
diff --git a/src/komparemodellist.h b/src/komparemodellist.h
deleted file mode 100644
index 806ed0af943e..000000000000
--- a/src/komparemodellist.h
+++ /dev/null
@@ -1,226 +0,0 @@
-/*
-SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
-SPDX-FileCopyrightText: 2001-2005,2009 Otto Bruggeman <bruggie@gmail.com>
-SPDX-FileCopyrightText: 2007-2008 Kevin Kofler <kevin.kofler@chello.at>
-SPDX-FileCopyrightText: 2012 Jean -Nicolas Artaud <jeannicolasartaud@gmail.com>
-
-SPDX-License-Identifier: GPL-2.0-or-later
-*/
-
-#ifndef KOMPAREDIFF2_KOMPAREMODELLIST_H
-#define KOMPAREDIFF2_KOMPAREMODELLIST_H
-
-#include <QObject>
-
-#include "diffmodel.h"
-#include "diffmodellist.h"
-#include "kompare.h"
-#include "komparediff2_export.h"
-
-class QAction;
-class QTemporaryFile;
-class QTextCodec;
-class KActionCollection;
-
-class DiffSettings;
-class KompareProcess;
-
-namespace Diff2
-{
-
-/**
- * @class KompareModelList komparemodellist.h <KompareDiff2/KompareModelList>
- *
- * KompareModelList
- */
-class KOMPAREDIFF2_EXPORT KompareModelList : public QObject
-{
-    Q_OBJECT
-public:
-#if KOMPAREDIFF2_ENABLE_DEPRECATED_SINCE(5, 4)
-    /// @deprecated Since 5.4, use the overload without widgetForKIO arg, widgetForKIO is unused
-    KOMPAREDIFF2_DEPRECATED_VERSION(5, 4, "Use KompareModelList constructor without widgetForKIO arg instead")
-    KompareModelList(DiffSettings* diffSettings, QWidget* widgetForKIO, QObject* parent, const char* name = nullptr, bool supportReadWrite = true);
-#endif
-    /// @since 5.4
-    KompareModelList(DiffSettings* diffSettings, QObject* parent, const char* name = nullptr, bool supportReadWrite = true);
-    ~KompareModelList() override;
-
-public:
-    void refresh();
-    // Swap source with destination and show differences
-    void swap();
-
-    /* Comparing methods */
-    bool compare();
-
-    bool compare(Kompare::Mode);
-
-    bool openDiff(const QString& diff);
-
-    bool openFileAndDiff();
-    bool openDirAndDiff();
-
-    bool saveDiff(const QString& url, QString directory, DiffSettings* diffSettings);
-    bool saveAll();
-
-    bool saveDestination(DiffModel* model);
-
-    void setEncoding(const QString& encoding);
-
-    void setReadWrite(bool isReadWrite);
-    bool isReadWrite() const;
-
-    QString recreateDiff() const;
-
-    // This parses the difflines and creates new models
-    int parseDiffOutput(const QString& diff);
-
-    // This open the difflines after parsing them
-    bool parseAndOpenDiff(const QString& diff);
-
-    // Call this to emit the signals to the rest of the "world" to show the diff
-    void show();
-
-    // This will blend the original URL (dir or file) into the diffmodel,
-    // this is like patching but with a twist
-    bool blendOriginalIntoModelList(const QString& localURL);
-
-    // This mode() method is superfluous now so FIXME
-    enum Kompare::Mode    mode()   const { return m_info->mode; };
-    const DiffModelList*  models() const { return m_models; };
-
-    KActionCollection* actionCollection() const;
-    int modelCount() const;
-    int differenceCount() const;
-    int appliedCount() const;
-
-    const DiffModel* modelAt(int i) const { return m_models->at(i); };
-    DiffModel* modelAt(int i) { return m_models->at(i); };
-    int              findModel(DiffModel* model) const { return m_models->indexOf(model); };
-
-    bool hasUnsavedChanges() const;
-
-    int currentModel() const      { return m_models->indexOf(m_selectedModel); };
-    int currentDifference() const { return m_selectedModel ? m_selectedModel->findDifference(m_selectedDifference) : -1; };
-
-    const DiffModel* selectedModel() const       { return m_selectedModel; };
-    const Difference* selectedDifference() const { return m_selectedDifference; };
-
-    void clear();
-
-private:
-    Diff2::DiffModel* firstModel();
-    Diff2::DiffModel* lastModel();
-    Diff2::DiffModel* prevModel();
-    Diff2::DiffModel* nextModel();
-
-    bool setSelectedModel(Diff2::DiffModel* model);
-
-    void updateModelListActions();
-
-protected:
-    bool blendFile(DiffModel* model, const QString& lines);
-
-Q_SIGNALS:
-    void status(Kompare::Status status);
-    void setStatusBarModelInfo(int modelIndex, int differenceIndex, int modelCount, int differenceCount, int appliedCount);
-    void error(QString error);
-    void modelsChanged(const Diff2::DiffModelList* models);
-    void setSelection(const Diff2::DiffModel* model, const Diff2::Difference* diff);
-    void setSelection(const Diff2::Difference* diff);
-    void applyDifference(bool apply);
-    void applyAllDifferences(bool apply);
-    void applyDifference(const Diff2::Difference* diff, bool apply);
-    void diffString(const QString&);
-    void updateActions();
-
-public Q_SLOTS:
-    void slotSelectionChanged(const Diff2::DiffModel* model, const Diff2::Difference* diff);
-    void slotSelectionChanged(const Diff2::Difference* diff);
-
-    void slotApplyDifference(bool apply);
-    void slotApplyAllDifferences(bool apply);
-    void slotPreviousModel();
-    void slotNextModel();
-    void slotPreviousDifference();
-    void slotNextDifference();
-
-    void slotKompareInfo(struct Kompare::Info*);
-
-protected Q_SLOTS:
-    void slotDiffProcessFinished(bool success);
-    void slotWriteDiffOutput(bool success);
-
-    void slotActionApplyDifference();
-    void slotActionUnApplyDifference();
-    void slotActionApplyAllDifferences();
-    void slotActionUnapplyAllDifferences();
-
-    /** Save the currently selected destination in a multi-file diff,
-        or the single destination if a single file diff. */
-    void slotSaveDestination();
-
-private Q_SLOTS:
-    void slotDirectoryChanged(const QString&);
-    void slotFileChanged(const QString&);
-
-private: // Helper methods
-    bool isDirectory(const QString& url) const;
-    bool isDiff(const QString& mimetype) const;
-    QString readFile(const QString& fileName);
-
-    bool hasPrevModel() const;
-    bool hasNextModel() const;
-    bool hasPrevDiff() const;
-    bool hasNextDiff() const;
-
-    QStringList split(const QString& diff);
-    void setDepthAndApplied();
-
-private: // ### an exported class without a d pointer? Really? What about BC?
-    QTemporaryFile*       m_diffTemp;
-    QUrl                  m_diffURL;
-
-    KompareProcess*       m_diffProcess;
-
-    DiffSettings*         m_diffSettings;
-
-    DiffModelList*        m_models;
-
-    DiffModel*            m_selectedModel;
-    Difference*           m_selectedDifference;
-
-    int                   m_modelIndex;
-
-    struct Kompare::Info* m_info;
-
-    KActionCollection*    m_actionCollection;
-    QAction*              m_applyDifference;
-    QAction*              m_unApplyDifference;
-    QAction*              m_applyAll;
-    QAction*              m_unapplyAll;
-    QAction*              m_previousFile;
-    QAction*              m_nextFile;
-    QAction*              m_previousDifference;
-    QAction*              m_nextDifference;
-
-    QAction*              m_save;
-
-    QString               m_encoding;
-    QTextCodec*           m_textCodec;
-
-#if KOMPAREDIFF2_BUILD_DEPRECATED_SINCE(5, 4)
-    QT_WARNING_PUSH
-    QT_WARNING_DISABLE_CLANG("-Wunused-private-field")
-    // Unused, kept for ABI compatibility
-    QWidget*              m_widgetForKIO;
-    QT_WARNING_POP
- #endif
-
-    bool                  m_isReadWrite;
-};
-
-} // End of namespace Diff2
-
-#endif
diff --git a/src/kompareprocess.cpp b/src/kompareprocess.cpp
index 42c512b9521c..f3d7e93e622f 100644
--- a/src/kompareprocess.cpp
+++ b/src/kompareprocess.cpp
@@ -1,25 +1,27 @@
 /*
-SPDX-FileCopyrightText: 2001-2005,2009 Otto Bruggeman <bruggie@gmail.com>
-SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
-SPDX-FileCopyrightText: 2007-2008 Kevin Kofler <kevin.kofler@chello.at>
+    SPDX-FileCopyrightText: 2001-2005,2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+    SPDX-FileCopyrightText: 2007-2008 Kevin Kofler <kevin.kofler@chello.at>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #include "kompareprocess.h"
 
+// lib
+#include "diffsettings.h"
+#include <komparediff2_logging.h>
+// KF
+#include <KIO/Global>
+// Qt
 #include <QDir>
 #include <QStringList>
-#include <QTextCodec>
+#include <QUrl>
 
-#include <KIO/Global>
-
-#include <komparediffdebug.h>
-#include "diffsettings.h"
-
-namespace {
+namespace
+{
 /// TODO: This should be replaced to QDir::relativeFilePath
-static QString constructRelativePath(const QString& from, const QString& to)
+static QString constructRelativePath(const QString &from, const QString &to)
 {
     QUrl fromURL(from);
     QUrl toURL(to);
@@ -33,7 +35,8 @@ static QString constructRelativePath(const QString& from, const QString& to)
         ++upLevels;
     }
 
-    if (!root.isValid()) return to;
+    if (!root.isValid())
+        return to;
 
     QString relative;
     for (; upLevels > 0; --upLevels) {
@@ -45,26 +48,26 @@ static QString constructRelativePath(const QString& from, const QString& to)
 }
 }
 
-KompareProcess::KompareProcess(DiffSettings* diffSettings, Kompare::DiffMode diffMode, const QString& source, const QString& destination, const QString& dir, Kompare::Mode mode)
-    : KProcess(),
-      m_diffSettings(diffSettings),
-      m_diffMode(diffMode),
-      m_mode(mode),
-      m_textDecoder(nullptr)
+KompareProcess::KompareProcess(KompareDiff2::DiffSettings *diffSettings,
+                               KompareDiff2::DiffMode diffMode,
+                               const QString &source,
+                               const QString &destination,
+                               const QString &dir,
+                               KompareDiff2::Mode mode)
+    : KProcess()
+    , m_diffSettings(diffSettings)
+    , m_diffMode(diffMode)
+    , m_mode(mode)
 {
     // connect the signal that indicates that the process has exited
-    connect(this, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished),
-            this, &KompareProcess::slotFinished);
+    connect(this, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished), this, &KompareProcess::slotFinished);
 
     setEnv(QStringLiteral("LANG"), QStringLiteral("C"));
 
     // Write command and options
-    if (m_diffMode == Kompare::Default)
-    {
+    if (m_diffMode == KompareDiff2::Default) {
         writeDefaultCommandLine();
-    }
-    else
-    {
+    } else {
         writeCommandLine();
     }
 
@@ -75,36 +78,27 @@ KompareProcess::KompareProcess(DiffSettings* diffSettings, Kompare::DiffMode dif
     // Write file names
     *this << QStringLiteral("--");
 
-    //Add the option for diff to read from stdin(QIODevice::write), and save a pointer to the string
-    if (m_mode == Kompare::ComparingStringFile)
-    {
+    // Add the option for diff to read from stdin(QIODevice::write), and save a pointer to the string
+    if (m_mode == KompareDiff2::ComparingStringFile) {
         *this << QStringLiteral("-");
         m_customString = source;
-    }
-    else
-    {
+    } else {
         *this << constructRelativePath(dir, source);
     }
 
-    if (m_mode == Kompare::ComparingFileString)
-    {
+    if (m_mode == KompareDiff2::ComparingFileString) {
         *this << QStringLiteral("-");
         m_customString = destination;
-    }
-    else
-    {
+    } else {
         *this << constructRelativePath(dir, destination);
     }
 }
 
 void KompareProcess::writeDefaultCommandLine()
 {
-    if (!m_diffSettings || m_diffSettings->m_diffProgram.isEmpty())
-    {
+    if (!m_diffSettings || m_diffSettings->m_diffProgram.isEmpty()) {
         *this << QStringLiteral("diff") << QStringLiteral("-dr");
-    }
-    else
-    {
+    } else {
         *this << m_diffSettings->m_diffProgram << QStringLiteral("-dr");
     }
 
@@ -114,35 +108,32 @@ void KompareProcess::writeDefaultCommandLine()
 void KompareProcess::writeCommandLine()
 {
     // load the executable into the KProcess
-    if (m_diffSettings->m_diffProgram.isEmpty())
-    {
-        qCDebug(LIBKOMPAREDIFF2) << "Using the first diff in the path...";
+    if (m_diffSettings->m_diffProgram.isEmpty()) {
+        qCDebug(KOMPAREDIFF2_LOG) << "Using the first diff in the path...";
         *this << QStringLiteral("diff");
-    }
-    else
-    {
-        qCDebug(LIBKOMPAREDIFF2) << "Using a user specified diff, namely: " << m_diffSettings->m_diffProgram;
+    } else {
+        qCDebug(KOMPAREDIFF2_LOG) << "Using a user specified diff, namely: " << m_diffSettings->m_diffProgram;
         *this << m_diffSettings->m_diffProgram;
     }
 
     switch (m_diffSettings->m_format) {
-    case Kompare::Unified :
+    case KompareDiff2::Unified:
         *this << QStringLiteral("-U") << QString::number(m_diffSettings->m_linesOfContext);
         break;
-    case Kompare::Context :
+    case KompareDiff2::Context:
         *this << QStringLiteral("-C") << QString::number(m_diffSettings->m_linesOfContext);
         break;
-    case Kompare::RCS :
+    case KompareDiff2::RCS:
         *this << QStringLiteral("-n");
         break;
-    case Kompare::Ed :
+    case KompareDiff2::Ed:
         *this << QStringLiteral("-e");
         break;
-    case Kompare::SideBySide:
+    case KompareDiff2::SideBySide:
         *this << QStringLiteral("-y");
         break;
-    case Kompare::Normal :
-    case Kompare::UnknownFormat :
+    case KompareDiff2::Normal:
+    case KompareDiff2::UnknownFormat:
     default:
         break;
     }
@@ -151,65 +142,53 @@ void KompareProcess::writeCommandLine()
 // default diff does not have -H on OpenBSD
 // so don't pass this option unless the user overrode the default program
 #if defined(__OpenBSD__)
-            && !m_diffSettings->m_diffProgram.isEmpty()
+        && !m_diffSettings->m_diffProgram.isEmpty()
 #endif
-       )
-    {
+    ) {
         *this << QStringLiteral("-H");
     }
 
-    if (m_diffSettings->m_ignoreWhiteSpace)
-    {
+    if (m_diffSettings->m_ignoreWhiteSpace) {
         *this << QStringLiteral("-b");
     }
 
-    if (m_diffSettings->m_ignoreAllWhiteSpace)
-    {
+    if (m_diffSettings->m_ignoreAllWhiteSpace) {
         *this << QStringLiteral("-w");
     }
 
-    if (m_diffSettings->m_ignoreEmptyLines)
-    {
+    if (m_diffSettings->m_ignoreEmptyLines) {
         *this << QStringLiteral("-B");
     }
 
-    if (m_diffSettings->m_ignoreChangesDueToTabExpansion)
-    {
+    if (m_diffSettings->m_ignoreChangesDueToTabExpansion) {
         *this << QStringLiteral("-E");
     }
 
-    if (m_diffSettings->m_createSmallerDiff)
-    {
+    if (m_diffSettings->m_createSmallerDiff) {
         *this << QStringLiteral("-d");
     }
 
-    if (m_diffSettings->m_ignoreChangesInCase)
-    {
+    if (m_diffSettings->m_ignoreChangesInCase) {
         *this << QStringLiteral("-i");
     }
 
-    if (m_diffSettings->m_ignoreRegExp && !m_diffSettings->m_ignoreRegExpText.isEmpty())
-    {
+    if (m_diffSettings->m_ignoreRegExp && !m_diffSettings->m_ignoreRegExpText.isEmpty()) {
         *this << QStringLiteral("-I") << m_diffSettings->m_ignoreRegExpText;
     }
 
-    if (m_diffSettings->m_showCFunctionChange)
-    {
+    if (m_diffSettings->m_showCFunctionChange) {
         *this << QStringLiteral("-p");
     }
 
-    if (m_diffSettings->m_convertTabsToSpaces)
-    {
+    if (m_diffSettings->m_convertTabsToSpaces) {
         *this << QStringLiteral("-t");
     }
 
-    if (m_diffSettings->m_recursive)
-    {
+    if (m_diffSettings->m_recursive) {
         *this << QStringLiteral("-r");
     }
 
-    if (m_diffSettings->m_newFiles)
-    {
+    if (m_diffSettings->m_newFiles) {
         *this << QStringLiteral("-N");
     }
 
@@ -219,42 +198,31 @@ void KompareProcess::writeCommandLine()
 //      *this << QStringLiteral("-a");
 //  }
 
-    if (m_diffSettings->m_excludeFilePattern)
-    {
-        for (const QString &it :
-             std::as_const(m_diffSettings->m_excludeFilePatternList)) {
-          *this << QStringLiteral("-x") << it;
+    if (m_diffSettings->m_excludeFilePattern) {
+        for (const QString &it : std::as_const(m_diffSettings->m_excludeFilePatternList)) {
+            *this << QStringLiteral("-x") << it;
         }
     }
 
-    if (m_diffSettings->m_excludeFilesFile && !m_diffSettings->m_excludeFilesFileURL.isEmpty())
-    {
+    if (m_diffSettings->m_excludeFilesFile && !m_diffSettings->m_excludeFilesFileURL.isEmpty()) {
         *this << QStringLiteral("-X") << m_diffSettings->m_excludeFilesFileURL;
     }
 }
 
-KompareProcess::~KompareProcess()
-{
-    delete m_textDecoder;
-}
+KompareProcess::~KompareProcess() = default;
 
-void KompareProcess::setEncoding(const QString& encoding)
+void KompareProcess::setEncoding(const QString &encoding)
 {
-    if (!encoding.compare(QLatin1String("default"), Qt::CaseInsensitive))
-    {
-        m_codec = QTextCodec::codecForLocale();
-        m_textDecoder = m_codec->makeDecoder();
-    }
-    else
-    {
-        m_codec = QTextCodec::codecForName(encoding.toUtf8());
-        if (m_codec)
-            m_textDecoder = m_codec->makeDecoder();
-        else
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Using locale codec as backup...";
-            m_codec = QTextCodec::codecForLocale();
-            m_textDecoder = m_codec->makeDecoder();
+    if (!encoding.compare(QLatin1String("default"), Qt::CaseInsensitive)) {
+        m_textDecoder = QStringDecoder(QStringDecoder::System);
+        m_textEncoder = QStringEncoder(QStringEncoder::System);
+    } else {
+        m_textDecoder = QStringDecoder(encoding.toUtf8().constData());
+        m_textEncoder = QStringEncoder(encoding.toUtf8().constData());
+        if (!m_textDecoder.isValid() || !m_textEncoder.isValid()) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Using locale codec as backup...";
+            m_textDecoder = QStringDecoder(QStringDecoder::System);
+            m_textEncoder = QStringEncoder(QStringEncoder::System);
         }
     }
 }
@@ -263,38 +231,33 @@ void KompareProcess::start()
 {
 #ifndef NDEBUG
     QString cmdLine;
-    QStringList program = KProcess::program();
-    QStringList::ConstIterator it = program.constBegin();
-    QStringList::ConstIterator end = program.constEnd();
-    for (; it != end; ++it)
-        cmdLine += QLatin1Char('\"') + (*it) + QLatin1String("\" ");
-    qCDebug(LIBKOMPAREDIFF2) << cmdLine;
+    const QStringList program = KProcess::program();
+    for (const QString &arg : program)
+        cmdLine += QLatin1Char('\"') + arg + QLatin1String("\" ");
+    qCDebug(KOMPAREDIFF2_LOG) << cmdLine;
 #endif
     setOutputChannelMode(SeparateChannels);
     setNextOpenMode(QIODevice::ReadWrite);
     KProcess::start();
 
-    //If we have a string to compare against input it now
-    if ((m_mode == Kompare::ComparingStringFile) || (m_mode == Kompare::ComparingFileString))
-        write(m_codec->fromUnicode(m_customString));
+    // If we have a string to compare against input it now
+    if ((m_mode == KompareDiff2::ComparingStringFile) || (m_mode == KompareDiff2::ComparingFileString))
+        write(m_textEncoder.encode(m_customString));
     closeWriteChannel();
 }
 
 void KompareProcess::slotFinished(int exitCode, QProcess::ExitStatus exitStatus)
 {
     // add all output to m_stdout/m_stderr
-    if (m_textDecoder)
-    {
-        m_stdout = m_textDecoder->toUnicode(readAllStandardOutput());
-        m_stderr = m_textDecoder->toUnicode(readAllStandardError());
-    }
-    else
-        qCDebug(LIBKOMPAREDIFF2) << "KompareProcess::slotFinished : No decoder !!!";
+    m_textDecoder.resetState();
+    m_stdout = m_textDecoder.decode(readAllStandardOutput());
+    m_textDecoder.resetState();
+    m_stderr = m_textDecoder.decode(readAllStandardError());
 
     // exit code of 0: no differences
     //              1: some differences
     //              2: error but there may be differences !
-    qCDebug(LIBKOMPAREDIFF2) << "Exited with exit code : " << exitCode;
+    qCDebug(KOMPAREDIFF2_LOG) << "Exited with exit code : " << exitCode;
     Q_EMIT diffHasFinished(exitStatus == NormalExit && exitCode != 0);
 }
 
diff --git a/src/kompareprocess.h b/src/kompareprocess.h
index e632454ac5d8..3120e4c7edf0 100644
--- a/src/kompareprocess.h
+++ b/src/kompareprocess.h
@@ -1,59 +1,79 @@
 /*
-SPDX-FileCopyrightText: 2001-2003 Otto Bruggeman <otto.bruggeman@home.nl>
-SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
-SPDX-FileCopyrightText: 2008 Kevin Kofler <kevin.kofler@chello.at>
+    SPDX-FileCopyrightText: 2001-2003 Otto Bruggeman <otto.bruggeman@home.nl>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+    SPDX-FileCopyrightText: 2008 Kevin Kofler <kevin.kofler@chello.at>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #ifndef KOMPAREPROCESS_H
 #define KOMPAREPROCESS_H
 
+// lib
+#include "global.h"
+// KF
 #include <KProcess>
+// Qt
+#include <QStringDecoder>
+#include <QStringEncoder>
+// Std
+#include <memory>
 
-#include "kompare.h"
-
-class QTextDecoder;
-class QTextCodec;
-
+namespace KompareDiff2
+{
 class DiffSettings;
+}
 
 class KompareProcess : public KProcess
 {
     Q_OBJECT
 
 public:
-    KompareProcess(DiffSettings* diffSettings, enum Kompare::DiffMode mode, const QString& source,
-                   const QString& destination, const QString& directory = QString(), enum Kompare::Mode = Kompare::UnknownMode);
+    KompareProcess(KompareDiff2::DiffSettings *diffSettings,
+                   KompareDiff2::DiffMode mode,
+                   const QString &source,
+                   const QString &destination,
+                   const QString &directory = QString(),
+                   KompareDiff2::Mode = KompareDiff2::UnknownMode);
     ~KompareProcess() override;
 
+public:
     void start();
 
-    QString diffOutput() { return m_stdout; }
-    QString stdOut()     { return m_stdout; }
-    QString stdErr()     { return m_stderr; }
+    QString diffOutput() const
+    {
+        return m_stdout;
+    }
+    QString stdOut() const
+    {
+        return m_stdout;
+    }
+    QString stdErr() const
+    {
+        return m_stderr;
+    }
 
-    void setEncoding(const QString& encoding);
+    void setEncoding(const QString &encoding);
 
 Q_SIGNALS:
     void diffHasFinished(bool finishedNormally);
 
-protected:
+private:
     void writeDefaultCommandLine();
     void writeCommandLine();
 
-protected Q_SLOTS:
+private Q_SLOTS:
     void slotFinished(int, QProcess::ExitStatus);
 
 private:
-    DiffSettings*          m_diffSettings;
-    const Kompare::DiffMode m_diffMode;
-    const Kompare::Mode    m_mode;
-    QString                m_customString; // Used when a comparison between a file and a string is requested
-    QString                m_stdout;
-    QString                m_stderr;
-    QTextDecoder*          m_textDecoder;
-    QTextCodec*            m_codec;
+    KompareDiff2::DiffSettings *m_diffSettings;
+    const KompareDiff2::DiffMode m_diffMode;
+    const KompareDiff2::Mode m_mode;
+    QString m_customString; // Used when a comparison between a file and a string is requested
+    QString m_stdout;
+    QString m_stderr;
+    QStringDecoder m_textDecoder;
+    QStringEncoder m_textEncoder;
 };
 
 #endif
diff --git a/src/levenshteintable.h b/src/levenshteintable.h
index 0c2d42b7c77e..3fcc5cbfe20d 100644
--- a/src/levenshteintable.h
+++ b/src/levenshteintable.h
@@ -1,116 +1,117 @@
 /*
-SPDX-FileCopyrightText: 2003 Otto Bruggeman <bruggie@home.nl>
-SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
+    SPDX-FileCopyrightText: 2003 Otto Bruggeman <bruggie@home.nl>
+    SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #ifndef KOMPAREDIFF2_LEVENSHTEINTABLE_H
 #define KOMPAREDIFF2_LEVENSHTEINTABLE_H
 
-#include <iostream>
 // #include <QString>
-// #include <komparediffdebug.h>
+// #include <komparediff2_logging.h>
+// Std
+#include <iostream>
+#include <memory>
+#include <vector>
 
-namespace Diff2 {
+namespace KompareDiff2
+{
 
 class Marker;
 
-
 class Marker;
 
 /**
  * Computes the Levenshtein distance between two sequences.
  * The actual sequence contents must be prepended with one virtual item each for easier index access.
  */
-template<class SequencePair> class LevenshteinTable
+template<class SequencePair>
+class LevenshteinTable
 {
 public:
     LevenshteinTable();
     LevenshteinTable(unsigned int width, unsigned int height);
-    ~LevenshteinTable();
+    ~LevenshteinTable() = default;
+
+    LevenshteinTable(const LevenshteinTable &table) = delete;
+    const LevenshteinTable &operator=(const LevenshteinTable &table) = delete;
 
 public:
-    int  getContent(unsigned int posX, unsigned int posY) const;
-    int  setContent(unsigned int posX, unsigned int posY, int value);
+    int getContent(unsigned int posX, unsigned int posY) const;
+    int setContent(unsigned int posX, unsigned int posY, int value);
     bool setSize(unsigned int width, unsigned int height);
 
-    unsigned int width()  const { return m_width; };
-    unsigned int height() const { return m_height; };
+    unsigned int width() const
+    {
+        return m_width;
+    };
+    unsigned int height() const
+    {
+        return m_height;
+    };
 
     /** Debug method  to check if the table is properly filled */
-    void dumpLevenshteinTable(void);
+    void dumpLevenshteinTable();
 
     /**
      * This calculates the levenshtein distance of 2 sequences.
      * This object takes ownership of the argument
      */
-    unsigned int createTable(SequencePair* sequences);
+    unsigned int createTable(SequencePair *sequences);
 
-    void createListsOfMarkers(void);
+    void createListsOfMarkers();
     int chooseRoute(int c1, int c2, int c3, int current);
 
-protected:
-    LevenshteinTable(const LevenshteinTable& table);
-    const LevenshteinTable& operator = (const LevenshteinTable& table);
-
 private:
-    unsigned int      m_width;
-    unsigned int      m_height;
-    unsigned int      m_size;
-    unsigned int*     m_table;
-    SequencePair*     m_sequences;
+    unsigned int m_width = 256;
+    unsigned int m_height = 256;
+    unsigned int m_size;
+    std::vector<unsigned int> m_table;
+    std::unique_ptr<SequencePair> m_sequences;
 };
 
-template<class SequencePair> LevenshteinTable<SequencePair>::LevenshteinTable()
-    : m_width(256),
-      m_height(256),
-      m_size(m_height* m_width),
-      m_table(new unsigned int[ m_size ]),
-      m_sequences(nullptr)
+template<class SequencePair>
+LevenshteinTable<SequencePair>::LevenshteinTable()
+    : m_size(m_height * m_width)
+    , m_table(m_size)
 {
 }
 
-template<class SequencePair> LevenshteinTable<SequencePair>::LevenshteinTable(unsigned int width, unsigned int height)
-    : m_width(width),
-      m_height(height),
-      m_size(m_width* m_height),
-      m_table(new unsigned int[ m_size ]),
-      m_sequences(0)
+template<class SequencePair>
+LevenshteinTable<SequencePair>::LevenshteinTable(unsigned int width, unsigned int height)
+    : m_width(width)
+    , m_height(height)
+    , m_size(m_width * m_height)
+    , m_table(m_size)
 {
 }
 
-template<class SequencePair> LevenshteinTable<SequencePair>::~LevenshteinTable()
+template<class SequencePair>
+int LevenshteinTable<SequencePair>::getContent(unsigned int posX, unsigned int posY) const
 {
-    delete[] m_table;
-    delete m_sequences;
+//     qCDebug(KOMPAREDIFF2_LOG) << "Width = " << m_width << ", height = " << m_height << ", posX = " << posX << ", posY = " << posY;
+    return m_table[posY * m_width + posX];
 }
 
-template<class SequencePair> int LevenshteinTable<SequencePair>::getContent(unsigned int posX, unsigned int posY) const
+template<class SequencePair>
+int LevenshteinTable<SequencePair>::setContent(unsigned int posX, unsigned int posY, int value)
 {
-//     qCDebug(LIBKOMPAREDIFF2) << "Width = " << m_width << ", height = " << m_height << ", posX = " << posX << ", posY = " << posY;
-    return m_table[ posY * m_width + posX ];
-}
-
-template<class SequencePair> int LevenshteinTable<SequencePair>::setContent(unsigned int posX, unsigned int posY, int value)
-{
-    m_table[ posY * m_width + posX ] = value;
+    m_table[posY * m_width + posX] = value;
 
     return 0;
 }
 
-template<class SequencePair> bool LevenshteinTable<SequencePair>::setSize(unsigned int width, unsigned int height)
+template<class SequencePair>
+bool LevenshteinTable<SequencePair>::setSize(unsigned int width, unsigned int height)
 {
     // Set a limit of 16.7 million entries, will be about 64 MB of ram, that should be plenty
     if (((width) * (height)) > (256 * 256 * 256))
         return false;
 
-    if (((width) * (height)) > m_size)
-    {
-        delete[] m_table;
-
+    if (((width) * (height)) > m_size) {
         m_size = width * height;
-        m_table = new unsigned int[ m_size ];
+        m_table.resize(m_size);
     }
 
     m_width = width;
@@ -119,12 +120,11 @@ template<class SequencePair> bool LevenshteinTable<SequencePair>::setSize(unsign
     return true;
 }
 
-template<class SequencePair> void LevenshteinTable<SequencePair>::dumpLevenshteinTable()
+template<class SequencePair>
+void LevenshteinTable<SequencePair>::dumpLevenshteinTable()
 {
-    for (unsigned int i = 0; i < m_height; ++i)
-    {
-        for (unsigned int j = 0; j < m_width; ++j)
-        {
+    for (unsigned int i = 0; i < m_height; ++i) {
+        for (unsigned int j = 0; j < m_width; ++j) {
             std::cout.width(3);
             std::cout << getContent(j, i);
         }
@@ -132,9 +132,10 @@ template<class SequencePair> void LevenshteinTable<SequencePair>::dumpLevenshtei
     }
 }
 
-template<class SequencePair> unsigned int LevenshteinTable<SequencePair>::createTable(SequencePair* sequences)
+template<class SequencePair>
+unsigned int LevenshteinTable<SequencePair>::createTable(SequencePair *sequences)
 {
-    m_sequences = sequences;
+    m_sequences.reset(sequences);
     unsigned int m = m_sequences->lengthFirst();
     unsigned int n = m_sequences->lengthSecond();
 
@@ -154,17 +155,15 @@ template<class SequencePair> unsigned int LevenshteinTable<SequencePair>::create
     int cost = 0, north = 0, west = 0, northwest = 0;
 
     // Optimization, calculate row wise instead of column wise, wont trash the cache so much with large strings
-    for (j = 1; j < n; ++j)
-    {
-        for (i = 1; i < m; ++i)
-        {
+    for (j = 1; j < n; ++j) {
+        for (i = 1; i < m; ++i) {
             if (m_sequences->equal(i, j))
                 cost = 0;
             else
                 cost = SequencePair::allowReplace ? 1 : 2;
 
-            north     = getContent(i, j - 1) + 1;
-            west      = getContent(i - 1, j) + 1;
+            north = getContent(i, j - 1) + 1;
+            west = getContent(i - 1, j) + 1;
             northwest = getContent(i - 1, j - 1) + cost;
 
             setContent(i, j, qMin(north, qMin(west, northwest)));
@@ -174,14 +173,13 @@ template<class SequencePair> unsigned int LevenshteinTable<SequencePair>::create
     return getContent(m - 1, n - 1);
 }
 
-template<class SequencePair> int LevenshteinTable<SequencePair>::chooseRoute(int c1, int c2, int c3, int current)
+template<class SequencePair>
+int LevenshteinTable<SequencePair>::chooseRoute(int c1, int c2, int c3, int current)
 {
-//     qCDebug(LIBKOMPAREDIFF2) << "c1 = " << c1 << ", c2 = " << c2 << ", c3 = " << c3;
+//     qCDebug(KOMPAREDIFF2_LOG) << "c1 = " << c1 << ", c2 = " << c2 << ", c3 = " << c3;
     // preference order: c2, c3, c1, hopefully this will work out for me
-    if (c2 <= c1 && c2 <= c3)
-    {
-        if (SequencePair::allowReplace || (c2 == current))
-        {
+    if (c2 <= c1 && c2 <= c3) {
+        if (SequencePair::allowReplace || (c2 == current)) {
             return 1;
         }
     }
@@ -192,10 +190,11 @@ template<class SequencePair> int LevenshteinTable<SequencePair>::chooseRoute(int
     return 0;
 }
 
-template<class SequencePair> void LevenshteinTable<SequencePair>::createListsOfMarkers()
+template<class SequencePair>
+void LevenshteinTable<SequencePair>::createListsOfMarkers()
 {
-//     qCDebug(LIBKOMPAREDIFF2) << source;
-//     qCDebug(LIBKOMPAREDIFF2) << destination;
+//     qCDebug(KOMPAREDIFF2_LOG) << source;
+//     qCDebug(KOMPAREDIFF2_LOG) << destination;
 //     dumpLevenshteinTable();
 
     unsigned int x = m_width - 1;
@@ -206,8 +205,7 @@ template<class SequencePair> void LevenshteinTable<SequencePair>::createListsOfM
     // If the number of differences is more than half the length of the largest string
     // don't bother to mark the individual changes
     // Patch based on work by Felix Berger as put as attachment to bug 75794
-    if (!m_sequences->needFineGrainedOutput(difference))
-    {
+    if (!m_sequences->needFineGrainedOutput(difference)) {
         m_sequences->prependFirst(new Marker(Marker::End, x));
         m_sequences->prependFirst(new Marker(Marker::Start, 0));
         m_sequences->prependSecond(new Marker(Marker::End, y));
@@ -215,39 +213,34 @@ template<class SequencePair> void LevenshteinTable<SequencePair>::createListsOfM
         return;
     }
 
-    Marker* c = nullptr;
+    Marker *c = nullptr;
 
     int n, nw, w, direction, currentValue;
-    while (x > 0 && y > 0)
-    {
+    while (x > 0 && y > 0) {
         currentValue = getContent(x, y);
 
-        n  = getContent(x, y - 1);
-        w  = getContent(x - 1, y);
+        n = getContent(x, y - 1);
+        w = getContent(x - 1, y);
         nw = getContent(x - 1, y - 1);
         direction = chooseRoute(n, nw, w, currentValue);
 
-        switch (direction)
-        {
+        switch (direction) {
         case 0: // north
-//             qCDebug(LIBKOMPAREDIFF2) << "Picking north";
-//             qCDebug(LIBKOMPAREDIFF2) << "Source[" << ( x - 1 ) << "] = " << QString( source[ x-1 ] ) << ", destination[" << ( y - 1 ) << "] = " << QString( destination[ y-1 ] );
+//             qCDebug(KOMPAREDIFF2_LOG) << "Picking north";
+//             qCDebug(KOMPAREDIFF2_LOG) << "Source[" << ( x - 1 ) << "] = " << QString( source[ x-1 ] ) << ", destination[" << ( y - 1 ) << "] = " << QString( destination[ y-1 ] );
 
             if (!m_sequences->markerListSecond().isEmpty())
                 c = m_sequences->markerListSecond().first();
             else
                 c = nullptr;
 
-            if (c && c->type() == Marker::End)
-            {
-//                 qCDebug(LIBKOMPAREDIFF2) << "CurrentValue: " << currentValue;
+            if (c && c->type() == Marker::End) {
+//                 qCDebug(KOMPAREDIFF2_LOG) << "CurrentValue: " << currentValue;
                 if (n == currentValue)
                     m_sequences->prependSecond(new Marker(Marker::Start, y));
-// else: the change continues, do not do anything
-            }
-            else
-            {
-//                 qCDebug(LIBKOMPAREDIFF2) << "CurrentValue: " << currentValue;
+            // else: the change continues, do not do anything
+            } else {
+//                 qCDebug(KOMPAREDIFF2_LOG) << "CurrentValue: " << currentValue;
                 if (n < currentValue)
                     m_sequences->prependSecond(new Marker(Marker::End, y));
             }
@@ -258,24 +251,21 @@ template<class SequencePair> void LevenshteinTable<SequencePair>::createListsOfM
             }
             break;
         case 1: // northwest
-//             qCDebug(LIBKOMPAREDIFF2) << "Picking northwest";
-//             qCDebug(LIBKOMPAREDIFF2) << "Source[" << ( x - 1 ) << "] = " << QString( source[ x-1 ] ) << ", destination[" << ( y - 1 ) << "] = " << QString( destination[ y-1 ] );
+//             qCDebug(KOMPAREDIFF2_LOG) << "Picking northwest";
+//             qCDebug(KOMPAREDIFF2_LOG) << "Source[" << ( x - 1 ) << "] = " << QString( source[ x-1 ] ) << ", destination[" << ( y - 1 ) << "] = " << QString( destination[ y-1 ] );
 
             if (!m_sequences->markerListSecond().isEmpty())
                 c = m_sequences->markerListSecond().first();
             else
                 c = nullptr;
 
-            if (c && c->type() == Marker::End)
-            {
-//                 qCDebug(LIBKOMPAREDIFF2) << "End found: CurrentValue: " << currentValue;
+            if (c && c->type() == Marker::End) {
+//                 qCDebug(KOMPAREDIFF2_LOG) << "End found: CurrentValue: " << currentValue;
                 if (nw == currentValue)
                     m_sequences->prependSecond(new Marker(Marker::Start, y));
-                // else: the change continues, do not do anything
-            }
-            else
-            {
-//                 qCDebug(LIBKOMPAREDIFF2) << "CurrentValue: " << currentValue;
+            // else: the change continues, do not do anything
+            } else {
+//                 qCDebug(KOMPAREDIFF2_LOG) << "CurrentValue: " << currentValue;
                 if (nw < currentValue)
                     m_sequences->prependSecond(new Marker(Marker::End, y));
             }
@@ -285,16 +275,13 @@ template<class SequencePair> void LevenshteinTable<SequencePair>::createListsOfM
             else
                 c = nullptr;
 
-            if (c && c->type() == Marker::End)
-            {
-//                 qCDebug(LIBKOMPAREDIFF2) << "End found: CurrentValue: " << currentValue;
+            if (c && c->type() == Marker::End) {
+//                 qCDebug(KOMPAREDIFF2_LOG) << "End found: CurrentValue: " << currentValue;
                 if (nw == currentValue)
                     m_sequences->prependFirst(new Marker(Marker::Start, x));
-                // else: the change continues, do not do anything
-            }
-            else
-            {
-//                 qCDebug(LIBKOMPAREDIFF2) << "CurrentValue: " << currentValue;
+            // else: the change continues, do not do anything
+            } else {
+//                 qCDebug(KOMPAREDIFF2_LOG) << "CurrentValue: " << currentValue;
                 if (nw < currentValue)
                     m_sequences->prependFirst(new Marker(Marker::End, x));
             }
@@ -303,24 +290,21 @@ template<class SequencePair> void LevenshteinTable<SequencePair>::createListsOfM
             --x;
             break;
         case 2: // west
-//             qCDebug(LIBKOMPAREDIFF2) << "Picking west";
-//             qCDebug(LIBKOMPAREDIFF2) << "Source[" << ( x - 1 ) << "] = " << QString( source[ x-1 ] ) << ", destination[" << ( y - 1 ) << "] = " << QString( destination[ y-1 ] );
+//             qCDebug(KOMPAREDIFF2_LOG) << "Picking west";
+//             qCDebug(KOMPAREDIFF2_LOG) << "Source[" << ( x - 1 ) << "] = " << QString( source[ x-1 ] ) << ", destination[" << ( y - 1 ) << "] = " << QString( destination[ y-1 ] );
 
             if (!m_sequences->markerListFirst().isEmpty())
                 c = m_sequences->markerListFirst().first();
             else
                 c = nullptr;
 
-            if (c && c->type() == Marker::End)
-            {
-//                 qCDebug(LIBKOMPAREDIFF2) << "End found: CurrentValue: " << currentValue;
+            if (c && c->type() == Marker::End) {
+//                 qCDebug(KOMPAREDIFF2_LOG) << "End found: CurrentValue: " << currentValue;
                 if (w == currentValue)
                     m_sequences->prependFirst(new Marker(Marker::Start, x));
                 // else: the change continues, do not do anything
-            }
-            else
-            {
-//                 qCDebug(LIBKOMPAREDIFF2) << "CurrentValue: " << currentValue;
+            } else {
+//                 qCDebug(KOMPAREDIFF2_LOG) << "CurrentValue: " << currentValue;
                 if (w < currentValue)
                     m_sequences->prependFirst(new Marker(Marker::End, x));
             }
@@ -334,19 +318,17 @@ template<class SequencePair> void LevenshteinTable<SequencePair>::createListsOfM
     }
 
     // When leaving the loop it does not mean both are 0! If not there is still a change at the beginning of the line we missed so adding now.
-    if (x != 0)
-    {
+    if (x != 0) {
         m_sequences->prependFirst(new Marker(Marker::End, x));
         m_sequences->prependFirst(new Marker(Marker::Start, 0));
     }
 
-    if (y != 0)
-    {
+    if (y != 0) {
         m_sequences->prependSecond(new Marker(Marker::End, y));
         m_sequences->prependSecond(new Marker(Marker::Start, 0));
     }
 
-//     qCDebug(LIBKOMPAREDIFF2) << "Source string: " << source;
+//     qCDebug(KOMPAREDIFF2_LOG) << "Source string: " << source;
 
 //     QStringList list;
 //     int prevValue = 0;
@@ -355,7 +337,7 @@ template<class SequencePair> void LevenshteinTable<SequencePair>::createListsOfM
 //     for ( ; mit != end; ++mit )
 //     {
 //         c = *mit;
-//         qCDebug(LIBKOMPAREDIFF2) << "Source Marker Entry : Type: " << c->type() << ", Offset: " << c->offset();
+//         qCDebug(KOMPAREDIFF2_LOG) << "Source Marker Entry : Type: " << c->type() << ", Offset: " << c->offset();
 //         list.append( source.mid( prevValue, c->offset() - prevValue ) );
 //         prevValue = c->offset();
 //     }
@@ -363,18 +345,18 @@ template<class SequencePair> void LevenshteinTable<SequencePair>::createListsOfM
 //     {
 //         list.append( source.mid( prevValue, source.length() - prevValue ) );
 //     }
-//     qCDebug(LIBKOMPAREDIFF2) << "Source Resulting stringlist : " << list.join("\n");
+//     qCDebug(KOMPAREDIFF2_LOG) << "Source Resulting stringlist : " << list.join("\n");
 //
 //     list.clear();
 //     prevValue = 0;
 //
-//     qCDebug(LIBKOMPAREDIFF2) << "Destination string: " << destination;
+//     qCDebug(KOMPAREDIFF2_LOG) << "Destination string: " << destination;
 //     mit = m_sequences->markerListSecond().begin();
 //     end = m_sequences->markerListSecond().end();
 //     for ( ; mit != end; ++mit )
 //     {
 //         c = *mit;
-//         qCDebug(LIBKOMPAREDIFF2) << "Destination Marker Entry : Type: " << c->type() << ", Offset: " << c->offset();
+//         qCDebug(KOMPAREDIFF2_LOG) << "Destination Marker Entry : Type: " << c->type() << ", Offset: " << c->offset();
 //         list.append( destination.mid( prevValue, c->offset() - prevValue ) );
 //         prevValue = c->offset();
 //     }
@@ -382,9 +364,9 @@ template<class SequencePair> void LevenshteinTable<SequencePair>::createListsOfM
 //     {
 //         list.append( destination.mid( prevValue, destination.length() - prevValue ) );
 //     }
-//     qCDebug(LIBKOMPAREDIFF2) << "Destination Resulting string : " << list.join("\n");
+//     qCDebug(KOMPAREDIFF2_LOG) << "Destination Resulting string : " << list.join("\n");
 }
 
-} // namespace Diff2
+} // namespace KompareDiff2
 
 #endif // KOMPAREDIFF2_LEVENSHTEINTABLE_H
diff --git a/src/marker.h b/src/marker.h
index 573382fbb9c2..4baaa954091b 100644
--- a/src/marker.h
+++ b/src/marker.h
@@ -1,16 +1,19 @@
 /*
-SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
+    SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
 
-SPDX-License-Identifier: LGPL-2.0-or-later
+    SPDX-License-Identifier: LGPL-2.0-or-later
 */
 
 #ifndef KOMPAREDIFF2_MARKER_H
 #define KOMPAREDIFF2_MARKER_H
 
-#include <QList>
+// lib
 #include "komparediff2_export.h"
+// Qt
+#include <QList>
 
-namespace Diff2 {
+namespace KompareDiff2
+{
 
 /**
  * @class Marker marker.h <KompareDiff2/Marker>
@@ -20,7 +23,10 @@ namespace Diff2 {
 class KOMPAREDIFF2_EXPORT Marker
 {
 public:
-    enum Type { Start = 0, End = 1 };
+    enum Type {
+        Start = 0,
+        End = 1,
+    };
 
 public:
     Marker()
@@ -28,32 +34,45 @@ public:
         m_type = Marker::Start;
         m_offset = 0;
     }
-    Marker(enum Marker::Type type, unsigned int offset)
+    Marker(Marker::Type type, unsigned int offset)
     {
         m_type = type;
         m_offset = offset;
     }
-    ~Marker() {}
+    ~Marker() = default;
 
 public:
-    enum Marker::Type type()   const { return m_type; }
-    unsigned int      offset() const { return m_offset; }
+    Marker::Type type() const
+    {
+        return m_type;
+    }
+    unsigned int offset() const
+    {
+        return m_offset;
+    }
 
-    void setType(enum Marker::Type type) { m_type   = type; }
-    void setOffset(unsigned int offset)  { m_offset = offset; }
+    void setType(Marker::Type type)
+    {
+        m_type = type;
+    }
+    void setOffset(unsigned int offset)
+    {
+        m_offset = offset;
+    }
 
-    bool operator == (const Marker& rhs) const {
+    bool operator==(const Marker &rhs) const
+    {
         return this->type() == rhs.type() && this->offset() == rhs.offset();
     }
 
 private:
-    enum Marker::Type m_type;
-    unsigned int      m_offset;
+    Marker::Type m_type;
+    unsigned int m_offset;
 };
 
-using MarkerList =              QList<Marker*>;
-using MarkerListIterator =      QList<Marker*>::iterator;
-using MarkerListConstIterator = QList<Marker*>::const_iterator;
+using MarkerList =              QList<Marker *>;
+using MarkerListIterator =      QList<Marker *>::iterator;
+using MarkerListConstIterator = QList<Marker *>::const_iterator;
 
 }
 
diff --git a/src/modellist.cpp b/src/modellist.cpp
new file mode 100644
index 000000000000..72a3de3e67de
--- /dev/null
+++ b/src/modellist.cpp
@@ -0,0 +1,1044 @@
+/*
+    SPDX-FileCopyrightText: 2001-2005,2009 Otto Bruggeman <otto.bruggeman@home.nl>
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+    SPDX-FileCopyrightText: 2007-2010 Kevin Kofler <kevin.kofler@chello.at>
+    SPDX-FileCopyrightText: 2012 Jean -Nicolas Artaud <jeannicolasartaud@gmail.com>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#include "modellist.h"
+#include "modellist_p.h"
+
+// lib
+#include "diffhunk.h"
+#include "parser.h"
+#include <komparediff2_logging.h>
+// KF
+#include <KActionCollection>
+#include <KDirWatch>
+#include <KIO/FileCopyJob>
+#include <KIO/MkdirJob>
+#include <KIO/StatJob>
+#include <KIO/UDSEntry>
+#include <KLocalizedString>
+#include <KStandardAction>
+// Qt
+#include <QDir>
+#include <QFile>
+#include <QList>
+#include <QMimeDatabase>
+#include <QMimeType>
+#include <QTextStream>
+// Std
+#include <algorithm>
+
+using namespace KompareDiff2;
+
+ModelList::ModelList(DiffSettings *diffSettings, QObject *parent, bool supportReadWrite)
+    : QObject(parent)
+    , d_ptr(new ModelListPrivate(diffSettings, supportReadWrite))
+{
+    Q_D(ModelList);
+
+    qCDebug(KOMPAREDIFF2_LOG) << "Show me the arguments: " << diffSettings << ", " << parent;
+    d->actionCollection = new KActionCollection(this);
+    if (supportReadWrite) {
+        d->applyDifference = d->actionCollection->addAction(QStringLiteral("difference_apply"), this, &ModelList::slotActionApplyDifference);
+        d->applyDifference->setIcon(QIcon::fromTheme(QStringLiteral("arrow-right")));
+        d->applyDifference->setText(i18nc("@action", "&Apply Difference"));
+        d->actionCollection->setDefaultShortcut(d->applyDifference, QKeySequence(Qt::Key_Space));
+        d->unApplyDifference = d->actionCollection->addAction(QStringLiteral("difference_unapply"), this, &ModelList::slotActionUnApplyDifference);
+        d->unApplyDifference->setIcon(QIcon::fromTheme(QStringLiteral("arrow-left")));
+        d->unApplyDifference->setText(i18nc("@action", "Un&apply Difference"));
+        d->actionCollection->setDefaultShortcut(d->unApplyDifference, QKeySequence(Qt::Key_Backspace));
+        d->applyAll = d->actionCollection->addAction(QStringLiteral("difference_applyall"), this, &ModelList::slotActionApplyAllDifferences);
+        d->applyAll->setIcon(QIcon::fromTheme(QStringLiteral("arrow-right-double")));
+        d->applyAll->setText(i18nc("@action", "App&ly All"));
+        d->actionCollection->setDefaultShortcut(d->applyAll, QKeySequence(Qt::CTRL | Qt::Key_A));
+        d->unapplyAll = d->actionCollection->addAction(QStringLiteral("difference_unapplyall"), this, &ModelList::slotActionUnapplyAllDifferences);
+        d->unapplyAll->setIcon(QIcon::fromTheme(QStringLiteral("arrow-left-double")));
+        d->unapplyAll->setText(i18nc("@action", "&Unapply All"));
+        d->actionCollection->setDefaultShortcut(d->unapplyAll, QKeySequence(Qt::CTRL | Qt::Key_U));
+    } else {
+        d->applyDifference = nullptr;
+        d->unApplyDifference = nullptr;
+        d->applyAll = nullptr;
+        d->unapplyAll = nullptr;
+    }
+    d->previousFile = d->actionCollection->addAction(QStringLiteral("difference_previousfile"), this, &ModelList::slotPreviousModel);
+    d->previousFile->setIcon(QIcon::fromTheme(QStringLiteral("arrow-up-double")));
+    d->previousFile->setText(i18nc("@action", "P&revious File"));
+    d->actionCollection->setDefaultShortcut(d->previousFile, QKeySequence(Qt::CTRL | Qt::Key_PageUp));
+    d->nextFile = d->actionCollection->addAction(QStringLiteral("difference_nextfile"), this, &ModelList::slotNextModel);
+    d->nextFile->setIcon(QIcon::fromTheme(QStringLiteral("arrow-down-double")));
+    d->nextFile->setText(i18nc("@action", "N&ext File"));
+    d->actionCollection->setDefaultShortcut(d->nextFile, QKeySequence(Qt::CTRL | Qt::Key_PageDown));
+    d->previousDifference = d->actionCollection->addAction(QStringLiteral("difference_previous"), this, &ModelList::slotPreviousDifference);
+    d->previousDifference->setIcon(QIcon::fromTheme(QStringLiteral("arrow-up")));
+    d->previousDifference->setText(i18nc("@action", "&Previous Difference"));
+    d->actionCollection->setDefaultShortcut(d->previousDifference, QKeySequence(Qt::CTRL | Qt::Key_Up));
+    d->nextDifference = d->actionCollection->addAction(QStringLiteral("difference_next"), this, &ModelList::slotNextDifference);
+    d->nextDifference->setIcon(QIcon::fromTheme(QStringLiteral("arrow-down")));
+    d->nextDifference->setText(i18nc("@action", "&Next Difference"));
+    d->actionCollection->setDefaultShortcut(d->nextDifference, QKeySequence(Qt::CTRL | Qt::Key_Down));
+    d->previousDifference->setEnabled(false);
+    d->nextDifference->setEnabled(false);
+
+    if (supportReadWrite) {
+        d->save = KStandardAction::save(this, &ModelList::slotSaveDestination, d->actionCollection);
+        d->save->setEnabled(false);
+    } else {
+        d->save = nullptr;
+    }
+
+    d->updateModelListActions();
+}
+
+ModelList::~ModelList() = default;
+
+bool ModelList::compare()
+{
+    Q_D(ModelList);
+
+    bool result = false;
+
+    bool sourceIsDirectory = ModelListPrivate::isDirectory(d->info->localSource);
+    bool destinationIsDirectory = ModelListPrivate::isDirectory(d->info->localDestination);
+
+    if (sourceIsDirectory && destinationIsDirectory) {
+        d->info->mode = ComparingDirs;
+        result = compare(d->info->mode);
+    } else if (!sourceIsDirectory && !destinationIsDirectory) {
+        QFile sourceFile(d->info->localSource);
+        sourceFile.open(QIODevice::ReadOnly);
+        QMimeDatabase db;
+        QString sourceMimeType = (db.mimeTypeForData(sourceFile.readAll())).name();
+        sourceFile.close();
+        qCDebug(KOMPAREDIFF2_LOG) << "Mimetype source     : " << sourceMimeType;
+
+        QFile destinationFile(d->info->localDestination);
+        destinationFile.open(QIODevice::ReadOnly);
+        QString destinationMimeType = (db.mimeTypeForData(destinationFile.readAll())).name();
+        destinationFile.close();
+        qCDebug(KOMPAREDIFF2_LOG) << "Mimetype destination: " << destinationMimeType;
+
+        // Not checking if it is a text file/something diff can even compare, we'll let diff handle that
+        if (!ModelListPrivate::isDiff(sourceMimeType) && ModelListPrivate::isDiff(destinationMimeType)) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Blending destination into source...";
+            d->info->mode = BlendingFile;
+            result = openFileAndDiff();
+        } else if (ModelListPrivate::isDiff(sourceMimeType) && !ModelListPrivate::isDiff(destinationMimeType)) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Blending source into destination...";
+            d->info->mode = BlendingFile;
+            // Swap source and destination before calling this
+            d->info->swapSourceWithDestination();
+            // Do we need to notify anyone we swapped source and destination?
+            // No we do not need to notify anyone about swapping source with destination
+            result = openFileAndDiff();
+        } else {
+            qCDebug(KOMPAREDIFF2_LOG) << "Comparing source with destination";
+            d->info->mode = ComparingFiles;
+            result = compare(d->info->mode);
+        }
+    } else if (sourceIsDirectory && !destinationIsDirectory) {
+        d->info->mode = BlendingDir;
+        result = openDirAndDiff();
+    } else {
+        d->info->mode = BlendingDir;
+        // Swap source and destination first in d->info
+        d->info->swapSourceWithDestination();
+        // Do we need to notify anyone we swapped source and destination?
+        // No we do not need to notify anyone about swapping source with destination
+        result = openDirAndDiff();
+    }
+
+    return result;
+}
+
+bool ModelList::compare(Mode mode)
+{
+    Q_D(ModelList);
+
+    clear(); // Destroy the old models...
+
+    d->diffProcess = std::make_unique<KompareProcess>(d->diffSettings, Custom, d->info->localSource, d->info->localDestination, QString(), mode);
+    d->diffProcess->setEncoding(d->encoding);
+
+    connect(d->diffProcess.get(), &KompareProcess::diffHasFinished, this, &ModelList::slotDiffProcessFinished);
+
+    Q_EMIT status(RunningDiff);
+    d->diffProcess->start();
+
+    return true;
+}
+
+bool ModelList::openFileAndDiff()
+{
+    Q_D(ModelList);
+
+    clear();
+
+    if (parseDiffOutput(d->readFile(d->info->localDestination)) != 0) {
+        Q_EMIT error(i18n("<qt>No models or no differences, this file: <b>%1</b>, is not a valid diff file.</qt>", d->info->destination.url()));
+        return false;
+    }
+
+    d->setDepthAndApplied();
+
+    if (!blendOriginalIntoModelList(d->info->localSource)) {
+        qCDebug(KOMPAREDIFF2_LOG) << "Oops cant blend original file into modellist : " << d->info->localSource;
+        Q_EMIT error(
+            i18n("<qt>There were problems applying the diff <b>%1</b> to the file <b>%2</b>.</qt>", d->info->destination.url(), d->info->source.url()));
+        return false;
+    }
+
+    d->updateModelListActions();
+    show();
+
+    return true;
+}
+
+bool ModelList::openDirAndDiff()
+{
+    Q_D(ModelList);
+
+    clear();
+
+    if (parseDiffOutput(d->readFile(d->info->localDestination)) != 0) {
+        Q_EMIT error(i18n("<qt>No models or no differences, this file: <b>%1</b>, is not a valid diff file.</qt>", d->info->destination.url()));
+        return false;
+    }
+
+    d->setDepthAndApplied();
+
+    // Do our thing :)
+    if (!blendOriginalIntoModelList(d->info->localSource)) {
+        // Trouble blending the original into the model
+        qCDebug(KOMPAREDIFF2_LOG) << "Oops cant blend original dir into modellist : " << d->info->localSource;
+        Q_EMIT error(
+            i18n("<qt>There were problems applying the diff <b>%1</b> to the folder <b>%2</b>.</qt>", d->info->destination.url(), d->info->source.url()));
+        return false;
+    }
+
+    d->updateModelListActions();
+    show();
+
+    return true;
+}
+
+void ModelList::slotSaveDestination()
+{
+    Q_D(ModelList);
+
+    // Unnecessary safety check! We can now guarantee that saving is only possible when there is a model and there are unsaved changes
+    if (d->selectedModel) {
+        saveDestination(d->selectedModel);
+        if (d->save)
+            d->save->setEnabled(false);
+        Q_EMIT updateActions();
+    }
+}
+
+bool ModelList::saveDestination(DiffModel *model)
+{
+    Q_D(ModelList);
+
+    qCDebug(KOMPAREDIFF2_LOG) << "ModelList::saveDestination: ";
+
+    // Unnecessary safety check, we can guarantee there are unsaved changes!!!
+    if (!model->hasUnsavedChanges())
+        return true;
+
+    QTemporaryFile temp;
+
+    if (!temp.open()) {
+        Q_EMIT error(i18n("Could not open a temporary file."));
+        temp.remove();
+        return false;
+    }
+
+    QTextStream stream(&temp);
+    QStringList list;
+
+    const DiffHunkList *hunks = model->hunks();
+
+    for (const DiffHunk *hunk : *hunks) {
+        const DifferenceList differences = hunk->differences();
+
+        for (const Difference *diff : differences) {
+            if (!diff->applied()) {
+                const DifferenceStringList destinationLines = diff->destinationLines();
+                for (const DifferenceString *diffString : destinationLines) {
+                    list.append(diffString->string());
+                }
+            } else {
+                const DifferenceStringList sourceLines = diff->sourceLines();
+                for (const DifferenceString *diffString : sourceLines) {
+                    list.append(diffString->string());
+                }
+            }
+        }
+    }
+
+    // qCDebug(KOMPAREDIFF2_LOG) << "Everything: " << endl << list.join( "\n" );
+
+    if (list.count() > 0)
+        stream << list.join(QString());
+    if (temp.error() != QFile::NoError) {
+        Q_EMIT error(i18n("<qt>Could not write to the temporary file <b>%1</b>, deleting it.</qt>", temp.fileName()));
+        temp.remove();
+        return false;
+    }
+
+    temp.close();
+    if (temp.error() != QFile::NoError) {
+        Q_EMIT error(i18n("<qt>Could not write to the temporary file <b>%1</b>, deleting it.</qt>", temp.fileName()));
+        temp.remove();
+        return false;
+    }
+
+    bool result = false;
+
+    // Make sure the destination directory exists, it is possible when using -N to not have the destination dir/file available
+    if (d->info->mode == ComparingDirs) {
+        // Don't use destination which was used for creating the diff directly, use the original URL!!!
+        // FIXME!!! Wrong destination this way! Need to add the sub directory to the url!!!!
+        qCDebug(KOMPAREDIFF2_LOG) << "Tempfilename (save) : " << temp.fileName();
+        qCDebug(KOMPAREDIFF2_LOG) << "Model->path+file    : " << model->destinationPath() << model->destinationFile();
+        qCDebug(KOMPAREDIFF2_LOG) << "info->localdest     : " << d->info->localDestination;
+        QString tmp = model->destinationPath();
+        if (tmp.startsWith(d->info->localDestination)) // It should, if not serious trouble...
+            tmp.remove(0, d->info->localDestination.size());
+        qCDebug(KOMPAREDIFF2_LOG) << "DestinationURL      : " << d->info->destination;
+        qCDebug(KOMPAREDIFF2_LOG) << "tmp                 : " << tmp;
+        KIO::UDSEntry entry;
+        QUrl fullDestinationPath = d->info->destination;
+        fullDestinationPath.setPath(fullDestinationPath.path() + tmp);
+        qCDebug(KOMPAREDIFF2_LOG) << "fullDestinationPath : " << fullDestinationPath;
+        KIO::StatJob *statJob = KIO::stat(fullDestinationPath);
+        if (!statJob->exec()) {
+            entry = statJob->statResult();
+            KIO::MkdirJob *mkdirJob = KIO::mkdir(fullDestinationPath);
+            if (!mkdirJob->exec()) {
+                Q_EMIT error(i18n("<qt>Could not create destination directory <b>%1</b>.\nThe file has not been saved.</qt>", fullDestinationPath.path()));
+                return false;
+            }
+        }
+        fullDestinationPath.setPath(fullDestinationPath.path() + model->destinationFile());
+        KIO::FileCopyJob *copyJob = KIO::file_copy(QUrl::fromLocalFile(temp.fileName()), fullDestinationPath, -1, KIO::Overwrite);
+        result = copyJob->exec();
+    } else {
+        qCDebug(KOMPAREDIFF2_LOG) << "Tempfilename   : " << temp.fileName();
+        qCDebug(KOMPAREDIFF2_LOG) << "DestinationURL : " << d->info->destination;
+
+        // Get permissions of existing file and copy temporary file with the same permissions
+        int permissions = -1;
+        KIO::StatJob *statJob = KIO::stat(d->info->destination);
+        result = statJob->exec();
+        if (result)
+            permissions = statJob->statResult().numberValue(KIO::UDSEntry::UDS_ACCESS);
+
+        KIO::FileCopyJob *copyJob = KIO::file_copy(QUrl::fromLocalFile(temp.fileName()), d->info->destination, permissions, KIO::Overwrite);
+        result = copyJob->exec();
+        qCDebug(KOMPAREDIFF2_LOG) << "true or false?" << result;
+    }
+
+    if (!result) {
+        // FIXME: Wrong first argument given in case of comparing directories!
+        Q_EMIT error(
+            i18n("<qt>Could not upload the temporary file to the destination location <b>%1</b>. The temporary file is still available under: <b>%2</b>. You "
+                 "can manually copy it to the right place.</qt>",
+                 d->info->destination.url(),
+                 temp.fileName()));
+        // Don't remove file when we delete temp and don't leak it.
+        temp.setAutoRemove(false);
+    } else {
+        temp.remove();
+    }
+
+    // If saving was fine set all differences to saved so we can start again with a clean slate
+    if (result) {
+        const DifferenceList *differences = model->differences();
+
+        for (Difference *diff : *differences) {
+            diff->setUnsaved(false);
+        }
+    }
+
+    return true;
+}
+
+bool ModelList::saveAll()
+{
+    Q_D(ModelList);
+
+    if (modelCount() == 0)
+        return false;
+
+    for (DiffModel *model : std::as_const(*d->models)) {
+        if (!saveDestination(model))
+            return false;
+    }
+
+    return true;
+}
+
+void ModelList::setEncoding(const QString &encoding)
+{
+    Q_D(ModelList);
+
+    d->encoding = encoding;
+    if (!encoding.compare(QLatin1String("default"), Qt::CaseInsensitive)) {
+        d->textDecoder = QStringDecoder(QStringDecoder::System);
+    } else {
+        qCDebug(KOMPAREDIFF2_LOG) << "Encoding : " << encoding;
+        d->textDecoder = QStringDecoder(encoding.toUtf8().constData());
+        qCDebug(KOMPAREDIFF2_LOG) << "TextCodec: " << d->textDecoder.name();
+        if (!d->textDecoder.isValid())
+            d->textDecoder = QStringDecoder(QStringDecoder::System);
+    }
+    qCDebug(KOMPAREDIFF2_LOG) << "TextCodec: " << d->textDecoder.name();
+}
+
+void ModelList::setReadWrite(bool isReadWrite)
+{
+    Q_D(ModelList);
+
+    if (d->isReadWrite == isReadWrite)
+        return;
+
+    d->isReadWrite = isReadWrite;
+    d->updateModelListActions();
+}
+
+bool ModelList::isReadWrite() const
+{
+    Q_D(const ModelList);
+
+    return d->isReadWrite;
+}
+
+void ModelList::slotDiffProcessFinished(bool success)
+{
+    Q_D(ModelList);
+
+    if (success) {
+        Q_EMIT status(Parsing);
+        if (parseDiffOutput(d->diffProcess->diffOutput()) != 0) {
+            Q_EMIT error(i18n("Could not parse diff output."));
+        } else {
+            if (d->info->mode != ShowingDiff) {
+                qCDebug(KOMPAREDIFF2_LOG) << "Blend this crap please and do not give me any conflicts...";
+                blendOriginalIntoModelList(d->info->localSource);
+            }
+            d->updateModelListActions();
+            show();
+        }
+        Q_EMIT status(FinishedParsing);
+    } else if (d->diffProcess->exitStatus() == 0) {
+        Q_EMIT error(i18n("The files are identical."));
+    } else {
+        Q_EMIT error(d->diffProcess->stdErr());
+    }
+
+    // delay deletion, see bug 182792
+    d->diffProcess.release()->deleteLater();
+}
+
+bool ModelList::openDiff(const QString &diffFile)
+{
+    Q_D(ModelList);
+
+    qCDebug(KOMPAREDIFF2_LOG) << "Stupid :) Url = " << diffFile;
+
+    if (diffFile.isEmpty())
+        return false;
+
+    QString diff = d->readFile(diffFile);
+
+    clear(); // Clear the current models
+
+    Q_EMIT status(Parsing);
+
+    if (parseDiffOutput(diff) != 0) {
+        Q_EMIT error(i18n("Could not parse diff output."));
+        return false;
+    }
+
+    d->updateModelListActions();
+    show();
+
+    Q_EMIT status(FinishedParsing);
+
+    return true;
+}
+
+bool ModelList::parseAndOpenDiff(const QString &diff)
+{
+    Q_D(ModelList);
+
+    clear(); // Clear the current models
+
+    Q_EMIT status(Parsing);
+
+    if (parseDiffOutput(diff) != 0) {
+        Q_EMIT error(i18n("Could not parse diff output."));
+        return false;
+    }
+
+    d->updateModelListActions();
+    show();
+
+    Q_EMIT status(FinishedParsing);
+    return true;
+}
+
+QString ModelList::recreateDiff() const
+{
+    Q_D(const ModelList);
+
+    QString diff;
+
+    for (const DiffModel *model : *d->models) {
+        diff += model->recreateDiff();
+    }
+
+    return diff;
+}
+
+bool ModelList::saveDiff(const QString &url, const QString &directory, DiffSettings *diffSettings)
+{
+    Q_D(ModelList);
+
+    qCDebug(KOMPAREDIFF2_LOG) << "ModelList::saveDiff: ";
+
+    d->diffTemp = std::make_unique<QTemporaryFile>();
+    d->diffURL = QUrl(url); // ### TODO the "url" argument should be a QUrl
+
+    if (!d->diffTemp->open()) {
+        Q_EMIT error(i18n("Could not open a temporary file."));
+        d->diffTemp->remove();
+        d->diffTemp.reset();
+        return false;
+    }
+
+    d->diffProcess = std::make_unique<KompareProcess>(diffSettings, Custom, d->info->localSource, d->info->localDestination, directory);
+    d->diffProcess->setEncoding(d->encoding);
+
+    connect(d->diffProcess.get(), &KompareProcess::diffHasFinished, this, &ModelList::slotWriteDiffOutput);
+
+    Q_EMIT status(RunningDiff);
+    d->diffProcess->start();
+    return true;
+}
+
+void ModelList::slotWriteDiffOutput(bool success)
+{
+    Q_D(ModelList);
+
+    qCDebug(KOMPAREDIFF2_LOG) << "Success = " << success;
+
+    if (success) {
+        QTextStream stream(d->diffTemp.get());
+
+        stream << d->diffProcess->diffOutput();
+
+        d->diffTemp->close();
+
+        if (false /*|| d->diffTemp->status() != 0 */) {
+            Q_EMIT error(i18n("Could not write to the temporary file."));
+        }
+
+        KIO::FileCopyJob *copyJob = KIO::file_copy(QUrl::fromLocalFile(d->diffTemp->fileName()), d->diffURL);
+        copyJob->exec();
+
+        Q_EMIT status(FinishedWritingDiff);
+    }
+
+    d->diffURL = QUrl();
+    d->diffTemp->remove();
+    d->diffTemp.reset();
+
+    d->diffProcess.reset();
+}
+
+void ModelList::slotSelectionChanged(const KompareDiff2::DiffModel *model, const KompareDiff2::Difference *diff)
+{
+    Q_D(ModelList);
+
+    // This method will signal all the other objects about a change in selection,
+    // it will emit setSelection( const DiffModel*, const Difference* ) to all who are connected
+    qCDebug(KOMPAREDIFF2_LOG) << "ModelList::slotSelectionChanged( " << model << ", " << diff << " )";
+    qCDebug(KOMPAREDIFF2_LOG) << "Sender is : " << sender()->metaObject()->className();
+//     qCDebug(KOMPAREDIFF2_LOG) << kBacktrace();
+
+    d->selectedModel = const_cast<DiffModel *>(model);
+    d->modelIndex = d->models->indexOf(d->selectedModel);
+    qCDebug(KOMPAREDIFF2_LOG) << "d->modelIndex = " << d->modelIndex;
+    d->selectedDifference = const_cast<Difference *>(diff);
+
+    d->selectedModel->setSelectedDifference(d->selectedDifference);
+
+    // setSelected* search for the argument in the lists and return false if not found
+    // if found they return true and set the d->selected*
+    if (!d->setSelectedModel(d->selectedModel)) {
+        // Backup plan
+        d->selectedModel = d->firstModel();
+        d->selectedDifference = d->selectedModel->firstDifference();
+    } else if (!d->selectedModel->setSelectedDifference(d->selectedDifference)) {
+        // Another backup plan
+        d->selectedDifference = d->selectedModel->firstDifference();
+    }
+
+    Q_EMIT setSelection(model, diff);
+    Q_EMIT setStatusBarModelInfo(findModel(d->selectedModel),
+                                 d->selectedModel->findDifference(d->selectedDifference),
+                                 modelCount(),
+                                 differenceCount(),
+                                 d->selectedModel->appliedCount());
+
+    d->updateModelListActions();
+}
+
+void ModelList::slotSelectionChanged(const KompareDiff2::Difference *diff)
+{
+    Q_D(ModelList);
+
+    // This method will emit setSelection( const Difference* ) to whomever is listening
+    // when for instance in kompareview the selection has changed
+    qCDebug(KOMPAREDIFF2_LOG) << "ModelList::slotSelectionChanged( " << diff << " )";
+    qCDebug(KOMPAREDIFF2_LOG) << "Sender is : " << sender()->metaObject()->className();
+
+    d->selectedDifference = const_cast<Difference *>(diff);
+
+    if (!d->selectedModel->setSelectedDifference(d->selectedDifference)) {
+        // Backup plan
+        d->selectedDifference = d->selectedModel->firstDifference();
+    }
+
+    Q_EMIT setSelection(diff);
+    Q_EMIT setStatusBarModelInfo(findModel(d->selectedModel),
+                                 d->selectedModel->findDifference(d->selectedDifference),
+                                 modelCount(),
+                                 differenceCount(),
+                                 d->selectedModel->appliedCount());
+
+    d->updateModelListActions();
+}
+
+void ModelList::slotPreviousModel()
+{
+    Q_D(ModelList);
+
+    if ((d->selectedModel = d->prevModel()) != nullptr) {
+        d->selectedDifference = d->selectedModel->firstDifference();
+    } else {
+        d->selectedModel = d->firstModel();
+        d->selectedDifference = d->selectedModel->firstDifference();
+    }
+
+    Q_EMIT setSelection(d->selectedModel, d->selectedDifference);
+    Q_EMIT setStatusBarModelInfo(findModel(d->selectedModel),
+                                 d->selectedModel->findDifference(d->selectedDifference),
+                                 modelCount(),
+                                 differenceCount(),
+                                 d->selectedModel->appliedCount());
+    d->updateModelListActions();
+}
+
+void ModelList::slotNextModel()
+{
+    Q_D(ModelList);
+
+    if ((d->selectedModel = d->nextModel()) != nullptr) {
+        d->selectedDifference = d->selectedModel->firstDifference();
+    } else {
+        d->selectedModel = d->lastModel();
+        d->selectedDifference = d->selectedModel->firstDifference();
+    }
+
+    Q_EMIT setSelection(d->selectedModel, d->selectedDifference);
+    Q_EMIT setStatusBarModelInfo(findModel(d->selectedModel),
+                                 d->selectedModel->findDifference(d->selectedDifference),
+                                 modelCount(),
+                                 differenceCount(),
+                                 d->selectedModel->appliedCount());
+    d->updateModelListActions();
+}
+
+Mode ModelList::mode() const
+{
+    Q_D(const ModelList);
+
+    return d->info->mode;
+}
+
+const DiffModelList *ModelList::models() const
+{
+    Q_D(const ModelList);
+
+    return d->models.get();
+}
+
+KActionCollection *ModelList::actionCollection() const
+{
+    Q_D(const ModelList);
+
+    return d->actionCollection;
+}
+
+void ModelList::slotPreviousDifference()
+{
+    Q_D(ModelList);
+
+    qCDebug(KOMPAREDIFF2_LOG) << "slotPreviousDifference called";
+    if ((d->selectedDifference = d->selectedModel->prevDifference()) != nullptr) {
+        Q_EMIT setSelection(d->selectedDifference);
+        Q_EMIT setStatusBarModelInfo(findModel(d->selectedModel),
+                                     d->selectedModel->findDifference(d->selectedDifference),
+                                     modelCount(),
+                                     differenceCount(),
+                                     d->selectedModel->appliedCount());
+        d->updateModelListActions();
+        return;
+    }
+
+    qCDebug(KOMPAREDIFF2_LOG) << "**** no previous difference... ok lets find the previous model...";
+
+    if ((d->selectedModel = d->prevModel()) != nullptr) {
+        d->selectedDifference = d->selectedModel->lastDifference();
+
+        Q_EMIT setSelection(d->selectedModel, d->selectedDifference);
+        Q_EMIT setStatusBarModelInfo(findModel(d->selectedModel),
+                                     d->selectedModel->findDifference(d->selectedDifference),
+                                     modelCount(),
+                                     differenceCount(),
+                                     d->selectedModel->appliedCount());
+        d->updateModelListActions();
+        return;
+    }
+
+    qCDebug(KOMPAREDIFF2_LOG) << "**** !!! No previous model, ok backup plan activated...";
+
+    // Backup plan
+    d->selectedModel = d->firstModel();
+    d->selectedDifference = d->selectedModel->firstDifference();
+
+    Q_EMIT setSelection(d->selectedModel, d->selectedDifference);
+    Q_EMIT setStatusBarModelInfo(findModel(d->selectedModel),
+                                 d->selectedModel->findDifference(d->selectedDifference),
+                                 modelCount(),
+                                 differenceCount(),
+                                 d->selectedModel->appliedCount());
+    d->updateModelListActions();
+}
+
+void ModelList::slotNextDifference()
+{
+    Q_D(ModelList);
+
+    qCDebug(KOMPAREDIFF2_LOG) << "slotNextDifference called";
+    if ((d->selectedDifference = d->selectedModel->nextDifference()) != nullptr) {
+        Q_EMIT setSelection(d->selectedDifference);
+        Q_EMIT setStatusBarModelInfo(findModel(d->selectedModel),
+                                     d->selectedModel->findDifference(d->selectedDifference),
+                                     modelCount(),
+                                     differenceCount(),
+                                     d->selectedModel->appliedCount());
+        d->updateModelListActions();
+        return;
+    }
+
+    qCDebug(KOMPAREDIFF2_LOG) << "**** no next difference... ok lets find the next model...";
+
+    if ((d->selectedModel = d->nextModel()) != nullptr) {
+        d->selectedDifference = d->selectedModel->firstDifference();
+
+        Q_EMIT setSelection(d->selectedModel, d->selectedDifference);
+        Q_EMIT setStatusBarModelInfo(findModel(d->selectedModel),
+                                     d->selectedModel->findDifference(d->selectedDifference),
+                                     modelCount(),
+                                     differenceCount(),
+                                     d->selectedModel->appliedCount());
+        d->updateModelListActions();
+        return;
+    }
+
+    qCDebug(KOMPAREDIFF2_LOG) << "**** !!! No next model, ok backup plan activated...";
+
+    // Backup plan
+    d->selectedModel = d->lastModel();
+    d->selectedDifference = d->selectedModel->lastDifference();
+
+    Q_EMIT setSelection(d->selectedModel, d->selectedDifference);
+    Q_EMIT setStatusBarModelInfo(findModel(d->selectedModel),
+                                 d->selectedModel->findDifference(d->selectedDifference),
+                                 modelCount(),
+                                 differenceCount(),
+                                 d->selectedModel->appliedCount());
+    d->updateModelListActions();
+}
+
+void ModelList::slotApplyDifference(bool apply)
+{
+    Q_D(ModelList);
+
+    d->selectedModel->applyDifference(apply);
+    Q_EMIT applyDifference(apply);
+}
+
+void ModelList::slotApplyAllDifferences(bool apply)
+{
+    Q_D(ModelList);
+
+    d->selectedModel->applyAllDifferences(apply);
+    Q_EMIT applyAllDifferences(apply);
+}
+
+int ModelList::parseDiffOutput(const QString &diff)
+{
+    Q_D(ModelList);
+
+    qCDebug(KOMPAREDIFF2_LOG) << "ModelList::parseDiffOutput";
+    Q_EMIT diffString(diff);
+
+    QStringList diffLines = ModelListPrivate::split(diff);
+
+    std::unique_ptr<Parser> parser = std::make_unique<Parser>(this);
+    bool malformed = false;
+    d->models.reset(parser->parse(diffLines, &malformed));
+
+    d->info->generator = parser->generator();
+    d->info->format = parser->format();
+
+    parser.reset();
+
+    if (d->models) {
+        if (malformed) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Malformed diff";
+            Q_EMIT error(i18n("The diff is malformed. Some lines could not be parsed and will not be displayed in the diff view."));
+            // proceed anyway with the lines which have been parsed
+        }
+        d->selectedModel = d->firstModel();
+        qCDebug(KOMPAREDIFF2_LOG) << "Ok there are differences...";
+        d->selectedDifference = d->selectedModel->firstDifference();
+        Q_EMIT setStatusBarModelInfo(0, 0, modelCount(), differenceCount(), 0);
+    } else {
+        // Wow trouble, no models, so no differences...
+        qCDebug(KOMPAREDIFF2_LOG) << "Now i'll be damned, there should be models here !!!";
+        return -1;
+    }
+
+    return 0;
+}
+
+bool ModelList::blendOriginalIntoModelList(const QString &localURL)
+{
+    Q_D(ModelList);
+
+    qCDebug(KOMPAREDIFF2_LOG) << "Hurrah we are blending...";
+    QFileInfo fi(localURL);
+
+    bool result = false;
+
+    QString fileContents;
+
+    if (fi.isDir()) { // is a dir
+        qCDebug(KOMPAREDIFF2_LOG) << "Blend Dir";
+//      QDir dir( localURL, QString(), QDir::Name|QDir::DirsFirst, QDir::TypeMask );
+        for (DiffModel *model : std::as_const(*d->models)) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Model : " << model;
+            QString filename = model->source();
+            if (!filename.startsWith(localURL))
+                filename = QDir(localURL).filePath(filename);
+            QFileInfo fi2(filename);
+            if (fi2.exists()) {
+                qCDebug(KOMPAREDIFF2_LOG) << "Reading from: " << filename;
+                fileContents = d->readFile(filename);
+                result = d->blendFile(model, fileContents);
+            } else {
+                qCDebug(KOMPAREDIFF2_LOG) << "File " << filename << " does not exist !";
+                qCDebug(KOMPAREDIFF2_LOG) << "Assume empty file !";
+                fileContents.truncate(0);
+                result = d->blendFile(model, fileContents);
+            }
+        }
+        qCDebug(KOMPAREDIFF2_LOG) << "End of Blend Dir";
+    } else if (fi.isFile()) { // is a file
+        qCDebug(KOMPAREDIFF2_LOG) << "Blend File";
+        qCDebug(KOMPAREDIFF2_LOG) << "Reading from: " << localURL;
+        fileContents = d->readFile(localURL);
+
+        result = d->blendFile((*d->models)[0], fileContents);
+        qCDebug(KOMPAREDIFF2_LOG) << "End of Blend File";
+    }
+
+    return result;
+}
+
+void ModelList::show()
+{
+    Q_D(ModelList);
+
+    qCDebug(KOMPAREDIFF2_LOG) << "ModelList::Show Number of models = " << d->models->count();
+    Q_EMIT modelsChanged(d->models.get());
+    Q_EMIT setSelection(d->selectedModel, d->selectedDifference);
+}
+
+const DiffModel *ModelList::modelAt(int i) const
+{
+    Q_D(const ModelList);
+
+    return d->models->at(i);
+}
+
+DiffModel *ModelList::modelAt(int i)
+{
+    Q_D(ModelList);
+
+    return d->models->at(i);
+}
+
+int ModelList::findModel(DiffModel *model) const
+{
+    Q_D(const ModelList);
+
+    return d->models->indexOf(model);
+}
+
+int ModelList::currentModel() const
+{
+    Q_D(const ModelList);
+
+    return d->models->indexOf(d->selectedModel);
+}
+
+int ModelList::currentDifference() const
+{
+    Q_D(const ModelList);
+
+    return d->selectedModel ? d->selectedModel->findDifference(d->selectedDifference) : -1;
+}
+
+const DiffModel *ModelList::selectedModel() const
+{
+    Q_D(const ModelList);
+
+    return d->selectedModel;
+}
+
+const Difference *ModelList::selectedDifference() const
+{
+    Q_D(const ModelList);
+
+    return d->selectedDifference;
+}
+
+void ModelList::clear()
+{
+    Q_D(ModelList);
+
+    if (d->models)
+        d->models->clear();
+
+    Q_EMIT modelsChanged(d->models.get());
+}
+
+void ModelList::refresh()
+{
+    Q_D(ModelList);
+
+    // FIXME: I can imagine blending also wants to be refreshed so make a switch case here
+    compare(d->info->mode);
+}
+
+void ModelList::swap()
+{
+    Q_D(ModelList);
+
+    // FIXME Not sure if any mode could be swapped
+    if (d->info->mode == ComparingFiles)
+        compare(d->info->mode);
+    else if (d->info->mode == ComparingDirs)
+        compare(d->info->mode);
+}
+
+bool ModelList::hasUnsavedChanges() const
+{
+    Q_D(const ModelList);
+
+    if (!d->models) {
+        return false;
+    }
+
+    return std::any_of(d->models->constBegin(), d->models->constEnd(), [] (const DiffModel *model) {
+        return model->hasUnsavedChanges();
+    });
+}
+
+int ModelList::modelCount() const
+{
+    Q_D(const ModelList);
+
+    return d->models ? d->models->count() : 0;
+}
+
+int ModelList::differenceCount() const
+{
+    Q_D(const ModelList);
+
+    return d->selectedModel ? d->selectedModel->differenceCount() : -1;
+}
+
+int ModelList::appliedCount() const
+{
+    Q_D(const ModelList);
+
+    return d->selectedModel ? d->selectedModel->appliedCount() : -1;
+}
+
+void ModelList::slotKompareInfo(Info *info)
+{
+    Q_D(ModelList);
+
+    d->info = info;
+}
+
+void ModelList::slotActionApplyDifference()
+{
+    Q_D(ModelList);
+
+    if (!d->selectedDifference->applied())
+        slotApplyDifference(true);
+    slotNextDifference();
+    d->updateModelListActions();
+}
+
+void ModelList::slotActionUnApplyDifference()
+{
+    Q_D(ModelList);
+
+    if (d->selectedDifference->applied())
+        slotApplyDifference(false);
+    slotPreviousDifference();
+    d->updateModelListActions();
+}
+
+void ModelList::slotActionApplyAllDifferences()
+{
+    Q_D(ModelList);
+
+    slotApplyAllDifferences(true);
+    d->updateModelListActions();
+}
+
+void ModelList::slotActionUnapplyAllDifferences()
+{
+    Q_D(ModelList);
+
+    slotApplyAllDifferences(false);
+    d->updateModelListActions();
+}
+
+#include "moc_modellist.cpp"
diff --git a/src/modellist.h b/src/modellist.h
new file mode 100644
index 000000000000..31ad1ebc9193
--- /dev/null
+++ b/src/modellist.h
@@ -0,0 +1,151 @@
+/*
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+    SPDX-FileCopyrightText: 2001-2005,2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2007-2008 Kevin Kofler <kevin.kofler@chello.at>
+    SPDX-FileCopyrightText: 2012 Jean -Nicolas Artaud <jeannicolasartaud@gmail.com>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#ifndef KOMPAREDIFF2_MODELLIST_H
+#define KOMPAREDIFF2_MODELLIST_H
+
+// lib
+#include "diffmodel.h"
+#include "diffmodellist.h"
+#include "info.h"
+#include "komparediff2_export.h"
+// Qt
+#include <QObject>
+// Std
+#include <memory>
+
+class KActionCollection;
+
+namespace KompareDiff2
+{
+class DiffSettings;
+class ModelListPrivate;
+
+/**
+ * @class ModelList modellist.h <KompareDiff2/ModelList>
+ *
+ * ModelList
+ */
+class KOMPAREDIFF2_EXPORT ModelList : public QObject
+{
+    Q_OBJECT
+public:
+    ModelList(DiffSettings *diffSettings, QObject *parent, bool supportReadWrite = true);
+    ~ModelList() override;
+
+public:
+    void refresh();
+    // Swap source with destination and show differences
+    void swap();
+
+    /* Comparing methods */
+    bool compare();
+
+    bool compare(Mode);
+
+    bool openDiff(const QString &diff);
+
+    bool openFileAndDiff();
+    bool openDirAndDiff();
+
+    bool saveDiff(const QString &url, const QString &directory, DiffSettings *diffSettings);
+    bool saveAll();
+
+    bool saveDestination(DiffModel *model);
+
+    void setEncoding(const QString &encoding);
+
+    void setReadWrite(bool isReadWrite);
+    bool isReadWrite() const;
+
+    QString recreateDiff() const;
+
+    // This parses the difflines and creates new models
+    int parseDiffOutput(const QString &diff);
+
+    // This open the difflines after parsing them
+    bool parseAndOpenDiff(const QString &diff);
+
+    // Call this to emit the signals to the rest of the "world" to show the diff
+    void show();
+
+    // This will blend the original URL (dir or file) into the diffmodel,
+    // this is like patching but with a twist
+    bool blendOriginalIntoModelList(const QString &localURL);
+
+    // This mode() method is superfluous now so FIXME
+    Mode mode() const;
+    const DiffModelList *models() const;
+
+    KActionCollection *actionCollection() const;
+    int modelCount() const;
+    int differenceCount() const;
+    int appliedCount() const;
+
+    const DiffModel *modelAt(int i) const;
+    DiffModel *modelAt(int i);
+    int findModel(DiffModel *model) const;
+
+    bool hasUnsavedChanges() const;
+
+    int currentModel() const;
+    int currentDifference() const;
+
+    const DiffModel *selectedModel() const;
+    const Difference *selectedDifference() const;
+
+    void clear();
+
+Q_SIGNALS:
+    void status(KompareDiff2::Status status);
+    void setStatusBarModelInfo(int modelIndex, int differenceIndex, int modelCount, int differenceCount, int appliedCount);
+    void error(const QString &error);
+    void modelsChanged(const KompareDiff2::DiffModelList *models);
+    void setSelection(const KompareDiff2::DiffModel *model, const KompareDiff2::Difference *diff);
+    void setSelection(const KompareDiff2::Difference *diff);
+    void applyDifference(bool apply);
+    void applyAllDifferences(bool apply);
+    void applyDifference(const KompareDiff2::Difference *diff, bool apply);
+    void diffString(const QString &);
+    void updateActions();
+
+public Q_SLOTS:
+    void slotSelectionChanged(const KompareDiff2::DiffModel *model, const KompareDiff2::Difference *diff);
+    void slotSelectionChanged(const KompareDiff2::Difference *diff);
+
+    void slotApplyDifference(bool apply);
+    void slotApplyAllDifferences(bool apply);
+    void slotPreviousModel();
+    void slotNextModel();
+    void slotPreviousDifference();
+    void slotNextDifference();
+
+    void slotKompareInfo(KompareDiff2::Info *);
+
+protected Q_SLOTS:
+    void slotDiffProcessFinished(bool success);
+    void slotWriteDiffOutput(bool success);
+
+    void slotActionApplyDifference();
+    void slotActionUnApplyDifference();
+    void slotActionApplyAllDifferences();
+    void slotActionUnapplyAllDifferences();
+
+    /** Save the currently selected destination in a multi-file diff,
+        or the single destination if a single file diff. */
+    void slotSaveDestination();
+
+private:
+    Q_DECLARE_PRIVATE(ModelList)
+    std::unique_ptr<ModelListPrivate> const d_ptr;
+};
+
+} // End of namespace KompareDiff2
+
+#endif
diff --git a/src/modellist_p.cpp b/src/modellist_p.cpp
new file mode 100644
index 000000000000..68264f71674c
--- /dev/null
+++ b/src/modellist_p.cpp
@@ -0,0 +1,500 @@
+/*
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+    SPDX-FileCopyrightText: 2001-2005,2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2007-2008 Kevin Kofler <kevin.kofler@chello.at>
+    SPDX-FileCopyrightText: 2012 Jean -Nicolas Artaud <jeannicolasartaud@gmail.com>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#include "modellist_p.h"
+
+// lib
+#include "info.h"
+#include <komparediff2_logging.h>
+// Qt
+#include <QAction>
+
+using namespace KompareDiff2;
+
+QStringList ModelListPrivate::split(const QString &fileContents)
+{
+    QString contents = fileContents;
+    QStringList list;
+
+    int pos = 0;
+    int oldpos = 0;
+    // split that does not strip the split char
+#ifdef QT_OS_MAC
+    const QLatin1Char split = QLatin1Char('\r');
+#else
+    const QLatin1Char split = QLatin1Char('\n');
+#endif
+    while ((pos = contents.indexOf(split, oldpos)) >= 0) {
+        list.append(contents.mid(oldpos, pos - oldpos + 1));
+        oldpos = pos + 1;
+    }
+
+    if (contents.length() > oldpos) {
+        list.append(contents.right(contents.length() - oldpos));
+    }
+
+    return list;
+}
+
+QString ModelListPrivate::readFile(const QString &fileName)
+{
+    QStringList list;
+
+    QFile file(fileName);
+    file.open(QIODevice::ReadOnly);
+
+    qCDebug(KOMPAREDIFF2_LOG) << "Codec = " << textDecoder.name();
+    if (!textDecoder.isValid())
+        textDecoder = QStringDecoder(QStringDecoder::System);
+    textDecoder.resetState();
+
+    QString contents;
+    while (!file.atEnd()) {
+        char buffer[4096];
+        const auto len = file.read(buffer, 4096);
+        contents += textDecoder.decode(QByteArrayView(buffer, len));
+    }
+
+    file.close();
+
+    return contents;
+}
+
+bool ModelListPrivate::hasPrevModel() const
+{
+    // qCDebug(KOMPAREDIFF2_LOG) << "ModelListPrivate::hasPrevModel()";
+
+    if (modelIndex > 0) {
+//         qCDebug(KOMPAREDIFF2_LOG) << "has prev model";
+        return true;
+    }
+
+//     qCDebug(KOMPAREDIFF2_LOG) << "doesn't have a prev model, this is the first one...";
+
+    return false;
+}
+
+bool ModelListPrivate::hasNextModel() const
+{
+    // qCDebug(KOMPAREDIFF2_LOG) << "ModelListPrivate::hasNextModel()";
+
+    if (modelIndex < (models->count() - 1)) {
+//         qCDebug(KOMPAREDIFF2_LOG) << "has next model";
+        return true;
+    }
+
+//     qCDebug(KOMPAREDIFF2_LOG) << "doesn't have a next model, this is the last one...";
+    return false;
+}
+
+bool ModelListPrivate::hasPrevDiff() const
+{
+//     qCDebug(KOMPAREDIFF2_LOG) << "ModelListPrivate::hasPrevDiff()";
+    const int index = selectedModel->diffIndex();
+
+    if (index > 0) {
+//         qCDebug(KOMPAREDIFF2_LOG) << "has prev difference in same model";
+        return true;
+    }
+
+    if (hasPrevModel()) {
+//         qCDebug(KOMPAREDIFF2_LOG) << "has prev difference but in prev model";
+        return true;
+    }
+
+//     qCDebug(KOMPAREDIFF2_LOG) << "doesn't have a prev difference, not even in the previous model because there is no previous model";
+
+    return false;
+}
+
+bool ModelListPrivate::hasNextDiff() const
+{
+//     qCDebug(KOMPAREDIFF2_LOG) << "ModelListPrivate::hasNextDiff()";
+    const int index = selectedModel->diffIndex();
+
+    if (index < (selectedModel->differenceCount() - 1)) {
+//         qCDebug(KOMPAREDIFF2_LOG) << "has next difference in same model";
+        return true;
+    }
+
+    if (hasNextModel()) {
+//         qCDebug(KOMPAREDIFF2_LOG) << "has next difference but in next model";
+        return true;
+    }
+
+//     qCDebug(KOMPAREDIFF2_LOG) << "doesn't have a next difference, not even in next model because there is no next model";
+
+    return false;
+}
+
+static QString lstripSeparators(const QString &from, uint count)
+{
+    int position = 0;
+    for (uint i = 0; i < count; ++i) {
+        position = from.indexOf(QLatin1Char('/'), position);
+        if (position == -1) {
+            break;
+        }
+    }
+    if (position == -1) {
+        return QString();
+    }
+
+    return from.mid(position + 1);
+}
+
+void ModelListPrivate::setDepthAndApplied()
+{
+    // Splice to avoid calling ~DiffModelList
+    const QList<KompareDiff2::DiffModel *> splicedModelList(*models);
+    for (DiffModel *model : splicedModelList) {
+        model->setSourceFile(lstripSeparators(model->source(), info->depth));
+        model->setDestinationFile(lstripSeparators(model->destination(), info->depth));
+        model->applyAllDifferences(info->applied);
+    }
+}
+
+DiffModel *ModelListPrivate::firstModel()
+{
+    qCDebug(KOMPAREDIFF2_LOG) << "ModelListPrivate::firstModel()";
+    modelIndex = 0;
+    qCDebug(KOMPAREDIFF2_LOG) << "modelIndex = " << modelIndex;
+
+    selectedModel = models->first();
+
+    return selectedModel;
+}
+
+DiffModel *ModelListPrivate::lastModel()
+{
+    qCDebug(KOMPAREDIFF2_LOG) << "ModelListPrivate::lastModel()";
+    modelIndex = models->count() - 1;
+    qCDebug(KOMPAREDIFF2_LOG) << "modelIndex = " << modelIndex;
+
+    selectedModel = models->last();
+
+    return selectedModel;
+}
+
+DiffModel *ModelListPrivate::prevModel()
+{
+    qCDebug(KOMPAREDIFF2_LOG) << "ModelListPrivate::prevModel()";
+    if (modelIndex > 0 && --modelIndex < models->count()) {
+        qCDebug(KOMPAREDIFF2_LOG) << "modelIndex = " << modelIndex;
+        selectedModel = (*models)[modelIndex];
+    } else {
+        selectedModel = nullptr;
+        modelIndex = 0;
+        qCDebug(KOMPAREDIFF2_LOG) << "modelIndex = " << modelIndex;
+    }
+
+    return selectedModel;
+}
+
+DiffModel *ModelListPrivate::nextModel()
+{
+    qCDebug(KOMPAREDIFF2_LOG) << "ModelListPrivate::nextModel()";
+    if (++modelIndex < models->count()) {
+        qCDebug(KOMPAREDIFF2_LOG) << "modelIndex = " << modelIndex;
+        selectedModel = (*models)[modelIndex];
+    } else {
+        selectedModel = nullptr;
+        modelIndex = 0;
+        qCDebug(KOMPAREDIFF2_LOG) << "modelIndex = " << modelIndex;
+    }
+
+    return selectedModel;
+}
+
+bool ModelListPrivate::setSelectedModel(DiffModel *model)
+{
+    qCDebug(KOMPAREDIFF2_LOG) << "ModelListPrivate::setSelectedModel( " << model << " )";
+
+    if (model != selectedModel) {
+        if (!models->contains(model))
+            return false;
+        qCDebug(KOMPAREDIFF2_LOG) << "selectedModel (was) = " << selectedModel;
+        modelIndex = models->indexOf(model);
+        qCDebug(KOMPAREDIFF2_LOG) << "selectedModel (is)  = " << selectedModel;
+        selectedModel = model;
+    }
+
+    updateModelListActions();
+
+    return true;
+}
+
+void ModelListPrivate::updateModelListActions()
+{
+    if (models && selectedModel && selectedDifference) {
+        if (isReadWrite && save) {
+            if (selectedModel->appliedCount() != selectedModel->differenceCount())
+                applyAll->setEnabled(true);
+            else
+                applyAll->setEnabled(false);
+
+            if (selectedModel->appliedCount() != 0)
+                unapplyAll->setEnabled(true);
+            else
+                unapplyAll->setEnabled(false);
+
+            applyDifference->setEnabled(selectedDifference->applied() == false);
+            unApplyDifference->setEnabled(selectedDifference->applied() == true);
+            save->setEnabled(selectedModel->hasUnsavedChanges());
+        } else if (save) {
+            applyDifference->setEnabled(false);
+            unApplyDifference->setEnabled(false);
+            applyAll->setEnabled(false);
+            unapplyAll->setEnabled(false);
+            save->setEnabled(false);
+        }
+
+        previousFile->setEnabled(hasPrevModel());
+        nextFile->setEnabled(hasNextModel());
+        previousDifference->setEnabled(hasPrevDiff());
+        nextDifference->setEnabled(hasNextDiff());
+    } else {
+        if (save) {
+            applyDifference->setEnabled(false);
+            unApplyDifference->setEnabled(false);
+            applyAll->setEnabled(false);
+            unapplyAll->setEnabled(false);
+            save->setEnabled(false);
+        }
+
+        previousFile->setEnabled(false);
+        nextFile->setEnabled(false);
+        previousDifference->setEnabled(false);
+        nextDifference->setEnabled(false);
+    }
+}
+
+bool ModelListPrivate::blendFile(DiffModel *model, const QString &fileContents)
+{
+    if (!model) {
+        qCDebug(KOMPAREDIFF2_LOG) << "**** model is null :(";
+        return false;
+    }
+
+    model->setBlended(true);
+
+    int srcLineNo = 1, destLineNo = 1;
+
+    const QStringList lines = split(fileContents);
+    auto linesIt = lines.constBegin(), lEnd = lines.constEnd();
+
+    DiffHunkList *hunks = model->hunks();
+    qCDebug(KOMPAREDIFF2_LOG) << "Hunks in hunklist: " << hunks->count();
+    DiffHunkListIterator hunkIt = hunks->begin();
+
+    DiffHunk *newHunk = nullptr;
+    Difference *newDiff = nullptr;
+
+    // FIXME: this approach is not very good, we should first check if the hunk applies cleanly
+    // and without offset and if not use that new linenumber with offset to compare against
+    // This will only work for files we just diffed with kompare but not for blending where
+    // file(s) to patch has/have potentially changed
+
+    for (; hunkIt != hunks->end(); ++hunkIt) {
+        // Do we need to insert a new hunk before this one ?
+        DiffHunk *hunk = *hunkIt;
+        if (srcLineNo < hunk->sourceLineNumber()) {
+            newHunk = new DiffHunk(srcLineNo, destLineNo, QString(), DiffHunk::AddedByBlend);
+
+            hunkIt = ++hunks->insert(hunkIt, newHunk);
+
+            newDiff = new Difference(srcLineNo, destLineNo, Difference::Unchanged);
+
+            newHunk->add(newDiff);
+
+            while (srcLineNo < hunk->sourceLineNumber() && linesIt != lEnd) {
+                newDiff->addSourceLine(*linesIt);
+                newDiff->addDestinationLine(*linesIt);
+                ++srcLineNo;
+                ++destLineNo;
+                ++linesIt;
+            }
+        }
+
+        // Now we add the linecount difference for the hunk that follows
+        int size = hunk->sourceLineCount();
+
+        linesIt += size;
+        if (linesIt > lEnd) {
+            linesIt = lEnd;
+        }
+
+        srcLineNo += size;
+        destLineNo += hunk->destinationLineCount();
+    }
+
+    if (linesIt != lEnd) {
+        newHunk = new DiffHunk(srcLineNo, destLineNo, QString(), DiffHunk::AddedByBlend);
+
+        model->addHunk(newHunk);
+
+        newDiff = new Difference(srcLineNo, destLineNo, Difference::Unchanged);
+
+        newHunk->add(newDiff);
+
+        while (linesIt != lEnd) {
+            newDiff->addSourceLine(*linesIt);
+            newDiff->addDestinationLine(*linesIt);
+            ++linesIt;
+        }
+    }
+#if 0
+    DifferenceList hunkDiffList   = (*hunkIt)->differences();
+    DifferenceListIterator diffIt = hunkDiffList.begin();
+    DifferenceListIterator dEnd   = hunkDiffList.end();
+    qCDebug(KOMPAREDIFF2_LOG) << "Number of differences in hunkDiffList = " << diffList.count();
+
+    DifferenceListIterator tempIt;
+    Difference* diff;
+
+    for (; diffIt != dEnd; ++diffIt)
+    {
+        diff = *diffIt;
+        qCDebug(KOMPAREDIFF2_LOG) << "*(Diff it) = " << diff;
+        // Check if there are lines in the original file before the difference
+        // that are not yet in the diff. If so create new Unchanged diff
+        if (srcLineNo < diff->sourceLineNumber())
+        {
+            newDiff = new Difference(srcLineNo, destLineNo,
+                                     Difference::Unchanged | Difference::AddedByBlend);
+            newHunk->add(newDiff);
+            while (srcLineNo < diff->sourceLineNumber() && linesIt != lEnd)
+            {
+//                  qCDebug(KOMPAREDIFF2_LOG) << "SourceLine = " << srcLineNo << ": " << *linesIt;
+                newDiff->addSourceLine(*linesIt);
+                newDiff->addDestinationLine(*linesIt);
+                ++srcLineNo;
+                ++destLineNo;
+                ++linesIt;
+            }
+        }
+        // Now i've got to add that diff
+        switch (diff->type())
+        {
+        case Difference::Unchanged:
+            qCDebug(KOMPAREDIFF2_LOG) << "Unchanged";
+            for (int i = 0; i < diff->sourceLineCount(); ++i)
+            {
+                if (linesIt != lEnd && *linesIt != diff->sourceLineAt(i)->string())
+                {
+                    qCDebug(KOMPAREDIFF2_LOG) << "Conflict: SourceLine = " << srcLineNo << ": " << *linesIt;
+                    qCDebug(KOMPAREDIFF2_LOG) << "Conflict: DiffLine   = " << diff->sourceLineNumber() + i << ": " << diff->sourceLineAt(i)->string();
+
+                    // Do conflict resolution (well sort of)
+                    diff->sourceLineAt(i)->setConflictString(*linesIt);
+                    diff->setConflict(true);
+                }
+//                  qCDebug(KOMPAREDIFF2_LOG) << "SourceLine = " << srcLineNo << ": " << *linesIt;
+//                  qCDebug(KOMPAREDIFF2_LOG) << "DiffLine   = " << diff->sourceLineNumber() + i << ": " << diff->sourceLineAt( i )->string();
+                ++srcLineNo;
+                ++destLineNo;
+                ++linesIt;
+            }
+
+            tempIt = diffIt;
+            --diffIt;
+            diffList.remove(tempIt);
+            newHunk->add(diff);
+
+            break;
+        case Difference::Change:
+            qCDebug(KOMPAREDIFF2_LOG) << "Change";
+
+            //QStringListConstIterator saveIt = linesIt;
+
+            for (int i = 0; i < diff->sourceLineCount(); ++i)
+            {
+                if (linesIt != lEnd && *linesIt != diff->sourceLineAt(i)->string())
+                {
+                    qCDebug(KOMPAREDIFF2_LOG) << "Conflict: SourceLine = " << srcLineNo << ": " << *linesIt;
+                    qCDebug(KOMPAREDIFF2_LOG) << "Conflict: DiffLine   = " << diff->sourceLineNumber() + i << ": " << diff->sourceLineAt(i)->string();
+
+                    // Do conflict resolution (well sort of)
+                    diff->sourceLineAt(i)->setConflictString(*linesIt);
+                    diff->setConflict(true);
+                }
+                ++srcLineNo;
+                ++destLineNo;
+                ++linesIt;
+            }
+
+            destLineNo += diff->destinationLineCount();
+
+            tempIt = diffIt;
+            --diffIt;
+            diffList.remove(tempIt);
+            newHunk->add(diff);
+            newModel->addDiff(diff);
+
+            break;
+        case Difference::Insert:
+            qCDebug(KOMPAREDIFF2_LOG) << "Insert";
+            destLineNo += diff->destinationLineCount();
+            tempIt = diffIt;
+            --diffIt;
+            diffList.remove(tempIt);
+            newHunk->add(diff);
+            newModel->addDiff(diff);
+            break;
+        case Difference::Delete:
+            qCDebug(KOMPAREDIFF2_LOG) << "Delete";
+            qCDebug(KOMPAREDIFF2_LOG) << "Number of lines in Delete: " << diff->sourceLineCount();
+            for (int i = 0; i < diff->sourceLineCount(); ++i)
+            {
+                if (linesIt != lEnd && *linesIt != diff->sourceLineAt(i)->string())
+                {
+                    qCDebug(KOMPAREDIFF2_LOG) << "Conflict: SourceLine = " << srcLineNo << ": " << *linesIt;
+                    qCDebug(KOMPAREDIFF2_LOG) << "Conflict: DiffLine   = " << diff->sourceLineNumber() + i << ": " << diff->sourceLineAt(i)->string();
+
+                    // Do conflict resolution (well sort of)
+                    diff->sourceLineAt(i)->setConflictString(*linesIt);
+                    diff->setConflict(true);
+                }
+
+//                  qCDebug(KOMPAREDIFF2_LOG) << "SourceLine = " << srcLineNo << ": " << *it;
+//                  qCDebug(KOMPAREDIFF2_LOG) << "DiffLine   = " << diff->sourceLineNumber() + i << ": " << diff->sourceLineAt( i )->string();
+                ++srcLineNo;
+                ++linesIt;
+            }
+
+            tempIt = diffIt;
+            --diffIt;
+            diffList.remove(tempIt);
+            newHunk->add(diff);
+            newModel->addDiff(diff);
+            break;
+        default:
+            qCDebug(KOMPAREDIFF2_LOG) << "****, some diff type we do not know about ???";
+        }
+    }
+}
+#endif
+
+/*
+    diffList = newModel->differences();
+
+    diff = diffList.first();
+    qCDebug(KOMPAREDIFF2_LOG) << "Count = " << diffList.count();
+    for ( diff = diffList.first(); diff; diff = diffList.next() )
+    {
+        qCDebug(KOMPAREDIFF2_LOG) << "sourcelinenumber = " << diff->sourceLineNumber();
+    }
+*/
+
+    selectedModel = firstModel();
+
+    selectedDifference = selectedModel->firstDifference();
+
+    return true;
+}
diff --git a/src/modellist_p.h b/src/modellist_p.h
new file mode 100644
index 000000000000..ec8f1a29f167
--- /dev/null
+++ b/src/modellist_p.h
@@ -0,0 +1,121 @@
+/*
+    SPDX-FileCopyrightText: 2001-2003 John Firebaugh <jfirebaugh@kde.org>
+    SPDX-FileCopyrightText: 2001-2005,2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2007-2008 Kevin Kofler <kevin.kofler@chello.at>
+    SPDX-FileCopyrightText: 2012 Jean -Nicolas Artaud <jeannicolasartaud@gmail.com>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#ifndef KOMPAREDIFF2_MODELLIST_P_H
+#define KOMPAREDIFF2_MODELLIST_P_H
+
+// lib
+#include "diffmodellist.h"
+#include "kompareprocess.h"
+// Qt
+#include <QFileInfo>
+#include <QTemporaryFile>
+#include <QUrl>
+#include <QStringDecoder>
+// Std
+#include <memory>
+
+class KActionCollection;
+class QAction;
+
+namespace KompareDiff2
+{
+class DiffSettings;
+class DiffModelList;
+class DiffModel;
+class Difference;
+class Info;
+
+class ModelListPrivate
+{
+public:
+    ModelListPrivate(DiffSettings *diffSettings, bool supportReadWrite);
+    ~ModelListPrivate() = default;
+
+public: // Helper methods
+    static bool isDirectory(const QString &url);
+    static bool isDiff(const QString &mimetype);
+
+    static QStringList split(const QString &diff);
+
+    QString readFile(const QString &fileName);
+
+    bool hasPrevModel() const;
+    bool hasNextModel() const;
+    bool hasPrevDiff() const;
+    bool hasNextDiff() const;
+
+    void setDepthAndApplied();
+
+    DiffModel *firstModel();
+    DiffModel *lastModel();
+    DiffModel *prevModel();
+    DiffModel *nextModel();
+
+    bool setSelectedModel(DiffModel *model);
+
+    void updateModelListActions();
+
+    bool blendFile(DiffModel *model, const QString &lines);
+
+public:
+    std::unique_ptr<QTemporaryFile> diffTemp;
+    QUrl diffURL;
+
+    std::unique_ptr<KompareProcess> diffProcess;
+
+    DiffSettings *diffSettings;
+
+    std::unique_ptr<DiffModelList> models;
+
+    DiffModel *selectedModel = nullptr;
+    Difference *selectedDifference = nullptr;
+
+    int modelIndex = 0;
+
+    Info *info = nullptr;
+
+    KActionCollection *actionCollection;
+    QAction *applyDifference;
+    QAction *unApplyDifference;
+    QAction *applyAll;
+    QAction *unapplyAll;
+    QAction *previousFile;
+    QAction *nextFile;
+    QAction *previousDifference;
+    QAction *nextDifference;
+
+    QAction *save;
+
+    QString encoding;
+    QStringDecoder textDecoder;
+
+    bool isReadWrite;
+};
+
+inline ModelListPrivate::ModelListPrivate(DiffSettings *diffSettings, bool supportReadWrite)
+    : diffSettings(diffSettings)
+    , isReadWrite(supportReadWrite)
+{
+}
+
+inline bool ModelListPrivate::isDirectory(const QString &url)
+{
+    QFileInfo fi(url);
+    return fi.isDir();
+}
+
+inline bool ModelListPrivate::isDiff(const QString &mimeType)
+{
+    return (mimeType == QLatin1String("text/x-patch"));
+}
+
+}
+
+#endif
diff --git a/src/parser.cpp b/src/parser.cpp
index 0131b14ee380..5b550aab008b 100644
--- a/src/parser.cpp
+++ b/src/parser.cpp
@@ -1,31 +1,30 @@
 /*
-SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
-SPDX-FileCopyrightText: 2010 Kevin Kofler <kevin.kofler@chello.at>
+    SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
+    SPDX-FileCopyrightText: 2010 Kevin Kofler <kevin.kofler@chello.at>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #include "parser.h"
 
-#include <komparediffdebug.h>
+// lib
 #include "cvsdiffparser.h"
-#include "diffparser.h"
-#include "perforceparser.h"
 #include "diffmodel.h"
 #include "diffmodellist.h"
+#include "diffparser.h"
+#include "perforceparser.h"
+#include <komparediff2_logging.h>
 
-using namespace Diff2;
+using namespace KompareDiff2;
 
-Parser::Parser(const KompareModelList* list) :
-    m_list(list)
+Parser::Parser(const ModelList *list)
+    : m_list(list)
 {
 }
 
-Parser::~Parser()
-{
-}
+Parser::~Parser() = default;
 
-int Parser::cleanUpCrap(QStringList& diffLines)
+int Parser::cleanUpCrap(QStringList &diffLines)
 {
     QStringList::Iterator it = diffLines.begin();
 
@@ -33,10 +32,8 @@ int Parser::cleanUpCrap(QStringList& diffLines)
 
     QLatin1String noNewLine("\\ No newline");
 
-    for (; it != diffLines.end(); ++it)
-    {
-        if ((*it).startsWith(noNewLine))
-        {
+    for (; it != diffLines.end(); ++it) {
+        if ((*it).startsWith(noNewLine)) {
             it = diffLines.erase(it);
             // correcting the advance of the iterator because of the remove
             --it;
@@ -50,29 +47,28 @@ int Parser::cleanUpCrap(QStringList& diffLines)
     return nol;
 }
 
-DiffModelList* Parser::parse(QStringList& diffLines, bool* malformed)
+DiffModelList *Parser::parse(QStringList &diffLines, bool *malformed)
 {
     /* Basically determine the generator then call the parse method */
-    ParserBase* parser;
+    std::unique_ptr<ParserBase> parser;
 
     m_generator = determineGenerator(diffLines);
 
     int nol = cleanUpCrap(diffLines);
-    qCDebug(LIBKOMPAREDIFF2) << "Cleaned up " << nol << " line(s) of crap from the diff...";
+    qCDebug(KOMPAREDIFF2_LOG) << "Cleaned up " << nol << " line(s) of crap from the diff...";
 
-    switch (m_generator)
-    {
-    case Kompare::CVSDiff :
-        qCDebug(LIBKOMPAREDIFF2) << "It is a CVS generated diff...";
-        parser = new CVSDiffParser(m_list, diffLines);
+    switch (m_generator) {
+    case CVSDiff:
+        qCDebug(KOMPAREDIFF2_LOG) << "It is a CVS generated diff...";
+        parser = std::make_unique<CVSDiffParser>(m_list, diffLines);
         break;
-    case Kompare::Diff :
-        qCDebug(LIBKOMPAREDIFF2) << "It is a diff generated diff...";
-        parser = new DiffParser(m_list, diffLines);
+    case Diff:
+        qCDebug(KOMPAREDIFF2_LOG) << "It is a diff generated diff...";
+        parser = std::make_unique<DiffParser>(m_list, diffLines);
         break;
-    case Kompare::Perforce :
-        qCDebug(LIBKOMPAREDIFF2) << "It is a Perforce generated diff...";
-        parser = new PerforceParser(m_list, diffLines);
+    case Perforce:
+        qCDebug(KOMPAREDIFF2_LOG) << "It is a Perforce generated diff...";
+        parser = std::make_unique<PerforceParser>(m_list, diffLines);
         break;
     default:
         // Nothing to delete, just leave...
@@ -80,51 +76,38 @@ DiffModelList* Parser::parse(QStringList& diffLines, bool* malformed)
     }
 
     m_format = parser->format();
-    DiffModelList* modelList = parser->parse(malformed);
-    if (modelList)
-    {
-        qCDebug(LIBKOMPAREDIFF2) << "Modelcount: " << modelList->count();
-        DiffModelListIterator modelIt = modelList->begin();
-        DiffModelListIterator mEnd    = modelList->end();
-        for (; modelIt != mEnd; ++modelIt)
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Hunkcount:  " << (*modelIt)->hunkCount();
-            qCDebug(LIBKOMPAREDIFF2) << "Diffcount:  " << (*modelIt)->differenceCount();
+    DiffModelList *modelList = parser->parse(malformed);
+    if (modelList) {
+        qCDebug(KOMPAREDIFF2_LOG) << "Modelcount: " << modelList->count();
+        for (const DiffModel *model : std::as_const(*modelList)) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Hunkcount:  " << model->hunkCount();
+            qCDebug(KOMPAREDIFF2_LOG) << "Diffcount:  " << model->differenceCount();
         }
     }
 
-    delete parser;
-
     return modelList;
 }
 
-enum Kompare::Generator Parser::determineGenerator(const QStringList& diffLines)
+Generator Parser::determineGenerator(const QStringList &diffLines)
 {
     // Shit have to duplicate some code with this method and the ParserBase derived classes
     QLatin1String cvsDiff("Index: ");
     QLatin1String perforceDiff("==== ");
 
-    QStringList::ConstIterator it = diffLines.begin();
-    QStringList::ConstIterator linesEnd = diffLines.end();
-
-    while (it != linesEnd)
-    {
-        if ((*it).startsWith(cvsDiff))
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Diff is a CVSDiff";
-            return Kompare::CVSDiff;
+    for (const QString &diffLine : diffLines) {
+        if (diffLine.startsWith(cvsDiff)) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Diff is a CVSDiff";
+            return CVSDiff;
         }
-        else if ((*it).startsWith(perforceDiff))
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Diff is a Perforce Diff";
-            return Kompare::Perforce;
+        if (diffLine.startsWith(perforceDiff)) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Diff is a Perforce Diff";
+            return Perforce;
         }
-        ++it;
     }
 
-    qCDebug(LIBKOMPAREDIFF2) << "We'll assume it is a diff Diff";
+    qCDebug(KOMPAREDIFF2_LOG) << "We'll assume it is a diff Diff";
 
     // For now we'll assume it is a diff file diff, later we might
     // try to really determine if it is a diff file diff.
-    return Kompare::Diff;
+    return Diff;
 }
diff --git a/src/parser.h b/src/parser.h
index c88d7ebdc6b0..403aceb71752 100644
--- a/src/parser.h
+++ b/src/parser.h
@@ -1,47 +1,56 @@
 /*
-SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
-SPDX-FileCopyrightText: 2010 Kevin Kofler <kevin.kofler@chello.at>
+    SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
+    SPDX-FileCopyrightText: 2010 Kevin Kofler <kevin.kofler@chello.at>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #ifndef KOMPAREDIFF2_PARSER_H
 #define KOMPAREDIFF2_PARSER_H
 
-#include "kompare.h"
+// lib
+#include "global.h"
+// Qt
+#include <QStringList>
 
-namespace Diff2
+namespace KompareDiff2
 {
 
 class DiffModelList;
-class KompareModelList;
+class ModelList;
 
 class Parser
 {
 public:
-    explicit Parser(const KompareModelList* list);
+    explicit Parser(const ModelList *list);
     ~Parser();
 
 public:
-    DiffModelList* parse(QStringList& diffLines, bool* malformed = nullptr);
+    DiffModelList *parse(QStringList &diffLines, bool *malformed = nullptr);
 
-    enum Kompare::Generator generator() const { return m_generator; };
-    enum Kompare::Format    format() const    { return m_format; };
+    Generator generator() const
+    {
+        return m_generator;
+    };
+
+    Format format() const
+    {
+        return m_format;
+    };
 
 private:
     /** Which program was used to generate the output */
-    enum Kompare::Generator determineGenerator(const QStringList& diffLines);
+    Generator determineGenerator(const QStringList &diffLines);
 
-    int cleanUpCrap(QStringList& diffLines);
+    int cleanUpCrap(QStringList &diffLines);
 
 private:
-    enum Kompare::Generator m_generator;
-    enum Kompare::Format    m_format;
+    Generator m_generator;
+    Format m_format;
 
-    const KompareModelList* m_list;
+    const ModelList *m_list;
 };
 
-} // End of namespace Diff2
+} // End of namespace KompareDiff2
 
 #endif
-
diff --git a/src/parserbase.cpp b/src/parserbase.cpp
index e1e1f93c394c..c6ad3ba2667d 100644
--- a/src/parserbase.cpp
+++ b/src/parserbase.cpp
@@ -1,22 +1,23 @@
 /*
-SPDX-FileCopyrightText: 2002-2004,2009 Otto Bruggeman <bruggie@gmail.com>
-SPDX-FileCopyrightText: 2007,2010 Kevin Kofler  <kevin.kofler@chello.at>
+    SPDX-FileCopyrightText: 2002-2004,2009 Otto Bruggeman <bruggie@gmail.com>
+    SPDX-FileCopyrightText: 2007,2010 Kevin Kofler  <kevin.kofler@chello.at>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #include "parserbase.h"
 
-#include <QObject>
-
-#include <komparediffdebug.h>
-#include "diffmodellist.h"
-#include "diffmodel.h"
-#include "diffhunk.h"
+// lib
 #include "difference.h"
-#include "komparemodellist.h"
+#include "diffhunk.h"
+#include "diffmodel.h"
+#include "diffmodellist.h"
+#include "modellist.h"
+#include <komparediff2_logging.h>
+// Qt
+#include <QObject>
 
-using namespace Diff2;
+using namespace KompareDiff2;
 
 // static
 QString ParserBase::unescapePath(QString path)
@@ -54,21 +55,17 @@ QString ParserBase::escapePath(QString path)
     return path;
 }
 
-ParserBase::ParserBase(const KompareModelList* list, const QStringList& diff) :
-    m_diffLines(diff),
-    m_currentModel(nullptr),
-    m_models(nullptr),
-    m_diffIterator(m_diffLines.begin()),
-    m_singleFileDiff(false),
-    m_malformed(false),
-    m_list(list)
+ParserBase::ParserBase(const ModelList *list, const QStringList &diff)
+    : m_diffLines(diff)
+    , m_diffIterator(m_diffLines.begin())
+    , m_list(list)
 {
-//     qCDebug(LIBKOMPAREDIFF2) << diff;
-//     qCDebug(LIBKOMPAREDIFF2) << m_diffLines;
+//     qCDebug(KOMPAREDIFF2_LOG) << diff;
+//     qCDebug(KOMPAREDIFF2_LOG) << m_diffLines;
     m_models = new DiffModelList();
 
     // used in contexthunkheader
-    m_contextHunkHeader1.setPattern(QRegularExpression::anchoredPattern(QStringLiteral("\\*{15} ?(.*)\\n")));  // capture is for function name
+    m_contextHunkHeader1.setPattern(QRegularExpression::anchoredPattern(QStringLiteral("\\*{15} ?(.*)\\n"))); // capture is for function name
     m_contextHunkHeader2.setPattern(QRegularExpression::anchoredPattern(QStringLiteral("\\*\\*\\* ([0-9]+),([0-9]+) \\*\\*\\*\\*.*\\n")));
     // used in contexthunkbody
     m_contextHunkHeader3.setPattern(QRegularExpression::anchoredPattern(QStringLiteral("--- ([0-9]+),([0-9]+) ----\\n")));
@@ -101,30 +98,29 @@ ParserBase::~ParserBase()
         m_models = nullptr; // do not delete this, i pass it around...
 }
 
-enum Kompare::Format ParserBase::determineFormat()
+Format ParserBase::determineFormat()
 {
     // Write your own format detection routine damn it :)
-    return Kompare::UnknownFormat;
+    return UnknownFormat;
 }
 
-DiffModelList* ParserBase::parse(bool* malformed)
+DiffModelList *ParserBase::parse(bool *malformed)
 {
-    DiffModelList* result;
-    switch (determineFormat())
-    {
-    case Kompare::Context :
+    DiffModelList *result;
+    switch (determineFormat()) {
+    case Context:
         result = parseContext();
         break;
-    case Kompare::Ed :
+    case Ed:
         result = parseEd();
         break;
-    case Kompare::Normal :
+    case Normal:
         result = parseNormal();
         break;
-    case Kompare::RCS :
+    case RCS:
         result = parseRCS();
         break;
-    case Kompare::Unified :
+    case Unified:
         result = parseUnified();
         break;
     default: // Unknown and SideBySide for now
@@ -142,23 +138,20 @@ DiffModelList* ParserBase::parse(bool* malformed)
 
 bool ParserBase::parseContextDiffHeader()
 {
-//     qCDebug(LIBKOMPAREDIFF2) << "ParserBase::parseContextDiffHeader()";
+//     qCDebug(KOMPAREDIFF2_LOG) << "ParserBase::parseContextDiffHeader()";
     bool result = false;
 
-    while (m_diffIterator != m_diffLines.end())
-    {
+    while (m_diffIterator != m_diffLines.end()) {
         const auto contextDiffHeader1Match = m_contextDiffHeader1.match(*(m_diffIterator)++);
-        if (!contextDiffHeader1Match.hasMatch())
-        {
+        if (!contextDiffHeader1Match.hasMatch()) {
             continue;
         }
-//         qCDebug(LIBKOMPAREDIFF2) << "Matched length Header1 = " << contextDiffHeader1Match.capturedLength();
-//         qCDebug(LIBKOMPAREDIFF2) << "Matched string Header1 = " << contextDiffHeader1Match.captured( 0 );
+//         qCDebug(KOMPAREDIFF2_LOG) << "Matched length Header1 = " << contextDiffHeader1Match.capturedLength();
+//         qCDebug(KOMPAREDIFF2_LOG) << "Matched string Header1 = " << contextDiffHeader1Match.captured( 0 );
         const auto contextDiffHeader2Match = m_contextDiffHeader2.match(*m_diffIterator);
-        if (m_diffIterator != m_diffLines.end() && contextDiffHeader2Match.hasMatch())
-        {
-//             qCDebug(LIBKOMPAREDIFF2) << "Matched length Header2 = " << contextDiffHeader2Match.capturedLength();
-//             qCDebug(LIBKOMPAREDIFF2) << "Matched string Header2 = " << contextDiffHeader2Match.captured( 0 );
+        if (m_diffIterator != m_diffLines.end() && contextDiffHeader2Match.hasMatch()) {
+//             qCDebug(KOMPAREDIFF2_LOG) << "Matched length Header2 = " << contextDiffHeader2Match.capturedLength();
+//             qCDebug(KOMPAREDIFF2_LOG) << "Matched string Header2 = " << contextDiffHeader2Match.captured( 0 );
 
             m_currentModel = new DiffModel(unescapePath(contextDiffHeader1Match.captured(1)), unescapePath(contextDiffHeader2Match.captured(1)));
             m_currentModel->setSourceTimestamp(contextDiffHeader1Match.captured(3));
@@ -170,9 +163,7 @@ bool ParserBase::parseContextDiffHeader()
             result = true;
 
             break;
-        }
-        else
-        {
+        } else {
             // We're screwed, second line does not match or is not there...
             break;
         }
@@ -191,16 +182,14 @@ bool ParserBase::parseEdDiffHeader()
 
 bool ParserBase::parseNormalDiffHeader()
 {
-//     qCDebug(LIBKOMPAREDIFF2) << "ParserBase::parseNormalDiffHeader()";
+//     qCDebug(KOMPAREDIFF2_LOG) << "ParserBase::parseNormalDiffHeader()";
     bool result = false;
 
-    while (m_diffIterator != m_diffLines.end())
-    {
+    while (m_diffIterator != m_diffLines.end()) {
         const auto normalDiffHeaderMatch = m_normalDiffHeader.match(*m_diffIterator);
-        if (normalDiffHeaderMatch.hasMatch())
-        {
-//             qCDebug(LIBKOMPAREDIFF2) << "Matched length Header = " << normalDiffHeaderMatch.capturedLength();
-//             qCDebug(LIBKOMPAREDIFF2) << "Matched string Header = " << normalDiffHeaderMatch.captured( 0 );
+        if (normalDiffHeaderMatch.hasMatch()) {
+//             qCDebug(KOMPAREDIFF2_LOG) << "Matched length Header = " << normalDiffHeaderMatch.capturedLength();
+//             qCDebug(KOMPAREDIFF2_LOG) << "Matched string Header = " << normalDiffHeaderMatch.captured( 0 );
 
             m_currentModel = new DiffModel();
             m_currentModel->setSourceFile(unescapePath(normalDiffHeaderMatch.captured(1)));
@@ -210,16 +199,13 @@ bool ParserBase::parseNormalDiffHeader()
 
             ++m_diffIterator;
             break;
-        }
-        else
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "No match for: " << (*m_diffIterator);
+        } else {
+            qCDebug(KOMPAREDIFF2_LOG) << "No match for: " << (*m_diffIterator);
         }
         ++m_diffIterator;
     }
 
-    if (result == false)
-    {
+    if (result == false) {
         // Set this to the first line again and hope it is a single file diff
         m_diffIterator = m_diffLines.begin();
         m_currentModel = new DiffModel();
@@ -236,23 +222,21 @@ bool ParserBase::parseRCSDiffHeader()
 
 bool ParserBase::parseUnifiedDiffHeader()
 {
-//     qCDebug(LIBKOMPAREDIFF2) << "ParserBase::parseUnifiedDiffHeader()";
+//     qCDebug(KOMPAREDIFF2_LOG) << "ParserBase::parseUnifiedDiffHeader()";
     bool result = false;
 
-    while (m_diffIterator != m_diffLines.end())   // do not assume we start with the diffheader1 line
+    while (m_diffIterator != m_diffLines.end()) // do not assume we start with the diffheader1 line
     {
         const auto unifiedDiffHeader1Match = m_unifiedDiffHeader1.match(*m_diffIterator);
-        if (!unifiedDiffHeader1Match.hasMatch())
-        {
+        if (!unifiedDiffHeader1Match.hasMatch()) {
             ++m_diffIterator;
             continue;
         }
-//         qCDebug(LIBKOMPAREDIFF2) << "Matched length Header1 = " << unifiedDiffHeader1Match.capturedLength();
-//         qCDebug(LIBKOMPAREDIFF2) << "Matched string Header1 = " << unifiedDiffHeader1Match.captured( 0 );
+//         qCDebug(KOMPAREDIFF2_LOG) << "Matched length Header1 = " << unifiedDiffHeader1Match.capturedLength();
+//         qCDebug(KOMPAREDIFF2_LOG) << "Matched string Header1 = " << unifiedDiffHeader1Match.captured( 0 );
         ++m_diffIterator;
         const auto unifiedDiffHeader2Match = m_unifiedDiffHeader2.match(*m_diffIterator);
-        if (m_diffIterator != m_diffLines.end() && unifiedDiffHeader2Match.hasMatch())
-        {
+        if (m_diffIterator != m_diffLines.end() && unifiedDiffHeader2Match.hasMatch()) {
             m_currentModel = new DiffModel(unescapePath(unifiedDiffHeader1Match.captured(1)), unescapePath(unifiedDiffHeader2Match.captured(1)));
             m_currentModel->setSourceTimestamp(unifiedDiffHeader1Match.captured(2));
             m_currentModel->setSourceRevision(unifiedDiffHeader1Match.captured(4));
@@ -263,9 +247,7 @@ bool ParserBase::parseUnifiedDiffHeader()
             result = true;
 
             break;
-        }
-        else
-        {
+        } else {
             // We're screwed, second line does not match or is not there...
             break;
         }
@@ -276,7 +258,7 @@ bool ParserBase::parseUnifiedDiffHeader()
 
 bool ParserBase::parseContextHunkHeader()
 {
-//     qCDebug(LIBKOMPAREDIFF2) << "ParserBase::parseContextHunkHeader()";
+//     qCDebug(KOMPAREDIFF2_LOG) << "ParserBase::parseContextHunkHeader()";
 
     if (m_diffIterator == m_diffLines.end())
         return false;
@@ -306,23 +288,16 @@ bool ParserBase::parseEdHunkHeader()
 
 bool ParserBase::parseNormalHunkHeader()
 {
-//     qCDebug(LIBKOMPAREDIFF2) << "ParserBase::parseNormalHunkHeader()";
-    if (m_diffIterator != m_diffLines.end())
-    {
-//         qCDebug(LIBKOMPAREDIFF2) << "Header = " << *m_diffIterator;
-        if (m_normalHunkHeaderAddedMatch = m_normalHunkHeaderAdded.match(*m_diffIterator); m_normalHunkHeaderAddedMatch.hasMatch())
-        {
+//     qCDebug(KOMPAREDIFF2_LOG) << "ParserBase::parseNormalHunkHeader()";
+    if (m_diffIterator != m_diffLines.end()) {
+//         qCDebug(KOMPAREDIFF2_LOG) << "Header = " << *m_diffIterator;
+        if (m_normalHunkHeaderAddedMatch = m_normalHunkHeaderAdded.match(*m_diffIterator); m_normalHunkHeaderAddedMatch.hasMatch()) {
             m_normalDiffType = Difference::Insert;
-        }
-        else if (m_normalHunkHeaderRemovedMatch = m_normalHunkHeaderRemoved.match(*m_diffIterator); m_normalHunkHeaderRemovedMatch.hasMatch())
-        {
+        } else if (m_normalHunkHeaderRemovedMatch = m_normalHunkHeaderRemoved.match(*m_diffIterator); m_normalHunkHeaderRemovedMatch.hasMatch()) {
             m_normalDiffType = Difference::Delete;
-        }
-        else if (m_normalHunkHeaderChangedMatch = m_normalHunkHeaderChanged.match(*m_diffIterator); m_normalHunkHeaderChangedMatch.hasMatch())
-        {
+        } else if (m_normalHunkHeaderChangedMatch = m_normalHunkHeaderChanged.match(*m_diffIterator); m_normalHunkHeaderChangedMatch.hasMatch()) {
             m_normalDiffType = Difference::Change;
-        }
-        else
+        } else
             return false;
 
         ++m_diffIterator;
@@ -339,28 +314,27 @@ bool ParserBase::parseRCSHunkHeader()
 
 bool ParserBase::parseUnifiedHunkHeader()
 {
-//     qCDebug(LIBKOMPAREDIFF2) << "ParserBase::parseUnifiedHunkHeader()";
+//     qCDebug(KOMPAREDIFF2_LOG) << "ParserBase::parseUnifiedHunkHeader()";
 
-    if (m_diffIterator != m_diffLines.end())
-    {
+    if (m_diffIterator != m_diffLines.end()) {
         m_unifiedHunkHeaderMatch = m_unifiedHunkHeader.match(*m_diffIterator);
         if (m_unifiedHunkHeaderMatch.hasMatch()) {
             ++m_diffIterator;
             return true;
         }
     }
-//     qCDebug(LIBKOMPAREDIFF2) << "This is not a unified hunk header : " << (*m_diffIterator);
+//     qCDebug(KOMPAREDIFF2_LOG) << "This is not a unified hunk header : " << (*m_diffIterator);
     return false;
 }
 
 bool ParserBase::parseContextHunkBody()
 {
-//     qCDebug(LIBKOMPAREDIFF2) << "ParserBase::parseContextHunkBody()";
+//     qCDebug(KOMPAREDIFF2_LOG) << "ParserBase::parseContextHunkBody()";
 
     // Storing the src part of the hunk for later use
     QStringList oldLines;
     for (; m_diffIterator != m_diffLines.end() && m_contextHunkBodyLine.match(*m_diffIterator).hasMatch(); ++m_diffIterator) {
-//         qCDebug(LIBKOMPAREDIFF2) << "Added old line: " << *m_diffIterator;
+//         qCDebug(KOMPAREDIFF2_LOG) << "Added old line: " << *m_diffIterator;
         oldLines.append(*m_diffIterator);
     }
 
@@ -373,88 +347,76 @@ bool ParserBase::parseContextHunkBody()
     // Storing the dest part of the hunk for later use
     QStringList newLines;
     for (; m_diffIterator != m_diffLines.end() && m_contextHunkBodyLine.match(*m_diffIterator).hasMatch(); ++m_diffIterator) {
-//         qCDebug(LIBKOMPAREDIFF2) << "Added new line: " << *m_diffIterator;
+//         qCDebug(KOMPAREDIFF2_LOG) << "Added new line: " << *m_diffIterator;
         newLines.append(*m_diffIterator);
     }
 
     QString function = m_contextHunkHeader1Match.captured(1);
-//     qCDebug(LIBKOMPAREDIFF2) << "Captured function: " << function;
-    int linenoA      = m_contextHunkHeader2Match.captured(1).toInt();
-//     qCDebug(LIBKOMPAREDIFF2) << "Source line number: " << linenoA;
-    int linenoB      = contextHunkHeader3Match.captured(1).toInt();
-//     qCDebug(LIBKOMPAREDIFF2) << "Dest   line number: " << linenoB;
+//     qCDebug(KOMPAREDIFF2_LOG) << "Captured function: " << function;
+    int linenoA = m_contextHunkHeader2Match.captured(1).toInt();
+//     qCDebug(KOMPAREDIFF2_LOG) << "Source line number: " << linenoA;
+    int linenoB = contextHunkHeader3Match.captured(1).toInt();
+//     qCDebug(KOMPAREDIFF2_LOG) << "Dest   line number: " << linenoB;
 
-    DiffHunk* hunk = new DiffHunk(linenoA, linenoB, function);
+    DiffHunk *hunk = new DiffHunk(linenoA, linenoB, function);
 
     m_currentModel->addHunk(hunk);
 
     QStringList::Iterator oldIt = oldLines.begin();
     QStringList::Iterator newIt = newLines.begin();
 
-    Difference* diff;
-    while (oldIt != oldLines.end() || newIt != newLines.end())
-    {
-        if (oldIt != oldLines.end() && m_contextHunkBodyRemoved.match(*oldIt).hasMatch())
-        {
-//             qCDebug(LIBKOMPAREDIFF2) << "Delete: ";
+    Difference *diff;
+    while (oldIt != oldLines.end() || newIt != newLines.end()) {
+        if (oldIt != oldLines.end() && m_contextHunkBodyRemoved.match(*oldIt).hasMatch()) {
+//             qCDebug(KOMPAREDIFF2_LOG) << "Delete: ";
             diff = new Difference(linenoA, linenoB);
             diff->setType(Difference::Delete);
             m_currentModel->addDiff(diff);
-//             qCDebug(LIBKOMPAREDIFF2) << "Difference added";
+//             qCDebug(KOMPAREDIFF2_LOG) << "Difference added";
             hunk->add(diff);
-            for (; oldIt != oldLines.end(); ++oldIt)
-            {
+            for (; oldIt != oldLines.end(); ++oldIt) {
                 const auto contextHunkBodyRemovedMatch = m_contextHunkBodyRemoved.match(*oldIt);
                 if (!contextHunkBodyRemovedMatch.hasMatch()) {
                     break;
                 }
-//                 qCDebug(LIBKOMPAREDIFF2) << " " << contextHunkBodyRemovedMatch.captured( 1 );
+//                 qCDebug(KOMPAREDIFF2_LOG) << " " << contextHunkBodyRemovedMatch.captured( 1 );
                 diff->addSourceLine(contextHunkBodyRemovedMatch.captured(1));
                 ++linenoA;
             }
-        }
-        else if (newIt != newLines.end() && m_contextHunkBodyAdded.match(*newIt).hasMatch())
-        {
-//             qCDebug(LIBKOMPAREDIFF2) << "Insert: ";
+        } else if (newIt != newLines.end() && m_contextHunkBodyAdded.match(*newIt).hasMatch()) {
+//             qCDebug(KOMPAREDIFF2_LOG) << "Insert: ";
             diff = new Difference(linenoA, linenoB);
             diff->setType(Difference::Insert);
             m_currentModel->addDiff(diff);
-//             qCDebug(LIBKOMPAREDIFF2) << "Difference added";
+//             qCDebug(KOMPAREDIFF2_LOG) << "Difference added";
             hunk->add(diff);
-            for (; newIt != newLines.end(); ++newIt)
-            {
+            for (; newIt != newLines.end(); ++newIt) {
                 const auto contextHunkBodyAddedMatch = m_contextHunkBodyAdded.match(*newIt);
                 if (!contextHunkBodyAddedMatch.hasMatch()) {
                     break;
                 }
-//                 qCDebug(LIBKOMPAREDIFF2) << " " << contextHunkBodyAddedMatch.captured( 1 );
+//                 qCDebug(KOMPAREDIFF2_LOG) << " " << contextHunkBodyAddedMatch.captured( 1 );
                 diff->addDestinationLine(contextHunkBodyAddedMatch.captured(1));
                 ++linenoB;
             }
-        }
-        else if ((oldIt == oldLines.end() || m_contextHunkBodyContext.match(*oldIt).hasMatch()) &&
-                 (newIt == newLines.end() || m_contextHunkBodyContext.match(*newIt).hasMatch()))
-        {
-//             qCDebug(LIBKOMPAREDIFF2) << "Unchanged: ";
+        } else if ((oldIt == oldLines.end() || m_contextHunkBodyContext.match(*oldIt).hasMatch())
+                   && (newIt == newLines.end() || m_contextHunkBodyContext.match(*newIt).hasMatch())) {
+//             qCDebug(KOMPAREDIFF2_LOG) << "Unchanged: ";
             diff = new Difference(linenoA, linenoB);
             // Do not add this diff with addDiff to the model... no unchanged differences allowed in there...
             diff->setType(Difference::Unchanged);
             hunk->add(diff);
-            while ((oldIt == oldLines.end() || m_contextHunkBodyContext.match(*oldIt).hasMatch()) &&
-                    (newIt == newLines.end() || m_contextHunkBodyContext.match(*newIt).hasMatch()) &&
-                    (oldIt != oldLines.end() || newIt != newLines.end()))
-            {
+            while ((oldIt == oldLines.end() || m_contextHunkBodyContext.match(*oldIt).hasMatch())
+                   && (newIt == newLines.end() || m_contextHunkBodyContext.match(*newIt).hasMatch()) && (oldIt != oldLines.end() || newIt != newLines.end())) {
                 QString l;
-                if (oldIt != oldLines.end())
-                {
+                if (oldIt != oldLines.end()) {
                     l = m_contextHunkBodyContext.match(*oldIt).captured(1);
-//                     qCDebug(LIBKOMPAREDIFF2) << "old: " << l;
+//                     qCDebug(KOMPAREDIFF2_LOG) << "old: " << l;
                     ++oldIt;
                 }
-                if (newIt != newLines.end())
-                {
+                if (newIt != newLines.end()) {
                     l = m_contextHunkBodyContext.match(*newIt).captured(1);
-//                     qCDebug(LIBKOMPAREDIFF2) << "new: " << l;
+//                     qCDebug(KOMPAREDIFF2_LOG) << "new: " << l;
                     ++newIt;
                 }
                 diff->addSourceLine(l);
@@ -462,40 +424,35 @@ bool ParserBase::parseContextHunkBody()
                 ++linenoA;
                 ++linenoB;
             }
-        }
-        else if ((oldIt != oldLines.end() && m_contextHunkBodyChanged.match(*oldIt).hasMatch()) ||
-                 (newIt != newLines.end() && m_contextHunkBodyChanged.match(*newIt).hasMatch()))
-        {
-//             qCDebug(LIBKOMPAREDIFF2) << "Changed: ";
+        } else if ((oldIt != oldLines.end() && m_contextHunkBodyChanged.match(*oldIt).hasMatch())
+                   || (newIt != newLines.end() && m_contextHunkBodyChanged.match(*newIt).hasMatch())) {
+//             qCDebug(KOMPAREDIFF2_LOG) << "Changed: ";
             diff = new Difference(linenoA, linenoB);
             diff->setType(Difference::Change);
             m_currentModel->addDiff(diff);
-//             qCDebug(LIBKOMPAREDIFF2) << "Difference added";
+//             qCDebug(KOMPAREDIFF2_LOG) << "Difference added";
             hunk->add(diff);
-            while (oldIt != oldLines.end())
-            {
+            while (oldIt != oldLines.end()) {
                 const auto contextHunkBodyChangedMatch = m_contextHunkBodyChanged.match(*oldIt);
                 if (!contextHunkBodyChangedMatch.hasMatch()) {
                     break;
                 }
-//                 qCDebug(LIBKOMPAREDIFF2) << " " << contextHunkBodyChangedMatch.captured( 1 );
+//                 qCDebug(KOMPAREDIFF2_LOG) << " " << contextHunkBodyChangedMatch.captured( 1 );
                 diff->addSourceLine(contextHunkBodyChangedMatch.captured(1));
                 ++linenoA;
                 ++oldIt;
             }
-            while (newIt != newLines.end())
-            {
+            while (newIt != newLines.end()) {
                 const auto contextHunkBodyChangedMatch = m_contextHunkBodyChanged.match(*newIt);
                 if (!contextHunkBodyChangedMatch.hasMatch()) {
                     break;
                 }
-//                 qCDebug(LIBKOMPAREDIFF2) << " " << contextHunkBodyChangedMatch.captured( 1 );
+//                 qCDebug(KOMPAREDIFF2_LOG) << " " << contextHunkBodyChangedMatch.captured( 1 );
                 diff->addDestinationLine(contextHunkBodyChangedMatch.captured(1));
                 ++linenoB;
                 ++newIt;
             }
-        }
-        else
+        } else
             return false;
         diff->determineInlineDifferences();
     }
@@ -510,66 +467,56 @@ bool ParserBase::parseEdHunkBody()
 
 bool ParserBase::parseNormalHunkBody()
 {
-//     qCDebug(LIBKOMPAREDIFF2) << "ParserBase::parseNormalHunkBody";
+//     qCDebug(KOMPAREDIFF2_LOG) << "ParserBase::parseNormalHunkBody";
 
     QString type;
 
     int linenoA = 0, linenoB = 0;
 
-    if (m_normalDiffType == Difference::Insert)
-    {
+    if (m_normalDiffType == Difference::Insert) {
         linenoA = m_normalHunkHeaderAddedMatch.captured(1).toInt();
         linenoB = m_normalHunkHeaderAddedMatch.captured(2).toInt();
-    }
-    else if (m_normalDiffType == Difference::Delete)
-    {
+    } else if (m_normalDiffType == Difference::Delete) {
         linenoA = m_normalHunkHeaderRemovedMatch.captured(1).toInt();
         linenoB = m_normalHunkHeaderRemovedMatch.captured(3).toInt();
-    }
-    else if (m_normalDiffType == Difference::Change)
-    {
+    } else if (m_normalDiffType == Difference::Change) {
         linenoA = m_normalHunkHeaderChangedMatch.captured(1).toInt();
         linenoB = m_normalHunkHeaderChangedMatch.captured(3).toInt();
     }
 
-    DiffHunk* hunk = new DiffHunk(linenoA, linenoB);
+    DiffHunk *hunk = new DiffHunk(linenoA, linenoB);
     m_currentModel->addHunk(hunk);
-    Difference* diff = new Difference(linenoA, linenoB);
+    Difference *diff = new Difference(linenoA, linenoB);
     hunk->add(diff);
     m_currentModel->addDiff(diff);
 
     diff->setType(m_normalDiffType);
 
     if (m_normalDiffType == Difference::Change || m_normalDiffType == Difference::Delete)
-        for (; m_diffIterator != m_diffLines.end(); ++m_diffIterator)
-        {
+        for (; m_diffIterator != m_diffLines.end(); ++m_diffIterator) {
             const auto normalHunkBodyRemovedMatch = m_normalHunkBodyRemoved.match(*m_diffIterator);
             if (!normalHunkBodyRemovedMatch.hasMatch()) {
                 break;
             }
-//             qCDebug(LIBKOMPAREDIFF2) << "Line = " << *m_diffIterator;
+//             qCDebug(KOMPAREDIFF2_LOG) << "Line = " << *m_diffIterator;
             diff->addSourceLine(normalHunkBodyRemovedMatch.captured(1));
         }
 
-    if (m_normalDiffType == Difference::Change)
-    {
-        if (m_diffIterator != m_diffLines.end() && m_normalHunkBodyDivider.match(*m_diffIterator).hasMatch())
-        {
-//             qCDebug(LIBKOMPAREDIFF2) << "Line = " << *m_diffIterator;
+    if (m_normalDiffType == Difference::Change) {
+        if (m_diffIterator != m_diffLines.end() && m_normalHunkBodyDivider.match(*m_diffIterator).hasMatch()) {
+//             qCDebug(KOMPAREDIFF2_LOG) << "Line = " << *m_diffIterator;
             ++m_diffIterator;
-        }
-        else
+        } else
             return false;
     }
 
     if (m_normalDiffType == Difference::Insert || m_normalDiffType == Difference::Change)
-        for (; m_diffIterator != m_diffLines.end(); ++m_diffIterator)
-        {
-             const auto normalHunkBodyAddedMatch = m_normalHunkBodyAdded.match(*m_diffIterator);
-             if (!normalHunkBodyAddedMatch.hasMatch()) {
-                 break;
-             }
-//             qCDebug(LIBKOMPAREDIFF2) << "Line = " << *m_diffIterator;
+        for (; m_diffIterator != m_diffLines.end(); ++m_diffIterator) {
+            const auto normalHunkBodyAddedMatch = m_normalHunkBodyAdded.match(*m_diffIterator);
+            if (!normalHunkBodyAddedMatch.hasMatch()) {
+                break;
+            }
+//             qCDebug(KOMPAREDIFF2_LOG) << "Line = " << *m_diffIterator;
             diff->addDestinationLine(normalHunkBodyAddedMatch.captured(1));
         }
 
@@ -581,7 +528,7 @@ bool ParserBase::parseRCSHunkBody()
     return false;
 }
 
-bool ParserBase::matchesUnifiedHunkLine(const QString& line) const
+bool ParserBase::matchesUnifiedHunkLine(const QString &line) const
 {
     static const QChar context = QLatin1Char(' ');
     static const QChar added = QLatin1Char('+');
@@ -594,7 +541,7 @@ bool ParserBase::matchesUnifiedHunkLine(const QString& line) const
 
 bool ParserBase::parseUnifiedHunkBody()
 {
-//     qCDebug(LIBKOMPAREDIFF2) << "ParserBase::parseUnifiedHunkBody";
+//     qCDebug(KOMPAREDIFF2_LOG) << "ParserBase::parseUnifiedHunkBody";
 
     int linenoA = 0, linenoB = 0;
     bool wasNum;
@@ -602,8 +549,7 @@ bool ParserBase::parseUnifiedHunkBody()
     // Fetching the stuff we need from the hunkheader regexp that was parsed in parseUnifiedHunkHeader();
     linenoA = m_unifiedHunkHeaderMatch.captured(1).toInt();
     int lineCountA = 1, lineCountB = 1; // an omitted line count in the header implies a line count of 1
-    if (!m_unifiedHunkHeaderMatch.captured(3).isEmpty())
-    {
+    if (!m_unifiedHunkHeaderMatch.captured(3).isEmpty()) {
         lineCountA = m_unifiedHunkHeaderMatch.captured(3).toInt(&wasNum);
         if (!wasNum)
             return false;
@@ -624,24 +570,21 @@ bool ParserBase::parseUnifiedHunkBody()
     }
     QString function = m_unifiedHunkHeaderMatch.captured(7);
 
-    DiffHunk* hunk = new DiffHunk(linenoA, linenoB, function);
+    DiffHunk *hunk = new DiffHunk(linenoA, linenoB, function);
     m_currentModel->addHunk(hunk);
 
     const QStringList::ConstIterator m_diffLinesEnd = m_diffLines.end();
 
     const QString context = QStringLiteral(" ");
-    const QString added   = QStringLiteral("+");
+    const QString added = QStringLiteral("+");
     const QString removed = QStringLiteral("-");
 
-    while (m_diffIterator != m_diffLinesEnd && matchesUnifiedHunkLine(*m_diffIterator) && (lineCountA || lineCountB))
-    {
-        Difference* diff = new Difference(linenoA, linenoB);
+    while (m_diffIterator != m_diffLinesEnd && matchesUnifiedHunkLine(*m_diffIterator) && (lineCountA || lineCountB)) {
+        Difference *diff = new Difference(linenoA, linenoB);
         hunk->add(diff);
 
-        if ((*m_diffIterator).startsWith(context))
-        {   // context
-            for (; m_diffIterator != m_diffLinesEnd && (*m_diffIterator).startsWith(context) && (lineCountA || lineCountB); ++m_diffIterator)
-            {
+        if ((*m_diffIterator).startsWith(context)) { // context
+            for (; m_diffIterator != m_diffLinesEnd && (*m_diffIterator).startsWith(context) && (lineCountA || lineCountB); ++m_diffIterator) {
                 diff->addSourceLine(QString(*m_diffIterator).remove(0, 1));
                 diff->addDestinationLine(QString(*m_diffIterator).remove(0, 1));
                 ++linenoA;
@@ -649,35 +592,26 @@ bool ParserBase::parseUnifiedHunkBody()
                 --lineCountA;
                 --lineCountB;
             }
-        }
-        else
-        {   // This is a real difference, not context
-            for (; m_diffIterator != m_diffLinesEnd && (*m_diffIterator).startsWith(removed) && (lineCountA || lineCountB); ++m_diffIterator)
-            {
+        } else { // This is a real difference, not context
+            for (; m_diffIterator != m_diffLinesEnd && (*m_diffIterator).startsWith(removed) && (lineCountA || lineCountB); ++m_diffIterator) {
                 diff->addSourceLine(QString(*m_diffIterator).remove(0, 1));
                 ++linenoA;
                 --lineCountA;
             }
-            for (; m_diffIterator != m_diffLinesEnd && (*m_diffIterator).startsWith(added) && (lineCountA || lineCountB); ++m_diffIterator)
-            {
+            for (; m_diffIterator != m_diffLinesEnd && (*m_diffIterator).startsWith(added) && (lineCountA || lineCountB); ++m_diffIterator) {
                 diff->addDestinationLine(QString(*m_diffIterator).remove(0, 1));
                 ++linenoB;
                 --lineCountB;
             }
-            if (diff->sourceLineCount() == 0)
-            {
+            if (diff->sourceLineCount() == 0) {
                 diff->setType(Difference::Insert);
-//                 qCDebug(LIBKOMPAREDIFF2) << "Insert difference";
-            }
-            else if (diff->destinationLineCount() == 0)
-            {
+//                 qCDebug(KOMPAREDIFF2_LOG) << "Insert difference";
+            } else if (diff->destinationLineCount() == 0) {
                 diff->setType(Difference::Delete);
-//                 qCDebug(LIBKOMPAREDIFF2) << "Delete difference";
-            }
-            else
-            {
+//                 qCDebug(KOMPAREDIFF2_LOG) << "Delete difference";
+            } else {
                 diff->setType(Difference::Change);
-//                 qCDebug(LIBKOMPAREDIFF2) << "Change difference";
+//                 qCDebug(KOMPAREDIFF2_LOG) << "Change difference";
             }
             diff->determineInlineDifferences();
             m_currentModel->addDiff(diff);
@@ -687,20 +621,21 @@ bool ParserBase::parseUnifiedHunkBody()
     return true;
 }
 
-void ParserBase::checkHeader(const QRegularExpression& header)
+void ParserBase::checkHeader(const QRegularExpression &header)
 {
-    if (m_diffIterator != m_diffLines.end()
-            && !header.match(*m_diffIterator).hasMatch()
-            && !m_diffIterator->startsWith(QLatin1String("Index: ")) /* SVN diff */
-            && !m_diffIterator->startsWith(QLatin1String("diff ")) /* concatenated diff */
-            && !m_diffIterator->startsWith(QLatin1String("-- ")) /* git format-patch */)
+    // clang-format off
+    if (m_diffIterator != m_diffLines.end() &&
+        !header.match(*m_diffIterator).hasMatch() &&
+        !m_diffIterator->startsWith(QLatin1String("Index: ")) && /* SVN diff */
+        !m_diffIterator->startsWith(QLatin1String("diff ")) && /* concatenated diff */
+        !m_diffIterator->startsWith(QLatin1String("-- ")) /* git format-patch */)
+    // clang-format on
         m_malformed = true;
 }
 
-DiffModelList* ParserBase::parseContext()
+DiffModelList *ParserBase::parseContext()
 {
-    while (parseContextDiffHeader())
-    {
+    while (parseContextDiffHeader()) {
         while (parseContextHunkHeader())
             parseContextHunkBody();
         if (m_currentModel->differenceCount() > 0)
@@ -710,21 +645,17 @@ DiffModelList* ParserBase::parseContext()
 
     m_models->sort();
 
-    if (m_models->count() > 0)
-    {
+    if (m_models->count() > 0) {
         return m_models;
-    }
-    else
-    {
+    } else {
         delete m_models;
         return nullptr;
     }
 }
 
-DiffModelList* ParserBase::parseEd()
+DiffModelList *ParserBase::parseEd()
 {
-    while (parseEdDiffHeader())
-    {
+    while (parseEdDiffHeader()) {
         while (parseEdHunkHeader())
             parseEdHunkBody();
         if (m_currentModel->differenceCount() > 0)
@@ -733,21 +664,17 @@ DiffModelList* ParserBase::parseEd()
 
     m_models->sort();
 
-    if (m_models->count() > 0)
-    {
+    if (m_models->count() > 0) {
         return m_models;
-    }
-    else
-    {
+    } else {
         delete m_models;
         return nullptr;
     }
 }
 
-DiffModelList* ParserBase::parseNormal()
+DiffModelList *ParserBase::parseNormal()
 {
-    while (parseNormalDiffHeader())
-    {
+    while (parseNormalDiffHeader()) {
         while (parseNormalHunkHeader())
             parseNormalHunkBody();
         if (m_currentModel->differenceCount() > 0)
@@ -755,8 +682,7 @@ DiffModelList* ParserBase::parseNormal()
         checkHeader(m_normalDiffHeader);
     }
 
-    if (m_singleFileDiff)
-    {
+    if (m_singleFileDiff) {
         while (parseNormalHunkHeader())
             parseNormalHunkBody();
         if (m_currentModel->differenceCount() > 0)
@@ -767,21 +693,17 @@ DiffModelList* ParserBase::parseNormal()
 
     m_models->sort();
 
-    if (m_models->count() > 0)
-    {
+    if (m_models->count() > 0) {
         return m_models;
-    }
-    else
-    {
+    } else {
         delete m_models;
         return nullptr;
     }
 }
 
-DiffModelList* ParserBase::parseRCS()
+DiffModelList *ParserBase::parseRCS()
 {
-    while (parseRCSDiffHeader())
-    {
+    while (parseRCSDiffHeader()) {
         while (parseRCSHunkHeader())
             parseRCSHunkBody();
         if (m_currentModel->differenceCount() > 0)
@@ -790,25 +712,21 @@ DiffModelList* ParserBase::parseRCS()
 
     m_models->sort();
 
-    if (m_models->count() > 0)
-    {
+    if (m_models->count() > 0) {
         return m_models;
-    }
-    else
-    {
+    } else {
         delete m_models;
         return nullptr;
     }
 }
 
-DiffModelList* ParserBase::parseUnified()
+DiffModelList *ParserBase::parseUnified()
 {
-    while (parseUnifiedDiffHeader())
-    {
+    while (parseUnifiedDiffHeader()) {
         while (parseUnifiedHunkHeader())
             parseUnifiedHunkBody();
-//         qCDebug(LIBKOMPAREDIFF2) << "New model ready to be analyzed...";
-//         qCDebug(LIBKOMPAREDIFF2) << " differenceCount() == " << m_currentModel->differenceCount();
+//         qCDebug(KOMPAREDIFF2_LOG) << "New model ready to be analyzed...";
+//         qCDebug(KOMPAREDIFF2_LOG) << " differenceCount() == " << m_currentModel->differenceCount();
         if (m_currentModel->differenceCount() > 0)
             m_models->append(m_currentModel);
         checkHeader(m_unifiedDiffHeader1);
@@ -816,14 +734,10 @@ DiffModelList* ParserBase::parseUnified()
 
     m_models->sort();
 
-    if (m_models->count() > 0)
-    {
+    if (m_models->count() > 0) {
         return m_models;
-    }
-    else
-    {
+    } else {
         delete m_models;
         return nullptr;
     }
 }
-
diff --git a/src/parserbase.h b/src/parserbase.h
index 2e4efb36f640..6613bede30ec 100644
--- a/src/parserbase.h
+++ b/src/parserbase.h
@@ -1,40 +1,45 @@
 /*
-SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
-SPDX-FileCopyrightText: 2010 Kevin Kofler <kevin.kofler@chello.at>
+    SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
+    SPDX-FileCopyrightText: 2010 Kevin Kofler <kevin.kofler@chello.at>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #ifndef KOMPAREDIFF2_PARSERBASE_H
 #define KOMPAREDIFF2_PARSERBASE_H
 
+// lib
+#include "difference.h"
+#include "global.h"
+// Qt
 #include <QRegularExpression>
 #include <QStringList>
 
-#include "kompare.h"
-#include "difference.h"
-
 class QString;
 
-namespace Diff2
+namespace KompareDiff2
 {
 
-class KompareModelList;
+class ModelList;
 class DiffModelList;
 class DiffModel;
 
 class ParserBase
 {
 public:
-    ParserBase(const KompareModelList* list, const QStringList& diff);
+    ParserBase(const ModelList *list, const QStringList &diff);
     virtual ~ParserBase();
 
     static QString escapePath(QString path);
     static QString unescapePath(QString path);
 
 public:
-    enum Kompare::Format format() { return determineFormat(); };
-    DiffModelList* parse(bool* malformed = nullptr);
+    Format format()
+    {
+        return determineFormat();
+    };
+
+    DiffModelList *parse(bool *malformed = nullptr);
 
 protected:
     virtual bool parseContextDiffHeader();
@@ -55,19 +60,19 @@ protected:
     virtual bool parseRCSHunkBody();
     virtual bool parseUnifiedHunkBody();
 
-    virtual DiffModelList* parseContext();
-    virtual DiffModelList* parseEd();
-    virtual DiffModelList* parseNormal();
-    virtual DiffModelList* parseRCS();
-    virtual DiffModelList* parseUnified();
+    virtual DiffModelList *parseContext();
+    virtual DiffModelList *parseEd();
+    virtual DiffModelList *parseNormal();
+    virtual DiffModelList *parseRCS();
+    virtual DiffModelList *parseUnified();
 
 protected: // Helper methods to speed things up
-    bool matchesUnifiedHunkLine(const QString& line) const;
-    void checkHeader(const QRegularExpression& header);
+    bool matchesUnifiedHunkLine(const QString &line) const;
+    void checkHeader(const QRegularExpression &header);
 
 protected:
     /** What is format of the diff */
-    virtual enum Kompare::Format determineFormat();
+    virtual Format determineFormat();
 
 protected:
     // Regexps for context parsing
@@ -100,7 +105,7 @@ protected:
     QRegularExpression m_normalHunkBodyAdded;
     QRegularExpression m_normalHunkBodyDivider;
 
-    enum Difference::Type m_normalDiffType;
+    Difference::Type m_normalDiffType;
 
     // RegExps for rcs parsing
     QRegularExpression m_rcsDiffHeader;
@@ -113,18 +118,18 @@ protected:
     QRegularExpressionMatch m_unifiedHunkHeaderMatch;
 
 protected:
-    const QStringList&         m_diffLines;
-    DiffModel*                 m_currentModel;
-    DiffModelList*             m_models;
+    const QStringList &m_diffLines;
+    DiffModel *m_currentModel = nullptr;
+    DiffModelList *m_models = nullptr;
     QStringList::ConstIterator m_diffIterator;
 
-    bool                       m_singleFileDiff;
-    bool                       m_malformed;
+    bool m_singleFileDiff = false;
+    bool m_malformed = false;
 
 protected:
-    const KompareModelList* m_list;
+    const ModelList *m_list;
 };
 
-} // End of namespace Diff2
+} // End of namespace KompareDiff2
 
 #endif
diff --git a/src/perforceparser.cpp b/src/perforceparser.cpp
index dd78d9200aa1..90b70075433e 100644
--- a/src/perforceparser.cpp
+++ b/src/perforceparser.cpp
@@ -1,19 +1,21 @@
 /*
-SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
+    SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #include "perforceparser.h"
 
-#include <QRegularExpression>
-
-#include <komparediffdebug.h>
+// lib
 #include "diffmodel.h"
+#include <komparediff2_logging.h>
+// Qt
+#include <QRegularExpression>
 
-using namespace Diff2;
+using namespace KompareDiff2;
 
-PerforceParser::PerforceParser(const KompareModelList* list, const QStringList& diff) : ParserBase(list, diff)
+PerforceParser::PerforceParser(const ModelList *list, const QStringList &diff)
+    : ParserBase(list, diff)
 {
     m_contextDiffHeader1.setPattern(QRegularExpression::anchoredPattern(QStringLiteral("==== (.*) - (.*) ====\\n")));
     m_contextDiffHeader1.setPatternOptions(QRegularExpression::InvertedGreedinessOption);
@@ -25,13 +27,11 @@ PerforceParser::PerforceParser(const KompareModelList* list, const QStringList&
     m_unifiedDiffHeader1.setPatternOptions(QRegularExpression::InvertedGreedinessOption);
 }
 
-PerforceParser::~PerforceParser()
-{
-}
+PerforceParser::~PerforceParser() = default;
 
-enum Kompare::Format PerforceParser::determineFormat()
+Format PerforceParser::determineFormat()
 {
-    qCDebug(LIBKOMPAREDIFF2) << "Determining the format of the Perforce Diff";
+    qCDebug(KOMPAREDIFF2_LOG) << "Determining the format of the Perforce Diff";
 
     QRegularExpression unifiedRE(QStringLiteral("^@@"));
     QRegularExpression contextRE(QStringLiteral("^\\*{15}"));
@@ -39,39 +39,31 @@ enum Kompare::Format PerforceParser::determineFormat()
     QRegularExpression rcsRE(QStringLiteral("^[acd]\\d+ \\d+"));
     // Summary is not supported since it gives no useful parsable info
 
-    QStringList::ConstIterator it = m_diffLines.begin();
-
-    while (it != m_diffLines.end())
-    {
-        if (it->indexOf(unifiedRE, 0) == 0)
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Difflines are from a Unified diff...";
-            return Kompare::Unified;
+    for (const QString &diffLine : std::as_const(m_diffLines)) {
+        if (diffLine.indexOf(unifiedRE, 0) == 0) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Difflines are from a Unified diff...";
+            return Unified;
         }
-        else if (it->indexOf(contextRE, 0) == 0)
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Difflines are from a Context diff...";
-            return Kompare::Context;
+        if (diffLine.indexOf(contextRE, 0) == 0) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Difflines are from a Context diff...";
+            return Context;
         }
-        else if (it->indexOf(normalRE, 0) == 0)
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Difflines are from a Normal diff...";
-            return Kompare::Normal;
+        if (diffLine.indexOf(normalRE, 0) == 0) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Difflines are from a Normal diff...";
+            return Normal;
         }
-        else if (it->indexOf(rcsRE, 0) == 0)
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Difflines are from a RCS diff...";
-            return Kompare::RCS;
+        if (diffLine.indexOf(rcsRE, 0) == 0) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Difflines are from a RCS diff...";
+            return RCS;
         }
-        ++it;
     }
-    qCDebug(LIBKOMPAREDIFF2) << "Difflines are from an unknown diff...";
-    return Kompare::UnknownFormat;
+    qCDebug(KOMPAREDIFF2_LOG) << "Difflines are from an unknown diff...";
+    return UnknownFormat;
 }
 
 bool PerforceParser::parseContextDiffHeader()
 {
-//     qCDebug(LIBKOMPAREDIFF2) << "ParserBase::parseContextDiffHeader()";
+//     qCDebug(KOMPAREDIFF2_LOG) << "ParserBase::parseContextDiffHeader()";
     bool result = false;
 
     QStringList::ConstIterator itEnd = m_diffLines.end();
@@ -79,36 +71,32 @@ bool PerforceParser::parseContextDiffHeader()
     const QRegularExpression sourceFileRE(QRegularExpression::anchoredPattern(QStringLiteral("([^\\#]+)#(\\d+)")));
     const QRegularExpression destinationFileRE(QRegularExpression::anchoredPattern(QStringLiteral("([^\\#]+)#(|\\d+)")));
 
-    while (m_diffIterator != itEnd)
-    {
+    while (m_diffIterator != itEnd) {
         const auto contextDiffHeader1Match = m_contextDiffHeader1.match(*(m_diffIterator)++);
-        if (contextDiffHeader1Match.hasMatch())
-        {
-//             qCDebug(LIBKOMPAREDIFF2) << "Matched length Header1 = " << contextDiffHeader1Match.capturedLength();
-//             qCDebug(LIBKOMPAREDIFF2) << "Matched string Header1 = " << contextDiffHeader1Match.captured( 0 );
-//             qCDebug(LIBKOMPAREDIFF2) << "First capture  Header1 = " << contextDiffHeader1Match.captured( 1 );
-//             qCDebug(LIBKOMPAREDIFF2) << "Second capture Header1 = " << contextDiffHeader1Match.captured( 2 );
+        if (contextDiffHeader1Match.hasMatch()) {
+//             qCDebug(KOMPAREDIFF2_LOG) << "Matched length Header1 = " << contextDiffHeader1Match.capturedLength();
+//             qCDebug(KOMPAREDIFF2_LOG) << "Matched string Header1 = " << contextDiffHeader1Match.captured( 0 );
+//             qCDebug(KOMPAREDIFF2_LOG) << "First capture  Header1 = " << contextDiffHeader1Match.captured( 1 );
+//             qCDebug(KOMPAREDIFF2_LOG) << "Second capture Header1 = " << contextDiffHeader1Match.captured( 2 );
 
             m_currentModel = new DiffModel();
             const auto sourceFileREMatch = sourceFileRE.match(contextDiffHeader1Match.captured(1));
             const auto destinationFileREMatch = destinationFileRE.match(contextDiffHeader1Match.captured(2));
-            qCDebug(LIBKOMPAREDIFF2) << "Matched length   = " << sourceFileREMatch.capturedLength();
-            qCDebug(LIBKOMPAREDIFF2) << "Matched length   = " << destinationFileREMatch.capturedLength();
-            qCDebug(LIBKOMPAREDIFF2) << "Captured texts   = " << sourceFileREMatch.capturedTexts();
-            qCDebug(LIBKOMPAREDIFF2) << "Captured texts   = " << destinationFileREMatch.capturedTexts();
-            qCDebug(LIBKOMPAREDIFF2) << "Source File      : " << sourceFileREMatch.captured(1);
-            qCDebug(LIBKOMPAREDIFF2) << "Destination File : " << destinationFileREMatch.captured(1);
+            qCDebug(KOMPAREDIFF2_LOG) << "Matched length   = " << sourceFileREMatch.capturedLength();
+            qCDebug(KOMPAREDIFF2_LOG) << "Matched length   = " << destinationFileREMatch.capturedLength();
+            qCDebug(KOMPAREDIFF2_LOG) << "Captured texts   = " << sourceFileREMatch.capturedTexts();
+            qCDebug(KOMPAREDIFF2_LOG) << "Captured texts   = " << destinationFileREMatch.capturedTexts();
+            qCDebug(KOMPAREDIFF2_LOG) << "Source File      : " << sourceFileREMatch.captured(1);
+            qCDebug(KOMPAREDIFF2_LOG) << "Destination File : " << destinationFileREMatch.captured(1);
             m_currentModel->setSourceFile(sourceFileREMatch.captured(1));
             m_currentModel->setDestinationFile(destinationFileREMatch.captured(1));
 
             result = true;
 
             break;
-        }
-        else
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Matched length = " << contextDiffHeader1Match.capturedLength();
-            qCDebug(LIBKOMPAREDIFF2) << "Captured texts = " << contextDiffHeader1Match.capturedTexts();
+        } else {
+            qCDebug(KOMPAREDIFF2_LOG) << "Matched length = " << contextDiffHeader1Match.capturedLength();
+            qCDebug(KOMPAREDIFF2_LOG) << "Captured texts = " << contextDiffHeader1Match.capturedTexts();
         }
     }
 
@@ -124,38 +112,34 @@ bool PerforceParser::parseNormalDiffHeader()
     QRegularExpression sourceFileRE(QRegularExpression::anchoredPattern(QStringLiteral("([^\\#]+)#(\\d+)")));
     QRegularExpression destinationFileRE(QRegularExpression::anchoredPattern(QStringLiteral("([^\\#]+)#(|\\d+)")));
 
-    while (m_diffIterator != itEnd)
-    {
-        qCDebug(LIBKOMPAREDIFF2) << "Line = " << *m_diffIterator;
-        qCDebug(LIBKOMPAREDIFF2) << "String length  = " << (*m_diffIterator).length();
+    while (m_diffIterator != itEnd) {
+        qCDebug(KOMPAREDIFF2_LOG) << "Line = " << *m_diffIterator;
+        qCDebug(KOMPAREDIFF2_LOG) << "String length  = " << (*m_diffIterator).length();
         const auto normalDiffHeaderMatch = m_normalDiffHeader.match(*(m_diffIterator)++);
-        if (normalDiffHeaderMatch.hasMatch())
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Matched length Header1 = " << normalDiffHeaderMatch.capturedLength();
-            qCDebug(LIBKOMPAREDIFF2) << "Matched string Header1 = " << normalDiffHeaderMatch.captured(0);
-            qCDebug(LIBKOMPAREDIFF2) << "First  capture Header1 = \"" << normalDiffHeaderMatch.captured(1) << "\"";
-            qCDebug(LIBKOMPAREDIFF2) << "Second capture Header1 = \"" << normalDiffHeaderMatch.captured(2) << "\"";
+        if (normalDiffHeaderMatch.hasMatch()) {
+            qCDebug(KOMPAREDIFF2_LOG) << "Matched length Header1 = " << normalDiffHeaderMatch.capturedLength();
+            qCDebug(KOMPAREDIFF2_LOG) << "Matched string Header1 = " << normalDiffHeaderMatch.captured(0);
+            qCDebug(KOMPAREDIFF2_LOG) << "First  capture Header1 = \"" << normalDiffHeaderMatch.captured(1) << "\"";
+            qCDebug(KOMPAREDIFF2_LOG) << "Second capture Header1 = \"" << normalDiffHeaderMatch.captured(2) << "\"";
 
             m_currentModel = new DiffModel();
             const auto sourceFileREMatch = sourceFileRE.match(normalDiffHeaderMatch.captured(1));
             const auto destinationFileREMatch = destinationFileRE.match(normalDiffHeaderMatch.captured(2));
-            qCDebug(LIBKOMPAREDIFF2) << "Matched length   = " << sourceFileREMatch.capturedLength();
-            qCDebug(LIBKOMPAREDIFF2) << "Matched length   = " << destinationFileREMatch.capturedLength();
-            qCDebug(LIBKOMPAREDIFF2) << "Captured texts   = " << sourceFileREMatch.capturedTexts();
-            qCDebug(LIBKOMPAREDIFF2) << "Captured texts   = " << destinationFileREMatch.capturedTexts();
-            qCDebug(LIBKOMPAREDIFF2) << "Source File      : " << sourceFileREMatch.captured(1);
-            qCDebug(LIBKOMPAREDIFF2) << "Destination File : " << destinationFileREMatch.captured(1);
+            qCDebug(KOMPAREDIFF2_LOG) << "Matched length   = " << sourceFileREMatch.capturedLength();
+            qCDebug(KOMPAREDIFF2_LOG) << "Matched length   = " << destinationFileREMatch.capturedLength();
+            qCDebug(KOMPAREDIFF2_LOG) << "Captured texts   = " << sourceFileREMatch.capturedTexts();
+            qCDebug(KOMPAREDIFF2_LOG) << "Captured texts   = " << destinationFileREMatch.capturedTexts();
+            qCDebug(KOMPAREDIFF2_LOG) << "Source File      : " << sourceFileREMatch.captured(1);
+            qCDebug(KOMPAREDIFF2_LOG) << "Destination File : " << destinationFileREMatch.captured(1);
             m_currentModel->setSourceFile(sourceFileREMatch.captured(1));
             m_currentModel->setDestinationFile(destinationFileREMatch.captured(1));
 
             result = true;
 
             break;
-        }
-        else
-        {
-            qCDebug(LIBKOMPAREDIFF2) << "Matched length = " << normalDiffHeaderMatch.capturedLength();
-            qCDebug(LIBKOMPAREDIFF2) << "Captured texts = " << normalDiffHeaderMatch.capturedTexts();
+        } else {
+            qCDebug(KOMPAREDIFF2_LOG) << "Matched length = " << normalDiffHeaderMatch.capturedLength();
+            qCDebug(KOMPAREDIFF2_LOG) << "Captured texts = " << normalDiffHeaderMatch.capturedTexts();
         }
     }
 
@@ -176,41 +160,36 @@ bool PerforceParser::parseUnifiedDiffHeader()
     QRegularExpression sourceFileRE(QRegularExpression::anchoredPattern(QStringLiteral("([^\\#]+)#(\\d+)")));
     QRegularExpression destinationFileRE(QRegularExpression::anchoredPattern(QStringLiteral("([^\\#]+)#(|\\d+)")));
 
-    while (m_diffIterator != itEnd)
-    {
-//         qCDebug(LIBKOMPAREDIFF2) << "Line = " << *m_diffIterator;
-//         qCDebug(LIBKOMPAREDIFF2) << "String length  = " << (*m_diffIterator).length();
+    while (m_diffIterator != itEnd) {
+//         qCDebug(KOMPAREDIFF2_LOG) << "Line = " << *m_diffIterator;
+//         qCDebug(KOMPAREDIFF2_LOG) << "String length  = " << (*m_diffIterator).length();
         const auto unifiedDiffHeader1Match = m_unifiedDiffHeader1.match(*(m_diffIterator)++);
-        if (unifiedDiffHeader1Match.hasMatch())
-        {
-//             qCDebug(LIBKOMPAREDIFF2) << "Matched length Header1 = " << unifiedDiffHeader1Match.capturedLength();
-//             qCDebug(LIBKOMPAREDIFF2) << "Matched string Header1 = " << unifiedDiffHeader1Match.captured( 0 );
-//             qCDebug(LIBKOMPAREDIFF2) << "First  capture Header1 = \"" << unifiedDiffHeader1Match.captured( 1 ) << "\"";
-//             qCDebug(LIBKOMPAREDIFF2) << "Second capture Header1 = \"" << unifiedDiffHeader1Match.captured( 2 ) << "\"";
+        if (unifiedDiffHeader1Match.hasMatch()) {
+//             qCDebug(KOMPAREDIFF2_LOG) << "Matched length Header1 = " << unifiedDiffHeader1Match.capturedLength();
+//             qCDebug(KOMPAREDIFF2_LOG) << "Matched string Header1 = " << unifiedDiffHeader1Match.captured( 0 );
+//             qCDebug(KOMPAREDIFF2_LOG) << "First  capture Header1 = \"" << unifiedDiffHeader1Match.captured( 1 ) << "\"";
+//             qCDebug(KOMPAREDIFF2_LOG) << "Second capture Header1 = \"" << unifiedDiffHeader1Match.captured( 2 ) << "\"";
 
             m_currentModel = new DiffModel();
             const auto sourceFileREMatch = sourceFileRE.match(unifiedDiffHeader1Match.captured(1));
             const auto destinationFileREMatch = destinationFileRE.match(unifiedDiffHeader1Match.captured(2));
-//             qCDebug(LIBKOMPAREDIFF2) << "Matched length   = " << sourceFileREMatch.capturedLength();
-//             qCDebug(LIBKOMPAREDIFF2) << "Matched length   = " << destinationFileREMatch.capturedLength();
-//             qCDebug(LIBKOMPAREDIFF2) << "Captured texts   = " << sourceFileREMatch.capturedTexts();
-//             qCDebug(LIBKOMPAREDIFF2) << "Captured texts   = " << destinationFileREMatch.capturedTexts();
-//             qCDebug(LIBKOMPAREDIFF2) << "Source File      : " << sourceFileREMatch.captured( 1 );
-//             qCDebug(LIBKOMPAREDIFF2) << "Destination File : " << destinationFileREMatch.captured( 1 );
+//             qCDebug(KOMPAREDIFF2_LOG) << "Matched length   = " << sourceFileREMatch.capturedLength();
+//             qCDebug(KOMPAREDIFF2_LOG) << "Matched length   = " << destinationFileREMatch.capturedLength();
+//             qCDebug(KOMPAREDIFF2_LOG) << "Captured texts   = " << sourceFileREMatch.capturedTexts();
+//             qCDebug(KOMPAREDIFF2_LOG) << "Captured texts   = " << destinationFileREMatch.capturedTexts();
+//             qCDebug(KOMPAREDIFF2_LOG) << "Source File      : " << sourceFileREMatch.captured( 1 );
+//             qCDebug(KOMPAREDIFF2_LOG) << "Destination File : " << destinationFileREMatch.captured( 1 );
             m_currentModel->setSourceFile(sourceFileREMatch.captured(1));
             m_currentModel->setDestinationFile(destinationFileREMatch.captured(1));
 
             result = true;
 
             break;
-        }
-        else
-        {
-//             qCDebug(LIBKOMPAREDIFF2) << "Matched length = " << unifiedDiffHeader1Match.capturedLength();
-//             qCDebug(LIBKOMPAREDIFF2) << "Captured texts = " << unifiedDiffHeader1Match.capturedTexts();
+        } else {
+//             qCDebug(KOMPAREDIFF2_LOG) << "Matched length = " << unifiedDiffHeader1Match.capturedLength();
+//             qCDebug(KOMPAREDIFF2_LOG) << "Captured texts = " << unifiedDiffHeader1Match.capturedTexts();
         }
     }
 
     return result;
 }
-
diff --git a/src/perforceparser.h b/src/perforceparser.h
index d9b2478bbdea..dc82a36cc93f 100644
--- a/src/perforceparser.h
+++ b/src/perforceparser.h
@@ -1,21 +1,22 @@
 /*
-SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
+    SPDX-FileCopyrightText: 2002-2004 Otto Bruggeman <otto.bruggeman@home.nl>
 
-SPDX-License-Identifier: GPL-2.0-or-later
+    SPDX-License-Identifier: GPL-2.0-or-later
 */
 
 #ifndef KOMPAREDIFF2_PERFORCEPARSER_H
 #define KOMPAREDIFF2_PERFORCEPARSER_H
 
+// lib
 #include "parserbase.h"
 
-namespace Diff2
+namespace KompareDiff2
 {
 
 class PerforceParser : public ParserBase
 {
 public:
-    PerforceParser(const KompareModelList* list, const QStringList& diff);
+    PerforceParser(const ModelList *list, const QStringList &diff);
     ~PerforceParser() override;
 
 protected:
@@ -25,9 +26,9 @@ protected:
     bool parseUnifiedDiffHeader() override;
 
 protected:
-    enum Kompare::Format determineFormat() override;
+    Format determineFormat() override;
 };
 
-} // End of namespace Diff2
+} // End of namespace KompareDiff2
 
 #endif
diff --git a/src/settingsbase.cpp b/src/settingsbase.cpp
deleted file mode 100644
index d3acfa0d83c0..000000000000
--- a/src/settingsbase.cpp
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
-SPDX-FileCopyrightText: 2001 Otto Bruggeman <otto.bruggeman@home.nl>
-SPDX-FileCopyrightText: 2001 John Firebaugh <jfirebaugh@kde.org>
-
-SPDX-License-Identifier: GPL-2.0-or-later
-*/
-
-#include "settingsbase.h"
-
-#include <QWidget>
-
-SettingsBase::SettingsBase(QWidget* parent) : QObject(parent)
-{
-
-}
-
-SettingsBase::~SettingsBase()
-{
-
-}
-
-void SettingsBase::loadSettings(KConfig* /* config */)
-{
-}
-
-void SettingsBase::saveSettings(KConfig* /* config */)
-{
-}
-
-#include "moc_settingsbase.cpp"
diff --git a/src/settingsbase.h b/src/settingsbase.h
deleted file mode 100644
index daf5034fa58e..000000000000
--- a/src/settingsbase.h
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
-SPDX-FileCopyrightText: 2001 Otto Bruggeman <otto.bruggeman@home.nl>
-SPDX-FileCopyrightText: 2001 John Firebaugh <jfirebaugh@kde.org>
-
-SPDX-License-Identifier: GPL-2.0-or-later
-*/
-
-#ifndef KOMPAREDIFF2_SETTINGSBASE_H
-#define KOMPAREDIFF2_SETTINGSBASE_H
-
-#include <QObject>
-
-#include "komparediff2_export.h"
-
-class QWidget;
-class KConfig;
-
-/**
- * @class SettingsBase settingsbase.h <KompareDiff2/SettingsBase>
- *
- * Base class for settings classes.
- */
-class KOMPAREDIFF2_EXPORT SettingsBase : public QObject
-{
-    Q_OBJECT
-public:
-    explicit SettingsBase(QWidget* parent);
-    ~SettingsBase() override;
-
-public:
-    virtual void loadSettings(KConfig* config);
-    virtual void saveSettings(KConfig* config);
-};
-
-#endif
diff --git a/src/stringlistpair.cpp b/src/stringlistpair.cpp
index 44c53aa9a7c5..5e45ce7d00c0 100644
--- a/src/stringlistpair.cpp
+++ b/src/stringlistpair.cpp
@@ -1,14 +1,15 @@
 /*
-SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
+    SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
 
-SPDX-License-Identifier: LGPL-2.0-or-later
+    SPDX-License-Identifier: LGPL-2.0-or-later
 */
 
 #include "stringlistpair.h"
 
+// Qt
 #include <QHash>
 
-using namespace Diff2;
+using namespace KompareDiff2;
 
 unsigned int StringListPair::lengthFirst() const
 {
@@ -30,26 +31,25 @@ MarkerList StringListPair::markerListSecond() const
     return m_markersSecond;
 }
 
-void StringListPair::prependFirst(Marker* marker)
+void StringListPair::prependFirst(Marker *marker)
 {
     m_markersFirst.prepend(marker);
 }
 
-void StringListPair::prependSecond(Marker* marker)
+void StringListPair::prependSecond(Marker *marker)
 {
     m_markersSecond.prepend(marker);
 }
 
-StringListPair::StringListPair(const QStringList& first, const QStringList& second)
-    : m_first(first), m_second(second)
-{
+StringListPair::StringListPair(const QStringList &first, const QStringList &second)
+    : m_first(first)
+    , m_second(second)
     // Do not forget about 1 virtual element - see LevenshteinTable
-    m_lengthFirst = first.length() + 1;
-    m_lengthSecond = second.length() + 1;
-
-    m_hashesFirst = new unsigned int[m_lengthFirst];
-    m_hashesSecond = new unsigned int[m_lengthSecond];
-
+    , m_lengthFirst(first.length() + 1)
+    , m_lengthSecond(second.length() + 1)
+    , m_hashesFirst(m_lengthFirst)
+    , m_hashesSecond(m_lengthSecond)
+{
     m_hashesFirst[0] = qHash(QString());
     for (unsigned int i = 1; i < m_lengthFirst; ++i) {
         m_hashesFirst[i] = qHash(first[i - 1]);
@@ -60,11 +60,7 @@ StringListPair::StringListPair(const QStringList& first, const QStringList& seco
     }
 }
 
-StringListPair::~StringListPair()
-{
-    delete[] m_hashesFirst;
-    delete[] m_hashesSecond;
-}
+StringListPair::~StringListPair() = default;
 
 bool StringListPair::equal(unsigned int firstIndex, unsigned int secondIndex) const
 {
diff --git a/src/stringlistpair.h b/src/stringlistpair.h
index e1e5622ce4b1..ea0931742d67 100644
--- a/src/stringlistpair.h
+++ b/src/stringlistpair.h
@@ -1,38 +1,45 @@
 /*
-SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
+    SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
 
-SPDX-License-Identifier: LGPL-2.0-or-later
+    SPDX-License-Identifier: LGPL-2.0-or-later
 */
 
 #ifndef KOMPAREDIFF2_STRINGLISTPAIR_H
 #define KOMPAREDIFF2_STRINGLISTPAIR_H
 
-#include <QStringList>
+// lib
 #include "marker.h"
+// Qt
+#include <QStringList>
+// Std
+#include <vector>
 
-namespace Diff2 {
+namespace KompareDiff2
+{
 
-class StringListPair {
+class StringListPair
+{
 public:
-    StringListPair(const QStringList& first, const QStringList& second);
+    StringListPair(const QStringList &first, const QStringList &second);
     ~StringListPair();
     bool equal(unsigned int firstIndex, unsigned int secondIndex) const;
     unsigned int lengthFirst() const;
     unsigned int lengthSecond() const;
     MarkerList markerListFirst() const;
     MarkerList markerListSecond() const;
-    void prependFirst(Marker* marker);
-    void prependSecond(Marker* marker);
+    void prependFirst(Marker *marker);
+    void prependSecond(Marker *marker);
     bool needFineGrainedOutput(unsigned int difference) const;
 
     const static bool allowReplace = false;
+
 private:
     const QStringList m_first;
     const QStringList m_second;
-    unsigned int m_lengthFirst;
-    unsigned int m_lengthSecond;
-    unsigned int* m_hashesFirst;
-    unsigned int* m_hashesSecond;
+    const unsigned int m_lengthFirst;
+    const unsigned int m_lengthSecond;
+    std::vector<unsigned int> m_hashesFirst;
+    std::vector<unsigned int> m_hashesSecond;
     MarkerList m_markersFirst;
     MarkerList m_markersSecond;
 };
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index a4ef2f15a5a9..5cb9f8f3ad4a 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -14,8 +14,8 @@ include_directories(
 )
 
 ecm_qt_declare_logging_category(komparediff2_DBG_SRCS
-    HEADER komparediffdebug.h
-    IDENTIFIER LIBKOMPAREDIFF2
+    HEADER komparediff2_logging.h
+    IDENTIFIER KOMPAREDIFF2_LOG
     CATEGORY_NAME "libkomparediff"
 )
 
@@ -26,16 +26,19 @@ target_sources(interactiveDiffTest PRIVATE
     ${LIB_SOURCE_DIR}/perforceparser.cpp
     ${LIB_SOURCE_DIR}/cvsdiffparser.cpp
     ${LIB_SOURCE_DIR}/difference.cpp
+    ${LIB_SOURCE_DIR}/differencestring.cpp
     ${LIB_SOURCE_DIR}/diffhunk.cpp
     ${LIB_SOURCE_DIR}/diffmodel.cpp
+    ${LIB_SOURCE_DIR}/diffmodel_p.cpp
     ${LIB_SOURCE_DIR}/diffmodellist.cpp
     ${LIB_SOURCE_DIR}/diffparser.cpp
-    ${LIB_SOURCE_DIR}/komparemodellist.cpp
+    ${LIB_SOURCE_DIR}/info.cpp
+    ${LIB_SOURCE_DIR}/modellist.cpp
+    ${LIB_SOURCE_DIR}/modellist_p.cpp
     ${LIB_SOURCE_DIR}/kompareprocess.cpp
     ${LIB_SOURCE_DIR}/parser.cpp
     ${LIB_SOURCE_DIR}/parserbase.cpp
     ${LIB_SOURCE_DIR}/stringlistpair.cpp
-    ${LIB_SOURCE_DIR}/kompare.cpp
     ${komparediff2_DBG_SRCS}
 )
 
@@ -49,21 +52,19 @@ target_compile_definitions(interactiveDiffTest
     KOMPAREDIFF2_STATIC_DEFINE
 )
 target_link_libraries(interactiveDiffTest
-    Qt::Core
-    Qt::Test
-    KF${KF_MAJOR_VERSION}::CoreAddons
-    KF${KF_MAJOR_VERSION}::I18n
-    KF${KF_MAJOR_VERSION}::XmlGui
-    KF${KF_MAJOR_VERSION}::KIOCore
+    Qt6::Core
+    Qt6::Test
+    KF6::CoreAddons
+    KF6::I18n
+    KF6::XmlGui
+    KF6::KIOCore
 )
-if (QT_MAJOR_VERSION STREQUAL "6")
-    target_link_libraries(interactiveDiffTest Qt6::Core5Compat)
-endif()
 
 add_executable(levenshteintest)
 target_sources(levenshteintest PRIVATE
     levenshteintest.cpp
     ${LIB_SOURCE_DIR}/difference.cpp
+    ${LIB_SOURCE_DIR}/differencestring.cpp
     ${LIB_SOURCE_DIR}/stringlistpair.cpp
     ${komparediff2_DBG_SRCS}
 )
@@ -78,6 +79,6 @@ target_compile_definitions(levenshteintest
     KOMPAREDIFF2_STATIC_DEFINE
 )
 target_link_libraries(levenshteintest
-    Qt::Test
-    Qt::Core
+    Qt6::Test
+    Qt6::Core
 )
diff --git a/tests/interactivedifftest.cpp b/tests/interactivedifftest.cpp
index 12f07f7562e5..b6a930bf4319 100644
--- a/tests/interactivedifftest.cpp
+++ b/tests/interactivedifftest.cpp
@@ -1,42 +1,53 @@
 /*
-SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
+    SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
 
-SPDX-License-Identifier: LGPL-2.0-or-later
+    SPDX-License-Identifier: LGPL-2.0-or-later
 */
 
 #include "interactivedifftest.h"
 
-#include <QTest>
+// lib
 #include "diffmodel.h"
 #include "diffmodellist.h"
 #include "parser.h"
+// Qt
+#include <QTest>
 
-using namespace Diff2;
+using namespace KompareDiff2;
 
-typedef QHash<int, QPair<QStringList, QStringList> > DifferenceHash;
+typedef QHash<int, QPair<QStringList, QStringList>> DifferenceHash;
 Q_DECLARE_METATYPE(DifferenceHash);
-typedef QHash<int, QPair<int, int> > LineNumberHash;
+typedef QHash<int, QPair<int, int>> LineNumberHash;
 Q_DECLARE_METATYPE(LineNumberHash);
 
-void InteractiveDiffTest::CompareDifferenceStringList(const DifferenceStringList& actual, const QStringList& expected)
+void InteractiveDiffTest::CompareDifferenceStringList(const DifferenceStringList &actual, const QStringList &expected)
 {
     DifferenceStringListConstIterator actualIter;
     QStringList::const_iterator expectedIter;
-    for (actualIter = actual.constBegin(), expectedIter = expected.constBegin(); actualIter != actual.constEnd() && expectedIter != expected.constEnd(); ++actualIter, ++expectedIter) {
+    for (actualIter = actual.constBegin(), expectedIter = expected.constBegin(); actualIter != actual.constEnd() && expectedIter != expected.constEnd();
+         ++actualIter, ++expectedIter) {
         QCOMPARE((*actualIter)->string(), *expectedIter);
     }
     if (actualIter != actual.constEnd()) {
-        QFAIL(QStringLiteral("Actual has too many items, starting with '%1', line %2").arg((*actualIter)->string()).arg(actualIter - actual.constBegin()).toLatin1().constData());
+        QFAIL(QStringLiteral("Actual has too many items, starting with '%1', line %2")
+                  .arg((*actualIter)->string())
+                  .arg(actualIter - actual.constBegin())
+                  .toLatin1()
+                  .constData());
     }
     if (expectedIter != expected.constEnd()) {
-        QFAIL(QStringLiteral("Actual has too few items, no match for '%1', line %2").arg(*expectedIter).arg(expectedIter - expected.constBegin()).toLatin1().constData());
+        QFAIL(QStringLiteral("Actual has too few items, no match for '%1', line %2")
+                  .arg(*expectedIter)
+                  .arg(expectedIter - expected.constBegin())
+                  .toLatin1()
+                  .constData());
     }
 }
 
 // The most basic test - something is actually working
 void InteractiveDiffTest::testOneLineChange()
 {
-    DiffModel* model = new DiffModel();
+    DiffModel *model = new DiffModel();
     QStringList newLines;
     newLines << "newline\n";
     QStringList oldLines;
@@ -45,7 +56,7 @@ void InteractiveDiffTest::testOneLineChange()
     QCOMPARE(model->differences()->size(), 1);
 
     QCOMPARE(model->differenceCount(), 1);
-    const Difference* diff = model->differenceAt(0);
+    const Difference *diff = model->differenceAt(0);
     CompareDifferenceStringList(diff->sourceLines(), oldLines);
     CompareDifferenceStringList(diff->destinationLines(), newLines);
     QCOMPARE(diff->type(), int(Difference::Change));
@@ -53,15 +64,16 @@ void InteractiveDiffTest::testOneLineChange()
 
 void InteractiveDiffTest::testSameLine()
 {
-    DiffModel* model = new DiffModel();
+    DiffModel *model = new DiffModel();
     QStringList newLines;
     newLines << "oldline2\n";
     QStringList oldLines;
-    oldLines << "oldline1\n" << "oldline2\n";
+    oldLines << "oldline1\n"
+             << "oldline2\n";
     model->linesChanged(oldLines, newLines, 2);
 
     QCOMPARE(model->differenceCount(), 1);
-    const Difference* diff = model->differenceAt(0);
+    const Difference *diff = model->differenceAt(0);
     CompareDifferenceStringList(diff->sourceLines(), QStringList() << "oldline1\n");
     CompareDifferenceStringList(diff->destinationLines(), QStringList());
     QCOMPARE(diff->type(), int(Difference::Delete));
@@ -72,10 +84,10 @@ void InteractiveDiffTest::testDifferenceContents()
     QFETCH(QStringList, patch);
     Parser parser(nullptr);
     bool malformed;
-    DiffModelList* models = parser.parse(patch, &malformed);
+    DiffModelList *models = parser.parse(patch, &malformed);
     QVERIFY(!malformed);
     QCOMPARE(models->size(), 1);
-    DiffModel* model = models->at(0);
+    DiffModel *model = models->at(0);
 
     QFETCH(QStringList, oldLines);
     QFETCH(QStringList, newLines);
@@ -88,7 +100,7 @@ void InteractiveDiffTest::testDifferenceContents()
 
     QFETCH(DifferenceHash, expectedDifferences);
     for (DifferenceHash::ConstIterator iter = expectedDifferences.constBegin(); iter != expectedDifferences.constEnd(); ++iter) {
-        const Difference* diff = model->differenceAt(iter.key());
+        const Difference *diff = model->differenceAt(iter.key());
         CompareDifferenceStringList(diff->sourceLines(), iter.value().first);
         CompareDifferenceStringList(diff->destinationLines(), iter.value().second);
     }
@@ -97,8 +109,8 @@ void InteractiveDiffTest::testDifferenceContents()
 void InteractiveDiffTest::testDifferenceContents_data()
 {
     QTest::addColumn<QStringList>("patch");
-    QTest::addColumn<QStringList>("oldLines");     // lines that are replaced
-    QTest::addColumn<QStringList>("newLines");     // replacement lines
+    QTest::addColumn<QStringList>("oldLines"); // lines that are replaced
+    QTest::addColumn<QStringList>("newLines"); // replacement lines
     QTest::addColumn<int>("editLineNumber");
     QTest::addColumn<bool>("isAlreadyApplied");
     QTest::addColumn<int>("expectedDifferenceCount");
@@ -106,26 +118,31 @@ void InteractiveDiffTest::testDifferenceContents_data()
 
     {
         QStringList patch;
-        patch <<
-              "--- file1\t2011-01-01 20:23:45.000000000 +0300\n" <<
-              "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n" <<
-              "@@ -1,5 +1,5 @@\n" <<
-              " abcd\n" <<
-              "-delete1\n" <<
-              "+insert1\n" <<
-              " efgh\n" <<
-              "-delete2\n" <<
-              "+insert2\n" <<
-              " ijkl\n";
+        patch << "--- file1\t2011-01-01 20:23:45.000000000 +0300\n"
+              << "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n"
+              << "@@ -1,5 +1,5 @@\n"
+              << " abcd\n"
+              << "-delete1\n"
+              << "+insert1\n"
+              << " efgh\n"
+              << "-delete2\n"
+              << "+insert2\n"
+              << " ijkl\n";
 
         QStringList newLines;
-        newLines << "newline1\n" << "newline2\n";
+        newLines << "newline1\n"
+                 << "newline2\n";
         QStringList oldLines;
         oldLines << "efgh\n";
         QStringList sourceLines;
-        sourceLines << "delete1\n" << "efgh\n" << "delete2\n";
+        sourceLines << "delete1\n"
+                    << "efgh\n"
+                    << "delete2\n";
         QStringList destinationLines;
-        destinationLines << "insert1\n" << "newline1\n" << "newline2\n" << "insert2\n";
+        destinationLines << "insert1\n"
+                         << "newline1\n"
+                         << "newline2\n"
+                         << "insert2\n";
         DifferenceHash expectedDifferences;
         expectedDifferences.insert(0, qMakePair(sourceLines, destinationLines));
 
@@ -133,25 +150,28 @@ void InteractiveDiffTest::testDifferenceContents_data()
     }
     {
         QStringList patch;
-        patch <<
-              "--- file1\t2011-01-01 20:23:45.000000000 +0300\n" <<
-              "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n" <<
-              "@@ -1,4 +1,4 @@\n" <<
-              " abcd\n" <<
-              "-delete1\n" <<
-              "-delete2\n" <<
-              "+insert1\n" <<
-              "+insert2\n" <<
-              " efgh\n";
+        patch << "--- file1\t2011-01-01 20:23:45.000000000 +0300\n"
+              << "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n"
+              << "@@ -1,4 +1,4 @@\n"
+              << " abcd\n"
+              << "-delete1\n"
+              << "-delete2\n"
+              << "+insert1\n"
+              << "+insert2\n"
+              << " efgh\n";
 
         QStringList newLines;
         newLines << "newline1\n";
         QStringList oldLines;
         oldLines << "efgh\n";
         QStringList sourceLines;
-        sourceLines << "delete1\n" << "delete2\n" << "efgh\n";
+        sourceLines << "delete1\n"
+                    << "delete2\n"
+                    << "efgh\n";
         QStringList destinationLines;
-        destinationLines << "insert1\n" << "insert2\n" << "newline1\n";
+        destinationLines << "insert1\n"
+                         << "insert2\n"
+                         << "newline1\n";
         DifferenceHash expectedDifferences;
         expectedDifferences.insert(0, qMakePair(sourceLines, destinationLines));
 
@@ -160,14 +180,13 @@ void InteractiveDiffTest::testDifferenceContents_data()
     }
     {
         QStringList patch;
-        patch <<
-              "--- file1\t2011-01-01 20:23:45.000000000 +0300\n" <<
-              "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n" <<
-              "@@ -1,3 +1,3 @@\n" <<
-              " abcd\n" <<
-              "-delete1\n" <<
-              "+insert1\n" <<
-              " efgh\n";
+        patch << "--- file1\t2011-01-01 20:23:45.000000000 +0300\n"
+              << "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n"
+              << "@@ -1,3 +1,3 @@\n"
+              << " abcd\n"
+              << "-delete1\n"
+              << "+insert1\n"
+              << " efgh\n";
 
         QStringList newLines;
         newLines << "delete1\n";
@@ -177,33 +196,32 @@ void InteractiveDiffTest::testDifferenceContents_data()
     }
     {
         QStringList patch;
-        patch <<
-              "--- file1\t2011-01-01 20:23:45.000000000 +0300\n" <<
-              "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n" <<
-              "@@ -1,3 +1,2 @@\n" <<
-              " abcd\n" <<
-              "-delete1\n" <<
-              " efgh\n";
+        patch << "--- file1\t2011-01-01 20:23:45.000000000 +0300\n"
+              << "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n"
+              << "@@ -1,3 +1,2 @@\n"
+              << " abcd\n"
+              << "-delete1\n"
+              << " efgh\n";
 
         QStringList newLines;
-        newLines << "abcd\n" << "delete1\n";
+        newLines << "abcd\n"
+                 << "delete1\n";
         QStringList oldLines;
         oldLines << "abcd\n";
         QTest::newRow("Revert deletion") << patch << oldLines << newLines << 1 << true << 0 << DifferenceHash();
     }
     {
         QStringList patch;
-        patch <<
-              "--- file1\t2011-01-01 20:23:45.000000000 +0300\n" <<
-              "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n" <<
-              "@@ -1,4 +1,5 @@\n" <<
-              " abcd\n" <<
-              "-delete1\n" <<
-              "-delete2\n" <<
-              "+insert1\n" <<
-              "+insert2\n" <<
-              "+insert3\n" <<
-              " efgh\n";
+        patch << "--- file1\t2011-01-01 20:23:45.000000000 +0300\n"
+              << "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n"
+              << "@@ -1,4 +1,5 @@\n"
+              << " abcd\n"
+              << "-delete1\n"
+              << "-delete2\n"
+              << "+insert1\n"
+              << "+insert2\n"
+              << "+insert3\n"
+              << " efgh\n";
 
         QStringList newLines;
         newLines << "delete2\n";
@@ -217,25 +235,32 @@ void InteractiveDiffTest::testDifferenceContents_data()
     }
     {
         QStringList patch;
-        patch <<
-              "--- file1\t2011-01-01 20:23:45.000000000 +0300\n" <<
-              "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n" <<
-              "@@ -1,4 +1,4 @@\n" <<
-              " abcd\n" <<
-              "-delete1\n" <<
-              "-delete2\n" <<
-              "+insert1\n" <<
-              "+insert2\n" <<
-              " efgh\n";
+        patch << "--- file1\t2011-01-01 20:23:45.000000000 +0300\n"
+              << "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n"
+              << "@@ -1,4 +1,4 @@\n"
+              << " abcd\n"
+              << "-delete1\n"
+              << "-delete2\n"
+              << "+insert1\n"
+              << "+insert2\n"
+              << " efgh\n";
 
         QStringList newLines;
-        newLines << "newline1\n" << "newline2\n";
+        newLines << "newline1\n"
+                 << "newline2\n";
         QStringList oldLines;
-        oldLines << "abcd\n" << "insert1\n" << "insert2\n" << "efgh\n";
+        oldLines << "abcd\n"
+                 << "insert1\n"
+                 << "insert2\n"
+                 << "efgh\n";
         QStringList sourceLines;
-        sourceLines << "abcd\n" << "delete1\n" << "delete2\n" << "efgh\n";
+        sourceLines << "abcd\n"
+                    << "delete1\n"
+                    << "delete2\n"
+                    << "efgh\n";
         QStringList destinationLines;
-        destinationLines << "newline1\n" << "newline2\n";
+        destinationLines << "newline1\n"
+                         << "newline2\n";
         DifferenceHash expectedDifferences;
         expectedDifferences.insert(0, qMakePair(sourceLines, destinationLines));
 
@@ -244,25 +269,30 @@ void InteractiveDiffTest::testDifferenceContents_data()
     }
     {
         QStringList patch;
-        patch <<
-              "--- file1\t2011-01-01 20:23:45.000000000 +0300\n" <<
-              "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n" <<
-              "@@ -1,4 +1,4 @@\n" <<
-              " abcd\n" <<
-              "-delete1\n" <<
-              "-delete2\n" <<
-              "+insert1\n" <<
-              "+insert2\n" <<
-              " efgh\n";
+        patch << "--- file1\t2011-01-01 20:23:45.000000000 +0300\n"
+              << "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n"
+              << "@@ -1,4 +1,4 @@\n"
+              << " abcd\n"
+              << "-delete1\n"
+              << "-delete2\n"
+              << "+insert1\n"
+              << "+insert2\n"
+              << " efgh\n";
 
         QStringList newLines;
-        newLines << "newline1\n" << "newline2\n";
+        newLines << "newline1\n"
+                 << "newline2\n";
         QStringList oldLines;
-        oldLines << "insert2\n" << "efgh\n";
+        oldLines << "insert2\n"
+                 << "efgh\n";
         QStringList sourceLines;
-        sourceLines << "delete1\n" << "delete2\n" << "efgh\n";
+        sourceLines << "delete1\n"
+                    << "delete2\n"
+                    << "efgh\n";
         QStringList destinationLines;
-        destinationLines << "insert1\n" << "newline1\n" << "newline2\n";
+        destinationLines << "insert1\n"
+                         << "newline1\n"
+                         << "newline2\n";
         DifferenceHash expectedDifferences;
         expectedDifferences.insert(0, qMakePair(sourceLines, destinationLines));
 
@@ -271,13 +301,12 @@ void InteractiveDiffTest::testDifferenceContents_data()
     }
     {
         QStringList patch;
-        patch <<
-              "--- file1\t2011-01-01 20:23:45.000000000 +0300\n" <<
-              "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n" <<
-              "@@ -1,2 +1,3 @@\n" <<
-              " abcd\n" <<
-              "+\n" <<
-              " efgh\n";
+        patch << "--- file1\t2011-01-01 20:23:45.000000000 +0300\n"
+              << "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n"
+              << "@@ -1,2 +1,3 @@\n"
+              << " abcd\n"
+              << "+\n"
+              << " efgh\n";
 
         QStringList newLines;
         newLines << "a\n";
@@ -290,22 +319,21 @@ void InteractiveDiffTest::testDifferenceContents_data()
     }
     {
         QStringList patch;
-        patch <<
-              "--- file1\t2011-01-01 20:23:45.000000000 +0300\n" <<
-              "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n" <<
-              "@@ -1,3 +1,3 @@\n" <<
-              " abcd\n" <<
-              "+insert1\n" <<
-              "+insert2\n" <<
-              "+insert3\n" <<
-              "+insert4\n" <<
-              "+insert5\n" <<
-              " efgh\n" <<
-              "@@ -10,3 +15,3 @@\n" <<
-              " abcd\n" <<
-              "-delete1\n" <<
-              "+insert1\n" <<
-              " efgh\n";
+        patch << "--- file1\t2011-01-01 20:23:45.000000000 +0300\n"
+              << "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n"
+              << "@@ -1,3 +1,3 @@\n"
+              << " abcd\n"
+              << "+insert1\n"
+              << "+insert2\n"
+              << "+insert3\n"
+              << "+insert4\n"
+              << "+insert5\n"
+              << " efgh\n"
+              << "@@ -10,3 +15,3 @@\n"
+              << " abcd\n"
+              << "-delete1\n"
+              << "+insert1\n"
+              << " efgh\n";
 
         QStringList newLines;
         newLines << "newline1\n";
@@ -321,35 +349,36 @@ void InteractiveDiffTest::testDifferenceContents_data()
 void InteractiveDiffTest::testLineNumbers_data()
 {
     QTest::addColumn<QStringList>("patch");
-    QTest::addColumn<QStringList>("oldLines");     // lines that are replaced
-    QTest::addColumn<QStringList>("newLines");     // replacement lines
+    QTest::addColumn<QStringList>("oldLines"); // lines that are replaced
+    QTest::addColumn<QStringList>("newLines"); // replacement lines
     QTest::addColumn<int>("editLineNumber");
     QTest::addColumn<int>("expectedDifferenceCount");
     QTest::addColumn<LineNumberHash>("expectedLineNumbers");
 
     {
         QStringList patch;
-        patch <<
-              "--- file1\t2011-01-01 20:23:45.000000000 +0300\n" <<
-              "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n" <<
-              "@@ -1,4 +1,6 @@\n" <<
-              " abcd\n" <<
-              "-delete1\n" <<
-              "-delete2\n" <<
-              "+insert1\n" <<
-              "+insert2\n" <<
-              "+insert3\n" <<
-              "+insert4\n" <<
-              " efgh\n" <<
-              "@@ -15,3 +17,4 @@\n" <<
-              " abcd\n" <<
-              "-delete1\n" <<
-              "+insert1\n" <<
-              "+insert2\n" <<
-              " efgh\n";
+        patch << "--- file1\t2011-01-01 20:23:45.000000000 +0300\n"
+              << "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n"
+              << "@@ -1,4 +1,6 @@\n"
+              << " abcd\n"
+              << "-delete1\n"
+              << "-delete2\n"
+              << "+insert1\n"
+              << "+insert2\n"
+              << "+insert3\n"
+              << "+insert4\n"
+              << " efgh\n"
+              << "@@ -15,3 +17,4 @@\n"
+              << " abcd\n"
+              << "-delete1\n"
+              << "+insert1\n"
+              << "+insert2\n"
+              << " efgh\n";
 
         QStringList newLines;
-        newLines << "newline1\n" << "newline2\n" << "newline2\n";
+        newLines << "newline1\n"
+                 << "newline2\n"
+                 << "newline2\n";
         QStringList oldLines;
         oldLines << "oldline1\n";
         LineNumberHash expectedLineNumbers;
@@ -359,24 +388,23 @@ void InteractiveDiffTest::testLineNumbers_data()
     }
     {
         QStringList patch;
-        patch <<
-              "--- file1\t2011-01-01 20:23:45.000000000 +0300\n" <<
-              "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n" <<
-              "@@ -1,4 +1,6 @@\n" <<
-              " abcd\n" <<
-              "-delete1\n" <<
-              "-delete2\n" <<
-              "+insert1\n" <<
-              "+insert2\n" <<
-              "+insert3\n" <<
-              "+insert4\n" <<
-              " efgh\n" <<
-              "@@ -15,3 +17,4 @@\n" <<
-              " abcd\n" <<
-              "-delete1\n" <<
-              "+insert1\n" <<
-              "+insert2\n" <<
-              " efgh\n";
+        patch << "--- file1\t2011-01-01 20:23:45.000000000 +0300\n"
+              << "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n"
+              << "@@ -1,4 +1,6 @@\n"
+              << " abcd\n"
+              << "-delete1\n"
+              << "-delete2\n"
+              << "+insert1\n"
+              << "+insert2\n"
+              << "+insert3\n"
+              << "+insert4\n"
+              << " efgh\n"
+              << "@@ -15,3 +17,4 @@\n"
+              << " abcd\n"
+              << "-delete1\n"
+              << "+insert1\n"
+              << "+insert2\n"
+              << " efgh\n";
 
         QStringList newLines;
         newLines << "newline1\n";
@@ -390,24 +418,23 @@ void InteractiveDiffTest::testLineNumbers_data()
     }
     {
         QStringList patch;
-        patch <<
-              "--- file1\t2011-01-01 20:23:45.000000000 +0300\n" <<
-              "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n" <<
-              "@@ -1,4 +1,6 @@\n" <<
-              " abcd\n" <<
-              "-delete1\n" <<
-              "-delete2\n" <<
-              "+insert1\n" <<
-              "+insert2\n" <<
-              "+insert3\n" <<
-              "+insert4\n" <<
-              " efgh\n" <<
-              "@@ -15,3 +17,4 @@\n" <<
-              " abcd\n" <<
-              "-delete1\n" <<
-              "+insert1\n" <<
-              "+insert2\n" <<
-              " efgh\n";
+        patch << "--- file1\t2011-01-01 20:23:45.000000000 +0300\n"
+              << "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n"
+              << "@@ -1,4 +1,6 @@\n"
+              << " abcd\n"
+              << "-delete1\n"
+              << "-delete2\n"
+              << "+insert1\n"
+              << "+insert2\n"
+              << "+insert3\n"
+              << "+insert4\n"
+              << " efgh\n"
+              << "@@ -15,3 +17,4 @@\n"
+              << " abcd\n"
+              << "-delete1\n"
+              << "+insert1\n"
+              << "+insert2\n"
+              << " efgh\n";
 
         QStringList newLines;
         newLines << "newline1\n";
@@ -421,16 +448,15 @@ void InteractiveDiffTest::testLineNumbers_data()
     }
     {
         QStringList patch;
-        patch <<
-              "--- file1\t2011-01-01 20:23:45.000000000 +0300\n" <<
-              "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n" <<
-              "@@ -10,4 +10,4 @@\n" <<
-              " abcd\n" <<
-              "-delete1\n" <<
-              "-delete2\n" <<
-              "+insert1\n" <<
-              "+insert2\n" <<
-              " efgh\n";
+        patch << "--- file1\t2011-01-01 20:23:45.000000000 +0300\n"
+              << "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n"
+              << "@@ -10,4 +10,4 @@\n"
+              << " abcd\n"
+              << "-delete1\n"
+              << "-delete2\n"
+              << "+insert1\n"
+              << "+insert2\n"
+              << " efgh\n";
 
         QStringList newLines;
         newLines << "newline1\n";
@@ -444,29 +470,28 @@ void InteractiveDiffTest::testLineNumbers_data()
     }
     {
         QStringList patch;
-        patch <<
-              "--- file1\t2011-01-01 20:23:45.000000000 +0300\n" <<
-              "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n" <<
-              "@@ -1,3 +1,4 @@\n" <<
-              " abcd\n" <<
-              "-delete1\n" <<
-              "+insert1\n" <<
-              "+insert2\n" <<
-              " efgh\n" <<
-              "@@ -11,4 +12,5 @@\n" <<
-              " abcd\n" <<
-              "-delete2\n" <<
-              "-delete3\n" <<
-              "+insert3\n" <<
-              "+insert4\n" <<
-              "+insert5\n" <<
-              " efgh\n" <<
-              "@@ -21,4 +23,3 @@\n" <<
-              " abcd\n" <<
-              "-delete4\n" <<
-              "-delete5\n" <<
-              "+insert6\n" <<
-              " efgh\n";
+        patch << "--- file1\t2011-01-01 20:23:45.000000000 +0300\n"
+              << "+++ file2\t2011-01-01 20:24:02.000000000 +0300\n"
+              << "@@ -1,3 +1,4 @@\n"
+              << " abcd\n"
+              << "-delete1\n"
+              << "+insert1\n"
+              << "+insert2\n"
+              << " efgh\n"
+              << "@@ -11,4 +12,5 @@\n"
+              << " abcd\n"
+              << "-delete2\n"
+              << "-delete3\n"
+              << "+insert3\n"
+              << "+insert4\n"
+              << "+insert5\n"
+              << " efgh\n"
+              << "@@ -21,4 +23,3 @@\n"
+              << " abcd\n"
+              << "-delete4\n"
+              << "-delete5\n"
+              << "+insert6\n"
+              << " efgh\n";
 
         QStringList newLines;
         newLines << "delete2\n";
@@ -487,10 +512,10 @@ void InteractiveDiffTest::testLineNumbers()
     QFETCH(QStringList, patch);
     Parser parser(nullptr);
     bool malformed;
-    DiffModelList* models = parser.parse(patch, &malformed);
+    DiffModelList *models = parser.parse(patch, &malformed);
     QVERIFY(!malformed);
     QCOMPARE(models->size(), 1);
-    DiffModel* model = models->at(0);
+    DiffModel *model = models->at(0);
     model->applyAllDifferences(true);
 
     QFETCH(QStringList, oldLines);
@@ -502,7 +527,7 @@ void InteractiveDiffTest::testLineNumbers()
 
     QFETCH(LineNumberHash, expectedLineNumbers);
     for (LineNumberHash::ConstIterator iter = expectedLineNumbers.constBegin(); iter != expectedLineNumbers.constEnd(); ++iter) {
-        const Difference* diff = model->differenceAt(iter.key());
+        const Difference *diff = model->differenceAt(iter.key());
         QCOMPARE(diff->sourceLineNumber(), iter.value().first);
         QCOMPARE(diff->trackingDestinationLineNumber(), iter.value().second);
     }
@@ -511,11 +536,11 @@ void InteractiveDiffTest::testLineNumbers()
 // When the new diff and an existing unapplied one are on neighbour lines, do not merge the unapplied with the new.
 void InteractiveDiffTest::testAppliedTouch()
 {
-    Difference* first = new Difference(2, 2);
+    Difference *first = new Difference(2, 2);
     first->addSourceLine(QString("delete1"));
     first->addDestinationLine(QString("insert1"));
     first->apply(false);
-    Difference* second = new Difference(4, 4);
+    Difference *second = new Difference(4, 4);
     second->addSourceLine(QString("delete2"));
     second->addDestinationLine(QString("insert2"));
     second->apply(false);
@@ -531,13 +556,13 @@ void InteractiveDiffTest::testAppliedTouch()
 // When the new diff and an existing unapplied one intersect, the unapplied one should be removed
 void InteractiveDiffTest::testAppliedIntersect()
 {
-    Difference* first = new Difference(2, 2);
+    Difference *first = new Difference(2, 2);
     first->addSourceLine(QString("delete1"));
     first->addSourceLine(QString("delete2"));
     first->addDestinationLine(QString("insert1"));
     first->addDestinationLine(QString("insert2"));
     first->apply(false);
-    Difference* second = new Difference(5, 5);
+    Difference *second = new Difference(5, 5);
     second->addSourceLine(QString("delete3"));
     second->addSourceLine(QString("delete4"));
     second->addDestinationLine(QString("insert3"));
@@ -547,12 +572,14 @@ void InteractiveDiffTest::testAppliedIntersect()
     model.addDiff(first);
     model.addDiff(second);
     QStringList removedLines;
-    removedLines << "delete2\n" << "oldline1\n" << "delete3\n";
+    removedLines << "delete2\n"
+                 << "oldline1\n"
+                 << "delete3\n";
     QStringList insertedLines;
     insertedLines << "newline1\n";
     model.linesChanged(removedLines, insertedLines, 3);
     QCOMPARE(model.differenceCount(), 1);
-    const Difference* newDiff = model.differenceAt(0);
+    const Difference *newDiff = model.differenceAt(0);
     QCOMPARE(newDiff->applied(), true);
     QCOMPARE(newDiff->sourceLineNumber(), 3);
     QCOMPARE(newDiff->trackingDestinationLineNumber(), 3);
@@ -562,11 +589,11 @@ void InteractiveDiffTest::testAppliedIntersect()
 
 void InteractiveDiffTest::testExistingAndApplied()
 {
-    Difference* first = new Difference(2, 2);
+    Difference *first = new Difference(2, 2);
     first->addSourceLine(QString("delete1"));
     first->addDestinationLine(QString("insert1"));
     first->apply(true);
-    Difference* second = new Difference(3, 3);
+    Difference *second = new Difference(3, 3);
     second->addSourceLine(QString("delete2"));
     second->addDestinationLine(QString("insert2"));
     second->apply(false);
@@ -585,7 +612,7 @@ void InteractiveDiffTest::testExistingAndApplied()
 
 void InteractiveDiffTest::testOneLineDeletionUnapplied()
 {
-    Difference* unappliedDeletion = new Difference(1, 1);
+    Difference *unappliedDeletion = new Difference(1, 1);
     unappliedDeletion->addSourceLine("delete1\n");
     unappliedDeletion->apply(false);
     DiffModel model;
@@ -596,7 +623,7 @@ void InteractiveDiffTest::testOneLineDeletionUnapplied()
     insertedLines << "newline1\n";
     model.linesChanged(removedLines, insertedLines, 1);
     QCOMPARE(model.differenceCount(), 1);
-    const Difference* actual = model.differenceAt(0);
+    const Difference *actual = model.differenceAt(0);
     CompareDifferenceStringList(actual->sourceLines(), removedLines);
     CompareDifferenceStringList(actual->destinationLines(), insertedLines);
 }
@@ -604,44 +631,43 @@ void InteractiveDiffTest::testOneLineDeletionUnapplied()
 void InteractiveDiffTest::testApplyUnapply()
 {
     QStringList patch;
-    patch <<
-          "--- file1\t2011-01-01 20:23:45 +0300\n" <<
-          "+++ file2\t2011-01-01 20:24:02 +0300\n" <<
-          "@@ -1,3 +1,4 @@\n" <<
-          " line1\n" <<
-          "-delete1\n" <<
-          "+insert1\n" <<
-          "+insert2\n" <<
-          " line2\n" <<
-          "@@ -11,4 +12,5 @@\n" <<
-          " line3\n" <<
-          "-delete2\n" <<
-          "-delete3\n" <<
-          "+insert3\n" <<
-          "+insert4\n" <<
-          "+insert5\n" <<
-          " line4\n" <<
-          "@@ -21,4 +23,2 @@\n" <<
-          " line5\n" <<
-          "-delete4\n" <<
-          "-delete5\n" <<
-          " line6\n" <<
-          "@@ -31,3 +31,3 @@\n" <<
-          " line7\n" <<
-          "-delete6\n" <<
-          "+insert6\n" <<
-          " line8\n";
+    patch << "--- file1\t2011-01-01 20:23:45 +0300\n"
+          << "+++ file2\t2011-01-01 20:24:02 +0300\n"
+          << "@@ -1,3 +1,4 @@\n"
+          << " line1\n"
+          << "-delete1\n"
+          << "+insert1\n"
+          << "+insert2\n"
+          << " line2\n"
+          << "@@ -11,4 +12,5 @@\n"
+          << " line3\n"
+          << "-delete2\n"
+          << "-delete3\n"
+          << "+insert3\n"
+          << "+insert4\n"
+          << "+insert5\n"
+          << " line4\n"
+          << "@@ -21,4 +23,2 @@\n"
+          << " line5\n"
+          << "-delete4\n"
+          << "-delete5\n"
+          << " line6\n"
+          << "@@ -31,3 +31,3 @@\n"
+          << " line7\n"
+          << "-delete6\n"
+          << "+insert6\n"
+          << " line8\n";
     Parser parser(nullptr);
     bool malformed;
-    DiffModelList* models = parser.parse(patch, &malformed);
+    DiffModelList *models = parser.parse(patch, &malformed);
     QVERIFY(!malformed);
     QCOMPARE(models->size(), 1);
-    DiffModel* model = models->at(0);
+    DiffModel *model = models->at(0);
     QCOMPARE(model->differenceCount(), 4);
     model->applyAllDifferences(true);
 
     const auto differences = *model->differences();
-    for (Difference* diff : differences) {
+    for (Difference *diff : differences) {
         QVERIFY(diff->applied());
     }
     model->applyAllDifferences(false);
@@ -717,56 +743,66 @@ void InteractiveDiffTest::testApplyUnapply()
     QCOMPARE(model->differenceAt(3)->trackingDestinationLineNumber(), 32);
 }
 
-static void
-contextDiff1()
+static void contextDiff1()
 {
     QStringList patch;
-    patch <<
-          "commit 7377fcc682e85ef9784adb2a2da2c8c6756f9018 (HEAD, KDE/4.11)\n" <<
-          "Author:     Dr. Chocholou큄ek <bla@zin.ec>\n" <<
-          "AuthorDate: Sat Jan 25 17:30:01 2014 +0100\n" <<
-          "\n" <<
-          "    Fake diff.\n" <<
-          "\n" <<
-          "diff --git a/libdiff2/diffmodel.cpp b/libdiff2/diffmodel.cpp\n" <<
-          "new file mode 100644\n" <<
-          "index a42e82d..a8da0c9\n" <<
-          "*** a/libdiff2/diffmodel.cpp\n" <<  // note the missing timestamps
-          "--- b/libdiff2/diffmodel.cpp\n" <<
-          "*************** DiffModel::DiffModel() :\n" <<
-          "*** 58,64 ****\n" <<
-          "  	m_sourceFile( "" ),\n" <<
-          "  	m_destinationFile( "" ),\n" <<
-          "  	m_sourceTimestamp( "" ),\n" <<
-          "! 	m_destinationTimestamp( "" ),\n" <<
-          "  	m_sourceRevision( "" ),\n" <<
-          "  	m_destinationRevision( "" ),\n" <<
-          "  	m_appliedCount( 0 ),\n" <<
-          "--- 58,64 ----\n" <<
-          "  	m_sourceFile( "" ),\n" <<
-          "  	m_destinationFile( "" ),\n" <<
-          "  	m_sourceTimestamp( "" ),\n" <<
-          "! 	m_destinationTimestamp( \"doh\" ),\n" <<
-          "  	m_sourceRevision( "" ),\n" <<
-          "  	m_destinationRevision( "" ),\n" <<
-          "  	m_appliedCount( 0 ),\n" <<
-          "*************** void DiffModel::splitSourceInPathAndFile\n" <<
-          "*** 84,89 ****\n" <<
-          "--- 84,91 ----\n" <<
-          "  	if( ( pos = m_source.lastIndexOf( \"/\" ) ) >= 0 )\n" <<
-          "  		m_sourcePath = m_source.mid( 0, pos+1 );\n" <<
-          "  \n" <<
-          "+ 	add_this;\n" <<
-          "+ \n" <<
-          "  	if( ( pos = m_source.lastIndexOf( \"/\" ) ) >= 0 )\n" <<
-          "  		m_sourceFile = m_source.mid( pos+1, m_source.length() - pos );\n" <<
-          "  	else\n";
+    patch << "commit 7377fcc682e85ef9784adb2a2da2c8c6756f9018 (HEAD, KDE/4.11)\n"
+          << "Author:     Dr. Chocholou큄ek <bla@zin.ec>\n"
+          << "AuthorDate: Sat Jan 25 17:30:01 2014 +0100\n"
+          << "\n"
+          << "    Fake diff.\n"
+          << "\n"
+          << "diff --git a/libdiff2/diffmodel.cpp b/libdiff2/diffmodel.cpp\n"
+          << "new file mode 100644\n"
+          << "index a42e82d..a8da0c9\n"
+          << "*** a/libdiff2/diffmodel.cpp\n"
+          << // note the missing timestamps
+        "--- b/libdiff2/diffmodel.cpp\n"
+          << "*************** DiffModel::DiffModel() :\n"
+          << "*** 58,64 ****\n"
+          << "  	m_sourceFile( "
+             " ),\n"
+          << "  	m_destinationFile( "
+             " ),\n"
+          << "  	m_sourceTimestamp( "
+             " ),\n"
+          << "! 	m_destinationTimestamp( "
+             " ),\n"
+          << "  	m_sourceRevision( "
+             " ),\n"
+          << "  	m_destinationRevision( "
+             " ),\n"
+          << "  	m_appliedCount( 0 ),\n"
+          << "--- 58,64 ----\n"
+          << "  	m_sourceFile( "
+             " ),\n"
+          << "  	m_destinationFile( "
+             " ),\n"
+          << "  	m_sourceTimestamp( "
+             " ),\n"
+          << "! 	m_destinationTimestamp( \"doh\" ),\n"
+          << "  	m_sourceRevision( "
+             " ),\n"
+          << "  	m_destinationRevision( "
+             " ),\n"
+          << "  	m_appliedCount( 0 ),\n"
+          << "*************** void DiffModel::splitSourceInPathAndFile\n"
+          << "*** 84,89 ****\n"
+          << "--- 84,91 ----\n"
+          << "  	if( ( pos = m_source.lastIndexOf( \"/\" ) ) >= 0 )\n"
+          << "  		m_sourcePath = m_source.mid( 0, pos+1 );\n"
+          << "  \n"
+          << "+ 	add_this;\n"
+          << "+ \n"
+          << "  	if( ( pos = m_source.lastIndexOf( \"/\" ) ) >= 0 )\n"
+          << "  		m_sourceFile = m_source.mid( pos+1, m_source.length() - pos );\n"
+          << "  	else\n";
     Parser parser(nullptr);
     bool malformed;
-    DiffModelList* models = parser.parse(patch, &malformed);
+    DiffModelList *models = parser.parse(patch, &malformed);
     QVERIFY(!malformed);
     QCOMPARE(models->size(), 1);
-    DiffModel* model = models->at(0);
+    DiffModel *model = models->at(0);
     QCOMPARE(model->differenceCount(), 2);
     model->applyAllDifferences(true);
     QVERIFY(model->differenceAt(0)->applied());
@@ -776,30 +812,36 @@ contextDiff1()
     QCOMPARE(model->differenceAt(1)->trackingDestinationLineNumber(), 87);
 }
 
-static void
-contextDiff2()
+static void contextDiff2()
 {
     QStringList patch;
-    patch <<
-          "*** a/libdiff2/diffmodel.cpp\n" <<
-          "--- b/libdiff2/diffmodel.cpp\n" <<
-          "***************\n" <<
-          "*** 55,60 **** DiffModel::DiffModel() :\n" << // note the  context here
-          "--- 55,61 ----\n" <<
-          "  	m_destination( "" ),\n" <<
-          "  	m_sourcePath( "" ),\n" <<
-          "  	m_destinationPath( "" ),\n" <<
-          "+ 	m_hoh ( "" );\n" <<
-          "  	m_sourceFile( "" ),\n" <<
-          "  	m_destinationFile( "" ),\n" <<
-          "  	m_sourceTimestamp( "" ),\n";
+    patch << "*** a/libdiff2/diffmodel.cpp\n"
+          << "--- b/libdiff2/diffmodel.cpp\n"
+          << "***************\n"
+          << "*** 55,60 **** DiffModel::DiffModel() :\n"
+          << // note the  context here
+        "--- 55,61 ----\n"
+          << "  	m_destination( "
+             " ),\n"
+          << "  	m_sourcePath( "
+             " ),\n"
+          << "  	m_destinationPath( "
+             " ),\n"
+          << "+ 	m_hoh ( "
+             " );\n"
+          << "  	m_sourceFile( "
+             " ),\n"
+          << "  	m_destinationFile( "
+             " ),\n"
+          << "  	m_sourceTimestamp( "
+             " ),\n";
 
     Parser parser(nullptr);
     bool malformed;
-    DiffModelList* models = parser.parse(patch, &malformed);
+    DiffModelList *models = parser.parse(patch, &malformed);
     QVERIFY(!malformed);
     QCOMPARE(models->size(), 1);
-    DiffModel* model = models->at(0);
+    DiffModel *model = models->at(0);
     QCOMPARE(model->differenceCount(), 1);
     model->applyAllDifferences(true);
     QVERIFY(model->differenceAt(0)->applied());
@@ -816,17 +858,16 @@ void InteractiveDiffTest::testContextDiff()
 void InteractiveDiffTest::testNormalDiff()
 {
     QStringList patch;
-    patch <<
-          "1c1\n" <<
-          "< a\n" <<
-          "---\n" <<
-          "> b\n";
+    patch << "1c1\n"
+          << "< a\n"
+          << "---\n"
+          << "> b\n";
     Parser parser(nullptr);
     bool malformed;
-    DiffModelList* models = parser.parse(patch, &malformed);
+    DiffModelList *models = parser.parse(patch, &malformed);
     QVERIFY(!malformed);
     QCOMPARE(models->size(), 1);
-    DiffModel* model = models->at(0);
+    DiffModel *model = models->at(0);
     QCOMPARE(model->differenceCount(), 1);
     model->applyAllDifferences(true);
     QVERIFY(model->differenceAt(0)->applied());
diff --git a/tests/interactivedifftest.h b/tests/interactivedifftest.h
index 2a14b820ba22..9dd6b1be8110 100644
--- a/tests/interactivedifftest.h
+++ b/tests/interactivedifftest.h
@@ -1,15 +1,16 @@
 /*
-SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
+    SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
 
-SPDX-License-Identifier: LGPL-2.0-or-later
+    SPDX-License-Identifier: LGPL-2.0-or-later
 */
 
 #ifndef INTERACTIVEDIFFTEST_H
 #define INTERACTIVEDIFFTEST_H
 
-#include <QObject>
-
+// lib
 #include "difference.h"
+// Qt
+#include <QObject>
 
 class InteractiveDiffTest : public QObject
 {
@@ -28,8 +29,9 @@ private Q_SLOTS:
     void testApplyUnapply();
     void testContextDiff();
     void testNormalDiff();
+
 private:
-    void CompareDifferenceStringList(const Diff2::DifferenceStringList& actual, const QStringList& expected);
+    void CompareDifferenceStringList(const KompareDiff2::DifferenceStringList &actual, const QStringList &expected);
 };
 
 #endif //  INTERACTIVEDIFFTEST_H
diff --git a/tests/levenshteintest.cpp b/tests/levenshteintest.cpp
index ed9ec3176c05..e79a5db4d003 100644
--- a/tests/levenshteintest.cpp
+++ b/tests/levenshteintest.cpp
@@ -1,22 +1,26 @@
 /*
-SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
+    SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
 
-SPDX-License-Identifier: LGPL-2.0-or-later
+    SPDX-License-Identifier: LGPL-2.0-or-later
 */
 
 #include "levenshteintest.h"
 
-#include <QTest>
+// lib
 #include "difference.h"
 #include "differencestringpair.h"
 #include "levenshteintable.h"
 #include "stringlistpair.h"
+// Qt
+#include <QTest>
 
-using namespace Diff2;
+using namespace KompareDiff2;
 
-namespace QTest {
+namespace QTest
+{
 
-template<> char* toString(const Marker& marker)
+template<>
+char *toString(const Marker &marker)
 {
     QByteArray result = "Marker(";
     if (marker.type() == Marker::Start) {
@@ -33,9 +37,9 @@ template<> char* toString(const Marker& marker)
 
 void LevenshteinTest::testFirstEmptyString()
 {
-    DifferenceString* string1 = new DifferenceString(QString("12345"));
-    DifferenceString* string2 = new DifferenceString(QString());
-    DifferenceStringPair* pair = new DifferenceStringPair(string1, string2);
+    DifferenceString *string1 = new DifferenceString(QString("12345"));
+    DifferenceString *string2 = new DifferenceString(QString());
+    DifferenceStringPair *pair = new DifferenceStringPair(string1, string2);
     LevenshteinTable<DifferenceStringPair> table;
     table.createTable(pair);
     table.createListsOfMarkers();
@@ -53,9 +57,9 @@ void LevenshteinTest::testFirstEmptyString()
 
 void LevenshteinTest::testSecondEmptyString()
 {
-    DifferenceString* string1 = new DifferenceString(QString());
-    DifferenceString* string2 = new DifferenceString(QString("12345"));
-    DifferenceStringPair* pair = new DifferenceStringPair(string1, string2);
+    DifferenceString *string1 = new DifferenceString(QString());
+    DifferenceString *string2 = new DifferenceString(QString("12345"));
+    DifferenceStringPair *pair = new DifferenceStringPair(string1, string2);
     LevenshteinTable<DifferenceStringPair> table;
     table.createTable(pair);
     table.createListsOfMarkers();
@@ -71,12 +75,11 @@ void LevenshteinTest::testSecondEmptyString()
     }
 }
 
-
 void LevenshteinTest::testDifferenceStrings()
 {
-    DifferenceString* string1 = new DifferenceString(QString("aaabcddefghik"));
-    DifferenceString* string2 = new DifferenceString(QString("aabcefghijk"));
-    DifferenceStringPair* pair = new DifferenceStringPair(string1, string2);
+    DifferenceString *string1 = new DifferenceString(QString("aaabcddefghik"));
+    DifferenceString *string2 = new DifferenceString(QString("aabcefghijk"));
+    DifferenceStringPair *pair = new DifferenceStringPair(string1, string2);
     LevenshteinTable<DifferenceStringPair> table;
     table.createTable(pair);
     table.createListsOfMarkers();
@@ -95,10 +98,21 @@ void LevenshteinTest::testDifferenceStrings()
 void LevenshteinTest::testStringLists()
 {
     QStringList list1;
-    list1 << "delete1" << "line1" << "line2" << "line3" << "delete2" << "delete3" << "line4";
+    list1 << "delete1"
+          << "line1"
+          << "line2"
+          << "line3"
+          << "delete2"
+          << "delete3"
+          << "line4";
     QStringList list2;
-    list2 << "line1" << "line2" << "line3" << "insert1" << "line4" << "insert2";
-    StringListPair* pair = new StringListPair(list1, list2);
+    list2 << "line1"
+          << "line2"
+          << "line3"
+          << "insert1"
+          << "line4"
+          << "insert2";
+    StringListPair *pair = new StringListPair(list1, list2);
     LevenshteinTable<StringListPair> table;
     table.createTable(pair);
     table.createListsOfMarkers();
@@ -118,10 +132,16 @@ void LevenshteinTest::testStringLists()
 void LevenshteinTest::testSmth()
 {
     QStringList list1;
-    list1 << "insert1\n" << "newline1\n" << "newline2\n" << "insert2\n";;
+    list1 << "insert1\n"
+          << "newline1\n"
+          << "newline2\n"
+          << "insert2\n";
+    ;
     QStringList list2;
-    list2 << "delete1\n" << "efgh\n" << "delete2\n";
-    StringListPair* pair = new StringListPair(list1, list2);
+    list2 << "delete1\n"
+          << "efgh\n"
+          << "delete2\n";
+    StringListPair *pair = new StringListPair(list1, list2);
     LevenshteinTable<StringListPair> table;
     table.createTable(pair);
     table.createListsOfMarkers();
@@ -132,13 +152,12 @@ void LevenshteinTest::testSmth()
         QCOMPARE(*pair->markerListFirst()[i], *markersFirstExpected[i]);
     }
     MarkerList markersSecondExpected;
-    markersSecondExpected << new Marker(Marker::Start, 0)  << new Marker(Marker::End, 3);
+    markersSecondExpected << new Marker(Marker::Start, 0) << new Marker(Marker::End, 3);
     for (int i = 0; i < markersSecondExpected.size(); ++i) {
         QCOMPARE(*pair->markerListSecond()[i], *markersSecondExpected[i]);
     }
 }
 
-
 QTEST_GUILESS_MAIN(LevenshteinTest);
 
 #include "moc_levenshteintest.cpp"
diff --git a/tests/levenshteintest.h b/tests/levenshteintest.h
index c4b23472d916..76e0c587ea7f 100644
--- a/tests/levenshteintest.h
+++ b/tests/levenshteintest.h
@@ -1,12 +1,13 @@
 /*
-SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
+    SPDX-FileCopyrightText: 2011 Dmitry Risenberg <dmitry.risenberg@gmail.com>
 
-SPDX-License-Identifier: LGPL-2.0-or-later
+    SPDX-License-Identifier: LGPL-2.0-or-later
 */
 
 #ifndef LEVENSHTEINTEST_H
 #define LEVENSHTEINTEST_H
 
+// Qt
 #include <QObject>
 
 class LevenshteinTest : public QObject
